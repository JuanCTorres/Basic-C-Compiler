This log will record various tests done to lexer.

test_1.input BEGIN:
===========================================================

line num:  1	token: +		 length:  1	"+"
line num:  1	token: -		 length:  1	"-"
line num:  1	token: *		 length:  1	"*"
line num:  1	token: <		 length:  1	"<"
line num:  1	token: >		 length:  1	">"
line num:  1	token: ;		 length:  1	";"
line num:  1	token: ,		 length:  1	","
line num:  1	token: (		 length:  1	"("
line num:  1	token: )		 length:  1	")"
line num:  1	token: [		 length:  1	"["
line num:  1	token: ]		 length:  1	"]"
line num:  1	token: {		 length:  1	"{"
line num:  1	token: }		 length:  1	"}"
line num:  1	token: %		 length:  1	"%"
line num:  1	token: LESS_EQUAL		 length:  2	"<="
line num:  1	token: GREATER_EQUAL		 length:  2	">="
line num:  1	token: ISEQUAL		 length:  2	"=="
line num:  1	token: NOTEQUAL		 length:  2	"!="
line num:  1	token: INCREMENT		 length:  2	"++"
line num:  1	token: DECREMENT		 length:  2	"--"
line num:  1	token: AND		 length:  2	"&&"
line num:  1	token: OR		 length:  2	"||"
line num:  1	token: !		 length:  1	"!"
line num:  1	token: /		 length:  1	"/"
line num:  3	token: IF		 length:  2	"if"
line num:  4	token: ELSE		 length:  4	"else"
line num:  5	token: WHILE		 length:  5	"while"
line num:  6	token: RETURN		 length:  6	"return"
line num:  7	token: FOR		 length:  3	"for"
line num:  8	token: VOID		 length:  4	"void"
line num:  9	token: READ		 length:  4	"read"
line num: 10	token: PRINT		 length:  5	"print"
line num: 11	token: INT		 length:  3	"int"
line num: 15	token: OTHER		 length:  1	"^"
line num: 15	token: INTCONST		 length:  3	"123"
line num: 26	token: INTCONST		 length:  3	"432"
line num: 26	token: DO		 length:  2	"do"


===========================================================
test_c.input BEGIN:
===========================================================
line num:  1	token: OTHER		 length:  1	"#"
line num:  1	token: ID		 length:  7	"include"
line num:  1	token: <		 length:  1	"<"
line num:  1	token: ID		 length:  5	"stdio"
line num:  1	token: .		 length:  1	"."
line num:  1	token: ID		 length:  1	"h"
line num:  1	token: >		 length:  1	">"
line num:  4	token: INT		 length:  3	"int"
line num:  4	token: ID		 length:  4	"main"
line num:  4	token: (		 length:  1	"("
line num:  4	token: VOID		 length:  4	"void"
line num:  4	token: )		 length:  1	")"
line num:  5	token: {		 length:  1	"{"
line num:  7	token: PRINT		 length:  5	"print"
line num:  7	token: (		 length:  1	"("
line num:  7	token: STRINGCONST		 length: 11	"Hello World"
line num:  7	token: )		 length:  1	")"
line num:  7	token: ;		 length:  1	";"
line num:  9	token: IF		 length:  2	"if"
line num:  9	token: (		 length:  1	"("
line num:  9	token: INTCONST		 length:  1	"3"
line num:  9	token: >		 length:  1	">"
line num:  9	token: INTCONST		 length:  1	"0"
line num:  9	token: {		 length:  1	"{"
line num: 10	token: PRINT		 length:  5	"print"
line num: 10	token: (		 length:  1	"("
line num: 10	token: STRINGCONST		 length: 13	"always true\n"
line num: 10	token: )		 length:  1	")"
line num: 10	token: ;		 length:  1	";"
line num: 12	token: }		 length:  1	"}"
line num: 13	token: ELSE		 length:  4	"else"
line num: 13	token: {		 length:  1	"{"
line num: 14	token: PRINT		 length:  5	"print"
line num: 14	token: (		 length:  1	"("
line num: 14	token: STRINGCONST		 length: 10	"not true\n"
line num: 14	token: )		 length:  1	")"
line num: 14	token: ;		 length:  1	";"
line num: 15	token: }		 length:  1	"}"
line num: 17	token: INTCONST		 length:  1	"5"
line num: 17	token: +		 length:  1	"+"
line num: 17	token: INTCONST		 length:  1	"2"
line num: 18	token: INTCONST		 length:  1	"5"
line num: 18	token: +		 length:  1	"+"
line num: 18	token: INTCONST		 length:  1	"2"
line num: 20	token: RETURN		 length:  6	"return"
line num: 20	token: INTCONST		 length:  1	"0"
line num: 22	token: }		 length:  1	"}"


===========================================================
TEST FINISHED


