Result of test done to parser.

op.c BEGIN.
===========================================================






ROOT (uid: N0) inferred ret type: ROOT isDecl = 0, ignore = 0 
  FUNC_DECLARATION (uid: N1) inferred ret type: INT_TYPE isDecl = 0, ignore = 0 foo  (1 params: VAR_ARRAY_INT )[scope (0,0) <- (0,0)] declared at line 1  (type: INT_TYPE) 
    FORMAL_PARAMS (uid: N2) inferred ret type: ROOT isDecl = 0, ignore = 0 
      ARRAY_TYPE (uid: N3) inferred ret type: ARRAY_TYPE isDecl = 1, ignore = 0 bar [scope (1,0) <- (0,0)] declared at line 1  (type: ARRAY_TYPE) 
    SEQ (uid: N4) inferred ret type: ROOT isDecl = 0, ignore = 0 
      LOCAL_DECLARATIONS (uid: N5) inferred ret type: ROOT isDecl = 0, ignore = 0 
      STATEMENT_LIST (uid: N6) inferred ret type: ROOT isDecl = 0, ignore = 0 
        = (uid: N7) inferred ret type: INT_TYPE isDecl = 0, ignore = 0  (type: INT_TYPE) 
          ARRAY_TYPE (uid: N8) inferred ret type: INT_TYPE isDecl = 0, ignore = 0 bar [scope (1,0) <- (0,0)] declared at line 1  (type: INT_TYPE) 
            INT_LITERAL (uid: N9) inferred ret type: INT_TYPE isDecl = 0, ignore = 0 1 (type: INT_TYPE) 
          INT_LITERAL (uid: N10) inferred ret type: INT_TYPE isDecl = 0, ignore = 0 3 (type: INT_TYPE) 
        RETURN (uid: N11) inferred ret type: ROOT isDecl = 0, ignore = 0 [scope (1,0) <- (0,0)]return to foo at line 1 
          ARRAY_TYPE (uid: N12) inferred ret type: INT_TYPE isDecl = 0, ignore = 0 bar [scope (1,0) <- (0,0)] declared at line 1  (type: INT_TYPE) 
            INT_LITERAL (uid: N13) inferred ret type: INT_TYPE isDecl = 0, ignore = 0 1 (type: INT_TYPE) 
  FUNC_DECLARATION (uid: N14) inferred ret type: VOID_TYPE isDecl = 0, ignore = 0 main  (0 params:)[scope (0,0) <- (0,0)] declared at line 6  (type: VOID_TYPE) 
    FORMAL_PARAMS (uid: N15) inferred ret type: ROOT isDecl = 0, ignore = 0 
    SEQ (uid: N16) inferred ret type: ROOT isDecl = 0, ignore = 0 
      LOCAL_DECLARATIONS (uid: N17) inferred ret type: ROOT isDecl = 0, ignore = 0 
        ARRAY_TYPE (uid: N18) inferred ret type: INT_TYPE isDecl = 1, ignore = 0 b [scope (1,1) <- (0,0)] declared at line 7  (type: INT_TYPE) 
          INT_LITERAL (uid: N19) inferred ret type: INT_TYPE isDecl = 0, ignore = 0 10 (type: INT_TYPE) 
        = (uid: N20) inferred ret type: INT_TYPE isDecl = 0, ignore = 0  (type: INT_TYPE) 
          ID (uid: N21) inferred ret type: INT_TYPE isDecl = 1, ignore = 0 a [scope (1,1) <- (0,0)] declared at line 8  (type: INT_TYPE) 
          CALL (uid: N22) inferred ret type: INT_TYPE isDecl = 0, ignore = 0  (type: INT_TYPE) 
            FUNCTION (uid: N23) inferred ret type: INT_TYPE isDecl = 0, ignore = 0 foo  (1 params: INT_TYPE)[scope (1,1) <- (0,0)] declared at line 1  (type: INT_TYPE) 
              ID (uid: N24) inferred ret type: ARRAY_TYPE isDecl = 0, ignore = 0 b  array length: 10 [scope (1,1) <- (0,0)] declared at line 7  (type: ARRAY_TYPE) 
        = (uid: N25) inferred ret type: INT_TYPE isDecl = 0, ignore = 0  (type: INT_TYPE) 
          ID (uid: N26) inferred ret type: INT_TYPE isDecl = 1, ignore = 0 c [scope (1,1) <- (0,0)] declared at line 9  (type: INT_TYPE) 
          - (uid: N27) inferred ret type: INT_TYPE isDecl = 0, ignore = 0  (type: INT_TYPE) 
            + (uid: N28) inferred ret type: INT_TYPE isDecl = 0, ignore = 0  (type: INT_TYPE) 
              ID (uid: N29) inferred ret type: INT_TYPE isDecl = 0, ignore = 0 a [scope (1,1) <- (0,0)] declared at line 8  (type: INT_TYPE) 
              * (uid: N30) inferred ret type: INT_TYPE isDecl = 0, ignore = 0  (type: INT_TYPE) 
                ++ (uid: N31) inferred ret type: INT_TYPE isDecl = 0, ignore = 0  (type: INT_TYPE) 
                  ARRAY_TYPE (uid: N32) inferred ret type: INT_TYPE isDecl = 0, ignore = 0 b [scope (1,1) <- (0,0)] declared at line 7  (type: INT_TYPE) 
                    INT_LITERAL (uid: N33) inferred ret type: INT_TYPE isDecl = 0, ignore = 0 1 (type: INT_TYPE) 
                INT_LITERAL (uid: N34) inferred ret type: INT_TYPE isDecl = 0, ignore = 0 4 (type: INT_TYPE) 
            INT_LITERAL (uid: N35) inferred ret type: INT_TYPE isDecl = 0, ignore = 0 5 (type: INT_TYPE) 
      STATEMENT_LIST (uid: N36) inferred ret type: ROOT isDecl = 0, ignore = 0 
        = (uid: N37) inferred ret type: INT_TYPE isDecl = 0, ignore = 0  (type: INT_TYPE) 
          ID (uid: N38) inferred ret type: INT_TYPE isDecl = 0, ignore = 0 a [scope (1,1) <- (0,0)] declared at line 8  (type: INT_TYPE) 
          ++ (uid: N39) inferred ret type: INT_TYPE isDecl = 0, ignore = 0  (type: INT_TYPE) 
            ARRAY_TYPE (uid: N40) inferred ret type: INT_TYPE isDecl = 0, ignore = 0 b [scope (1,1) <- (0,0)] declared at line 7  (type: INT_TYPE) 
              ++ (uid: N41) inferred ret type: INT_TYPE isDecl = 0, ignore = 0  (type: INT_TYPE) 
                ID (uid: N42) inferred ret type: INT_TYPE isDecl = 0, ignore = 0 a [scope (1,1) <- (0,0)] declared at line 8  (type: INT_TYPE) 
        = (uid: N43) inferred ret type: INT_TYPE isDecl = 0, ignore = 0  (type: INT_TYPE) 
          ID (uid: N44) inferred ret type: INT_TYPE isDecl = 0, ignore = 0 a [scope (1,1) <- (0,0)] declared at line 8  (type: INT_TYPE) 
          UNARY - (uid: N45) inferred ret type: INT_TYPE isDecl = 0, ignore = 0  (type: INT_TYPE) 
            ID (uid: N46) inferred ret type: INT_TYPE isDecl = 0, ignore = 0 a [scope (1,1) <- (0,0)] declared at line 8  (type: INT_TYPE) 
        PRINT (uid: N47) inferred ret type: ROOT isDecl = 0, ignore = 0 
          ARRAY_TYPE (uid: N48) inferred ret type: INT_TYPE isDecl = 0, ignore = 0 b [scope (1,1) <- (0,0)] declared at line 7  (type: INT_TYPE) 
            UNARY - (uid: N49) inferred ret type: INT_TYPE isDecl = 0, ignore = 0  (type: INT_TYPE) 
              ID (uid: N50) inferred ret type: INT_TYPE isDecl = 0, ignore = 0 a [scope (1,1) <- (0,0)] declared at line 8  (type: INT_TYPE) 
        RETURN (uid: N0) inferred ret type: VOID_TYPE isDecl = 0, ignore = 0 [scope (0,0) <- (0,0)]return to main at line 6  (type: VOID_TYPE) 
          VOID_TYPE (uid: N0) inferred ret type: ROOT isDecl = 0, ignore = 0 
(0-0) contains:
  VAR_INT __void (offset: 0 or addr: 0)
  VAR_INT __10 (offset: 0 or addr: 0)
  VAR_INT __1 (offset: 0 or addr: 0)
  VAR_INT __3 (offset: 0 or addr: 0)
  VAR_INT __4 (offset: 0 or addr: 0)
  VAR_INT __5 (offset: 0 or addr: 0)
There are 176 entries
0: (LABEL, foo, -, -)
1: (MULT, __T0, __1, __4)
2: (ADDR, __T1, bar, -)
3: (SUB, __T2, __T1, __T0)
4: (ASSIGN, __T2, __3, -)
5: (MULT, __T5, __1, __4)
6: (ADDR, __T6, bar, -)
7: (SUB, __T7, __T6, __T5)
8: (DEREF, __T4, __T7, -)
9: (RETURN, __T4, -, -)
10: (LABEL, main, -, -)
11: (MULT, __T10, __0, __4)
12: (ADDR, __T11, b, -)
13: (SUB, __T12, __T11, __T10)
14: (DEREF, __T9, __T12, -)
15: (ASSIGN, __T14, __T9, -)
16: (PUSH, __T14, -, -)
17: (MULT, __T16, __1, __4)
18: (ADDR, __T17, b, -)
19: (SUB, __T18, __T17, __T16)
20: (DEREF, __T15, __T18, -)
21: (ASSIGN, __T20, __T15, -)
22: (PUSH, __T20, -, -)
23: (MULT, __T22, __2, __4)
24: (ADDR, __T23, b, -)
25: (SUB, __T24, __T23, __T22)
26: (DEREF, __T21, __T24, -)
27: (ASSIGN, __T26, __T21, -)
28: (PUSH, __T26, -, -)
29: (MULT, __T28, __3, __4)
30: (ADDR, __T29, b, -)
31: (SUB, __T30, __T29, __T28)
32: (DEREF, __T27, __T30, -)
33: (ASSIGN, __T32, __T27, -)
34: (PUSH, __T32, -, -)
35: (MULT, __T34, __4, __4)
36: (ADDR, __T35, b, -)
37: (SUB, __T36, __T35, __T34)
38: (DEREF, __T33, __T36, -)
39: (ASSIGN, __T38, __T33, -)
40: (PUSH, __T38, -, -)
41: (MULT, __T40, __5, __4)
42: (ADDR, __T41, b, -)
43: (SUB, __T42, __T41, __T40)
44: (DEREF, __T39, __T42, -)
45: (ASSIGN, __T44, __T39, -)
46: (PUSH, __T44, -, -)
47: (MULT, __T46, __6, __4)
48: (ADDR, __T47, b, -)
49: (SUB, __T48, __T47, __T46)
50: (DEREF, __T45, __T48, -)
51: (ASSIGN, __T50, __T45, -)
52: (PUSH, __T50, -, -)
53: (MULT, __T52, __7, __4)
54: (ADDR, __T53, b, -)
55: (SUB, __T54, __T53, __T52)
56: (DEREF, __T51, __T54, -)
57: (ASSIGN, __T56, __T51, -)
58: (PUSH, __T56, -, -)
59: (MULT, __T58, __8, __4)
60: (ADDR, __T59, b, -)
61: (SUB, __T60, __T59, __T58)
62: (DEREF, __T57, __T60, -)
63: (ASSIGN, __T62, __T57, -)
64: (PUSH, __T62, -, -)
65: (MULT, __T64, __9, __4)
66: (ADDR, __T65, b, -)
67: (SUB, __T66, __T65, __T64)
68: (DEREF, __T63, __T66, -)
69: (ASSIGN, __T68, __T63, -)
70: (PUSH, __T68, -, -)
71: (MULT, __T70, __10, __4)
72: (ADDR, __T71, b, -)
73: (SUB, __T72, __T71, __T70)
74: (DEREF, __T69, __T72, -)
75: (ASSIGN, __T74, __T69, -)
76: (PUSH, __T74, -, -)
77: (MULT, __T76, __11, __4)
78: (ADDR, __T77, b, -)
79: (SUB, __T78, __T77, __T76)
80: (DEREF, __T75, __T78, -)
81: (ASSIGN, __T80, __T75, -)
82: (PUSH, __T80, -, -)
83: (MULT, __T82, __12, __4)
84: (ADDR, __T83, b, -)
85: (SUB, __T84, __T83, __T82)
86: (DEREF, __T81, __T84, -)
87: (ASSIGN, __T86, __T81, -)
88: (PUSH, __T86, -, -)
89: (MULT, __T88, __13, __4)
90: (ADDR, __T89, b, -)
91: (SUB, __T90, __T89, __T88)
92: (DEREF, __T87, __T90, -)
93: (ASSIGN, __T92, __T87, -)
94: (PUSH, __T92, -, -)
95: (MULT, __T94, __14, __4)
96: (ADDR, __T95, b, -)
97: (SUB, __T96, __T95, __T94)
98: (DEREF, __T93, __T96, -)
99: (ASSIGN, __T98, __T93, -)
100: (PUSH, __T98, -, -)
101: (MULT, __T100, __15, __4)
102: (ADDR, __T101, b, -)
103: (SUB, __T102, __T101, __T100)
104: (DEREF, __T99, __T102, -)
105: (ASSIGN, __T104, __T99, -)
106: (PUSH, __T104, -, -)
107: (MULT, __T106, __16, __4)
108: (ADDR, __T107, b, -)
109: (SUB, __T108, __T107, __T106)
110: (DEREF, __T105, __T108, -)
111: (ASSIGN, __T110, __T105, -)
112: (PUSH, __T110, -, -)
113: (MULT, __T112, __17, __4)
114: (ADDR, __T113, b, -)
115: (SUB, __T114, __T113, __T112)
116: (DEREF, __T111, __T114, -)
117: (ASSIGN, __T116, __T111, -)
118: (PUSH, __T116, -, -)
119: (MULT, __T118, __18, __4)
120: (ADDR, __T119, b, -)
121: (SUB, __T120, __T119, __T118)
122: (DEREF, __T117, __T120, -)
123: (ASSIGN, __T122, __T117, -)
124: (PUSH, __T122, -, -)
125: (MULT, __T124, __19, __4)
126: (ADDR, __T125, b, -)
127: (SUB, __T126, __T125, __T124)
128: (DEREF, __T123, __T126, -)
129: (ASSIGN, __T128, __T123, -)
130: (PUSH, __T128, -, -)
131: (PRECALL, foo, -, -)
132: (CALL, foo, -, -)
133: (POSTCALL, foo, -, -)
134: (ASSIGN, a, __RET_INT, -)
135: (MULT, __T130, __1, __4)
136: (ADDR, __T131, b, -)
137: (SUB, __T132, __T131, __T130)
138: (DEREF, __T129, __T132, -)
139: (MULT, __T134, __1, __4)
140: (ADDR, __T135, b, -)
141: (SUB, __T136, __T135, __T134)
142: (MULT, __T140, __1, __4)
143: (ADDR, __T141, b, -)
144: (SUB, __T142, __T141, __T140)
145: (DEREF, __T139, __T142, -)
146: (ADD, __T138, __T139, __1)
147: (ASSIGN, __T136, __T138, -)
148: (MULT, __T144, __T138, __4)
149: (ADD, __T145, a, __T144)
150: (SUB, __T146, __T145, __5)
151: (ASSIGN, c, __T146, -)
152: (INC, a, -, -)
153: (MULT, __T149, a, __4)
154: (ADDR, __T150, b, -)
155: (SUB, __T151, __T150, __T149)
156: (DEREF, __T148, __T151, -)
157: (MULT, __T153, a, __4)
158: (ADDR, __T154, b, -)
159: (SUB, __T155, __T154, __T153)
160: (MULT, __T159, a, __4)
161: (ADDR, __T160, b, -)
162: (SUB, __T161, __T160, __T159)
163: (DEREF, __T158, __T161, -)
164: (ADD, __T157, __T158, __1)
165: (ASSIGN, __T155, __T157, -)
166: (ASSIGN, a, __T157, -)
167: (NEG, __T163, a, -)
168: (ASSIGN, a, __T163, -)
169: (NEG, __T164, a, -)
170: (MULT, __T166, __T164, __4)
171: (ADDR, __T167, b, -)
172: (SUB, __T168, __T167, __T166)
173: (DEREF, __T165, __T168, -)
174: (PRINT, __T165, -, -)
175: (RETURN, __void, -, -)

Print hashtables (level-sibno) according to their hierarchy
(0-0) contains:
  FUNC_VOID main (0 params:)space needed: 96
  FUNC_INT foo (1 params: VAR_ARRAY_INT )space needed: 8
  (1-0) contains:
    VAR_ARRAY_INT bar (length: 0, offset: 80 or addr: 0), sym_length = 0 
  (1-1) contains:
    VAR_INT a (offset: -8 or addr: 0)
    VAR_ARRAY_INT b (length: 10, offset: -12 or addr: 0), sym_length = 10 
    VAR_INT c (offset: -92 or addr: 0)


===========================================================
op.c finished.
