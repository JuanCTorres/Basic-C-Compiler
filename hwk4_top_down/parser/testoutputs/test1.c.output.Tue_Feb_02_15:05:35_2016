Result of test done to parser.

test1.c BEGIN.
===========================================================



Print hashtables (level-sibno) according to their hierarchy
(0-0) contains:
  FUNC_INT main (0 params:)
  (1-0) contains:
    VAR_ARRAY_INT dd
    VAR_INT a
    VAR_INT b
    VAR_INT c
    VAR_INT d
    VAR_INT e
    VAR_INT f
    VAR_INT h
    VAR_INT i
    VAR_ARRAY_INT cc
    (2-0) contains:
      VAR_INT zz
    (2-1) contains:
      VAR_INT tt
      VAR_ARRAY_INT uu
    (2-2) contains:
      VAR_INT dsa
      VAR_INT asd
    (2-3) contains:
      VAR_INT x
    (2-4) contains:
      VAR_INT y


Error: Operation - not supported between INT_TYPE and ROOT
Error: Operation == not supported between ROOT and INT_TYPE
ROOT  Return type: INT_TYPE Node type: ROOT
  FUNC_DECLARATION  Return type: INT_TYPE Node type: FUNC_DECLARATIONmain (type: INT_TYPE) (0 params:)[scope (0,0) <- (0,0)] declared at line 1
    FORMAL_PARAMS  Return type: ROOT Node type: FORMAL_PARAMS
    SEQ  Return type: ROOT Node type: SEQ
      LOCAL_DECLARATIONS  Return type: ROOT Node type: LOCAL_DECLARATIONS
        ID  Return type: INT_TYPE Node type: IDa (type: INT_TYPE)[scope (1,0) <- (0,0)] declared at line 8
        ID  Return type: INT_TYPE Node type: IDb (type: INT_TYPE)[scope (1,0) <- (0,0)] declared at line 8
        ID  Return type: INT_TYPE Node type: IDc (type: INT_TYPE)[scope (1,0) <- (0,0)] declared at line 8
        ID  Return type: INT_TYPE Node type: IDd (type: INT_TYPE)[scope (1,0) <- (0,0)] declared at line 9
        ID  Return type: INT_TYPE Node type: IDe (type: INT_TYPE)[scope (1,0) <- (0,0)] declared at line 9
        ID  Return type: INT_TYPE Node type: IDf (type: INT_TYPE)[scope (1,0) <- (0,0)] declared at line 9
        =  Return type: INT_TYPE Node type: =
          ID  Return type: INT_TYPE Node type: IDh (type: INT_TYPE)[scope (1,0) <- (0,0)] declared at line 10
          INT_LITERAL  Return type: INT_TYPE Node type: INT_LITERAL2 (type: INT_TYPE)
        =  Return type: INT_TYPE Node type: =
          ID  Return type: INT_TYPE Node type: IDi (type: INT_TYPE)[scope (1,0) <- (0,0)] declared at line 10
          INT_LITERAL  Return type: INT_TYPE Node type: INT_LITERAL3 (type: INT_TYPE)
        ARRAY_TYPE  Return type: INT_TYPE Node type: ARRAY_TYPEcc (type: INT_TYPE)[scope (1,0) <- (0,0)] declared at line 11
          INT_LITERAL  Return type: INT_TYPE Node type: INT_LITERAL12 (type: INT_TYPE)
        ARRAY_TYPE  Return type: INT_TYPE Node type: ARRAY_TYPEdd (type: INT_TYPE)[scope (1,0) <- (0,0)] declared at line 11
          INT_LITERAL  Return type: INT_TYPE Node type: INT_LITERAL5 (type: INT_TYPE)
      STATEMENT_LIST  Return type: ROOT Node type: STATEMENT_LIST
        =  Return type: ROOT Node type: =
          ARRAY_TYPE  Return type: INT_TYPE Node type: ARRAY_TYPEcc (type: INT_TYPE)[scope (1,0) <- (0,0)] declared at line 11
            *  Return type: INT_TYPE Node type: *
              ID  Return type: INT_TYPE Node type: IDa (type: INT_TYPE)[scope (1,0) <- (0,0)] declared at line 8
              ID  Return type: INT_TYPE Node type: IDb (type: INT_TYPE)[scope (1,0) <- (0,0)] declared at line 8
          *  Return type: INT_TYPE Node type: *
            ID  Return type: INT_TYPE Node type: IDa (type: INT_TYPE)[scope (1,0) <- (0,0)] declared at line 8
            ID  Return type: INT_TYPE Node type: IDb (type: INT_TYPE)[scope (1,0) <- (0,0)] declared at line 8
        PRINT  Return type: ROOT Node type: PRINT
          STRING_LITERAL  Return type: ROOT Node type: STRING_LITERALtest basics!\n
        READ  Return type: INT_TYPE Node type: READ
          ID  Return type: INT_TYPE Node type: IDf (type: INT_TYPE)[scope (1,0) <- (0,0)] declared at line 9
        =  Return type: ROOT Node type: =
          ID  Return type: INT_TYPE Node type: IDc (type: INT_TYPE)[scope (1,0) <- (0,0)] declared at line 8
          -  Return type: INT_TYPE Node type: -
            INT_LITERAL  Return type: INT_TYPE Node type: INT_LITERAL1 (type: INT_TYPE)
            ID  Return type: INT_TYPE Node type: IDb (type: INT_TYPE)[scope (1,0) <- (0,0)] declared at line 8
        =  Return type: ROOT Node type: =
          ID  Return type: INT_TYPE Node type: IDc (type: INT_TYPE)[scope (1,0) <- (0,0)] declared at line 8
          +  Return type: INT_TYPE Node type: +
            ID  Return type: INT_TYPE Node type: IDb (type: INT_TYPE)[scope (1,0) <- (0,0)] declared at line 8
            INT_LITERAL  Return type: INT_TYPE Node type: INT_LITERAL1 (type: INT_TYPE)
        =  Return type: ROOT Node type: =
          ID  Return type: INT_TYPE Node type: IDc (type: INT_TYPE)[scope (1,0) <- (0,0)] declared at line 8
          -  Return type: INT_TYPE Node type: -
            INT_LITERAL  Return type: INT_TYPE Node type: INT_LITERAL5 (type: INT_TYPE)
            INT_LITERAL  Return type: INT_TYPE Node type: INT_LITERAL5 (type: INT_TYPE)
        =  Return type: ROOT Node type: =
          ID  Return type: INT_TYPE Node type: IDc (type: INT_TYPE)[scope (1,0) <- (0,0)] declared at line 8
          *  Return type: INT_TYPE Node type: *
            INT_LITERAL  Return type: INT_TYPE Node type: INT_LITERAL1 (type: INT_TYPE)
            INT_LITERAL  Return type: INT_TYPE Node type: INT_LITERAL-6 (type: INT_TYPE)
        =  Return type: ROOT Node type: =
          ID  Return type: INT_TYPE Node type: IDc (type: INT_TYPE)[scope (1,0) <- (0,0)] declared at line 8
          -  Return type: INT_TYPE Node type: -
            INT_LITERAL  Return type: INT_TYPE Node type: INT_LITERAL-2 (type: INT_TYPE)
            INT_LITERAL  Return type: INT_TYPE Node type: INT_LITERAL9 (type: INT_TYPE)
        =  Return type: ROOT Node type: =
          ID  Return type: INT_TYPE Node type: IDc (type: INT_TYPE)[scope (1,0) <- (0,0)] declared at line 8
          +  Return type: INT_TYPE Node type: +
            INT_LITERAL  Return type: INT_TYPE Node type: INT_LITERAL1 (type: INT_TYPE)
            INT_LITERAL  Return type: INT_TYPE Node type: INT_LITERAL7 (type: INT_TYPE)
        =  Return type: ROOT Node type: =
          ID  Return type: INT_TYPE Node type: IDc (type: INT_TYPE)[scope (1,0) <- (0,0)] declared at line 8
          -  Return type: INT_TYPE Node type: -
            INT_LITERAL  Return type: INT_TYPE Node type: INT_LITERAL1 (type: INT_TYPE)
            INT_LITERAL  Return type: INT_TYPE Node type: INT_LITERAL-10 (type: INT_TYPE)
        =  Return type: ROOT Node type: =
          ID  Return type: INT_TYPE Node type: IDc (type: INT_TYPE)[scope (1,0) <- (0,0)] declared at line 8
          -  Return type: INT_TYPE Node type: -
            INT_LITERAL  Return type: INT_TYPE Node type: INT_LITERAL22 (type: INT_TYPE)
            INT_LITERAL  Return type: INT_TYPE Node type: INT_LITERAL-88 (type: INT_TYPE)
        =  Return type: ROOT Node type: =
          ID  Return type: INT_TYPE Node type: IDc (type: INT_TYPE)[scope (1,0) <- (0,0)] declared at line 8
          *  Return type: INT_TYPE Node type: *
            ID  Return type: INT_TYPE Node type: IDa (type: INT_TYPE)[scope (1,0) <- (0,0)] declared at line 8
            -  Return type: INT_TYPE Node type: -
              ID  Return type: INT_TYPE Node type: IDb (type: INT_TYPE)[scope (1,0) <- (0,0)] declared at line 8
        =  Return type: ROOT Node type: =
          ID  Return type: INT_TYPE Node type: IDc (type: INT_TYPE)[scope (1,0) <- (0,0)] declared at line 8
          +  Return type: INT_TYPE Node type: +
            ID  Return type: INT_TYPE Node type: IDa (type: INT_TYPE)[scope (1,0) <- (0,0)] declared at line 8
            ID  Return type: INT_TYPE Node type: IDb (type: INT_TYPE)[scope (1,0) <- (0,0)] declared at line 8
        =  Return type: ROOT Node type: =
          ID  Return type: INT_TYPE Node type: IDc (type: INT_TYPE)[scope (1,0) <- (0,0)] declared at line 8
          -  Return type: INT_TYPE Node type: -
            ID  Return type: INT_TYPE Node type: IDa (type: INT_TYPE)[scope (1,0) <- (0,0)] declared at line 8
            ID  Return type: INT_TYPE Node type: IDb (type: INT_TYPE)[scope (1,0) <- (0,0)] declared at line 8
        =  Return type: ROOT Node type: =
          ID  Return type: INT_TYPE Node type: IDc (type: INT_TYPE)[scope (1,0) <- (0,0)] declared at line 8
          *  Return type: INT_TYPE Node type: *
            ID  Return type: INT_TYPE Node type: IDa (type: INT_TYPE)[scope (1,0) <- (0,0)] declared at line 8
            ID  Return type: INT_TYPE Node type: IDb (type: INT_TYPE)[scope (1,0) <- (0,0)] declared at line 8
        =  Return type: ROOT Node type: =
          ID  Return type: INT_TYPE Node type: IDc (type: INT_TYPE)[scope (1,0) <- (0,0)] declared at line 8
          /  Return type: INT_TYPE Node type: /
            ID  Return type: INT_TYPE Node type: IDa (type: INT_TYPE)[scope (1,0) <- (0,0)] declared at line 8
            ID  Return type: INT_TYPE Node type: IDb (type: INT_TYPE)[scope (1,0) <- (0,0)] declared at line 8
        =  Return type: ROOT Node type: =
          ID  Return type: INT_TYPE Node type: IDc (type: INT_TYPE)[scope (1,0) <- (0,0)] declared at line 8
          %  Return type: INT_TYPE Node type: %
            ID  Return type: INT_TYPE Node type: IDa (type: INT_TYPE)[scope (1,0) <- (0,0)] declared at line 8
            ID  Return type: INT_TYPE Node type: IDb (type: INT_TYPE)[scope (1,0) <- (0,0)] declared at line 8
        =  Return type: ROOT Node type: =
          ID  Return type: INT_TYPE Node type: IDc (type: INT_TYPE)[scope (1,0) <- (0,0)] declared at line 8
          <  Return type: INT_TYPE Node type: <
            ID  Return type: INT_TYPE Node type: IDa (type: INT_TYPE)[scope (1,0) <- (0,0)] declared at line 8
            ID  Return type: INT_TYPE Node type: IDb (type: INT_TYPE)[scope (1,0) <- (0,0)] declared at line 8
        =  Return type: ROOT Node type: =
          ID  Return type: INT_TYPE Node type: IDc (type: INT_TYPE)[scope (1,0) <- (0,0)] declared at line 8
          <=  Return type: INT_TYPE Node type: <=
            ID  Return type: INT_TYPE Node type: IDa (type: INT_TYPE)[scope (1,0) <- (0,0)] declared at line 8
            ID  Return type: INT_TYPE Node type: IDb (type: INT_TYPE)[scope (1,0) <- (0,0)] declared at line 8
        =  Return type: ROOT Node type: =
          ID  Return type: INT_TYPE Node type: IDc (type: INT_TYPE)[scope (1,0) <- (0,0)] declared at line 8
          >  Return type: INT_TYPE Node type: >
            ID  Return type: INT_TYPE Node type: IDa (type: INT_TYPE)[scope (1,0) <- (0,0)] declared at line 8
            ID  Return type: INT_TYPE Node type: IDb (type: INT_TYPE)[scope (1,0) <- (0,0)] declared at line 8
        =  Return type: ROOT Node type: =
          ID  Return type: INT_TYPE Node type: IDc (type: INT_TYPE)[scope (1,0) <- (0,0)] declared at line 8
          >=  Return type: INT_TYPE Node type: >=
            ID  Return type: INT_TYPE Node type: IDa (type: INT_TYPE)[scope (1,0) <- (0,0)] declared at line 8
            ID  Return type: INT_TYPE Node type: IDb (type: INT_TYPE)[scope (1,0) <- (0,0)] declared at line 8
        =  Return type: ROOT Node type: =
          ID  Return type: INT_TYPE Node type: IDc (type: INT_TYPE)[scope (1,0) <- (0,0)] declared at line 8
          ==  Return type: INT_TYPE Node type: ==
            ID  Return type: INT_TYPE Node type: IDa (type: INT_TYPE)[scope (1,0) <- (0,0)] declared at line 8
            ID  Return type: INT_TYPE Node type: IDb (type: INT_TYPE)[scope (1,0) <- (0,0)] declared at line 8
        =  Return type: ROOT Node type: =
          ID  Return type: INT_TYPE Node type: IDc (type: INT_TYPE)[scope (1,0) <- (0,0)] declared at line 8
          !=  Return type: INT_TYPE Node type: !=
            ID  Return type: INT_TYPE Node type: IDa (type: INT_TYPE)[scope (1,0) <- (0,0)] declared at line 8
            ID  Return type: INT_TYPE Node type: IDb (type: INT_TYPE)[scope (1,0) <- (0,0)] declared at line 8
        =  Return type: ROOT Node type: =
          ID  Return type: INT_TYPE Node type: IDc (type: INT_TYPE)[scope (1,0) <- (0,0)] declared at line 8
          &&  Return type: INT_TYPE Node type: &&
            ID  Return type: INT_TYPE Node type: IDa (type: INT_TYPE)[scope (1,0) <- (0,0)] declared at line 8
            ID  Return type: INT_TYPE Node type: IDb (type: INT_TYPE)[scope (1,0) <- (0,0)] declared at line 8
        =  Return type: ROOT Node type: =
          ID  Return type: INT_TYPE Node type: IDc (type: INT_TYPE)[scope (1,0) <- (0,0)] declared at line 8
          ||  Return type: INT_TYPE Node type: ||
            ID  Return type: INT_TYPE Node type: IDa (type: INT_TYPE)[scope (1,0) <- (0,0)] declared at line 8
            ID  Return type: INT_TYPE Node type: IDb (type: INT_TYPE)[scope (1,0) <- (0,0)] declared at line 8
        =  Return type: ROOT Node type: =
          ID  Return type: INT_TYPE Node type: IDc (type: INT_TYPE)[scope (1,0) <- (0,0)] declared at line 8
          !  Return type: INT_TYPE Node type: !
            ID  Return type: INT_TYPE Node type: IDb (type: INT_TYPE)[scope (1,0) <- (0,0)] declared at line 8
        =  Return type: ROOT Node type: =
          ID  Return type: INT_TYPE Node type: IDc (type: INT_TYPE)[scope (1,0) <- (0,0)] declared at line 8
          -  Return type: INT_TYPE Node type: -
            ID  Return type: INT_TYPE Node type: IDb (type: INT_TYPE)[scope (1,0) <- (0,0)] declared at line 8
        =  Return type: ROOT Node type: =
          ID  Return type: INT_TYPE Node type: IDc (type: INT_TYPE)[scope (1,0) <- (0,0)] declared at line 8
          ++  Return type: INT_TYPE Node type: ++
            ID  Return type: INT_TYPE Node type: IDb (type: INT_TYPE)[scope (1,0) <- (0,0)] declared at line 8
        =  Return type: ROOT Node type: =
          ID  Return type: INT_TYPE Node type: IDc (type: INT_TYPE)[scope (1,0) <- (0,0)] declared at line 8
          --  Return type: INT_TYPE Node type: --
            ID  Return type: INT_TYPE Node type: IDb (type: INT_TYPE)[scope (1,0) <- (0,0)] declared at line 8
        =  Return type: ROOT Node type: =
          ID  Return type: INT_TYPE Node type: IDc (type: INT_TYPE)[scope (1,0) <- (0,0)] declared at line 8
          %  Return type: INT_TYPE Node type: %
            ID  Return type: INT_TYPE Node type: IDa (type: INT_TYPE)[scope (1,0) <- (0,0)] declared at line 8
            INT_LITERAL  Return type: INT_TYPE Node type: INT_LITERAL5 (type: INT_TYPE)
        =  Return type: INT_TYPE Node type: =
          ID  Return type: INT_TYPE Node type: IDc (type: INT_TYPE)[scope (1,0) <- (0,0)] declared at line 8
          INT_LITERAL  Return type: INT_TYPE Node type: INT_LITERAL-23 (type: INT_TYPE)
        FOR  Return type: ROOT Node type: FOR
          =  Return type: INT_TYPE Node type: =
            ID  Return type: INT_TYPE Node type: IDa (type: INT_TYPE)[scope (1,0) <- (0,0)] declared at line 8
            INT_LITERAL  Return type: INT_TYPE Node type: INT_LITERAL100 (type: INT_TYPE)
          <  Return type: INT_TYPE Node type: <
            ID  Return type: INT_TYPE Node type: IDa (type: INT_TYPE)[scope (1,0) <- (0,0)] declared at line 8
            INT_LITERAL  Return type: INT_TYPE Node type: INT_LITERAL200 (type: INT_TYPE)
          ++  Return type: INT_TYPE Node type: ++
            ID  Return type: INT_TYPE Node type: IDa (type: INT_TYPE)[scope (1,0) <- (0,0)] declared at line 8
          SEQ  Return type: ROOT Node type: SEQ
            LOCAL_DECLARATIONS  Return type: INT_TYPE Node type: LOCAL_DECLARATIONS
              =  Return type: INT_TYPE Node type: =
                ID  Return type: INT_TYPE Node type: IDzz (type: INT_TYPE)[scope (2,0) <- (1,0)] declared at line 57
                INT_LITERAL  Return type: INT_TYPE Node type: INT_LITERAL-100 (type: INT_TYPE)
            STATEMENT_LIST  Return type: ROOT Node type: STATEMENT_LIST
              +  Return type: INT_TYPE Node type: +
                ID  Return type: INT_TYPE Node type: IDa (type: INT_TYPE)[scope (2,0) <- (1,0)] declared at line 8
                ID  Return type: INT_TYPE Node type: IDb (type: INT_TYPE)[scope (2,0) <- (1,0)] declared at line 8
              =  Return type: ROOT Node type: =
                ID  Return type: INT_TYPE Node type: IDc (type: INT_TYPE)[scope (2,0) <- (1,0)] declared at line 8
                +  Return type: INT_TYPE Node type: +
                  ID  Return type: INT_TYPE Node type: IDe (type: INT_TYPE)[scope (2,0) <- (1,0)] declared at line 9
                  ID  Return type: INT_TYPE Node type: IDf (type: INT_TYPE)[scope (2,0) <- (1,0)] declared at line 9
        WHILE  Return type: ROOT Node type: WHILE
          ==  Return type: ROOT Node type: ==
            -  Return type: INT_TYPE Node type: -
              /  Return type: INT_TYPE Node type: /
                ID  Return type: INT_TYPE Node type: IDa (type: INT_TYPE)[scope (1,0) <- (0,0)] declared at line 8
                INT_LITERAL  Return type: INT_TYPE Node type: INT_LITERAL5 (type: INT_TYPE)
              +  Return type: INT_TYPE Node type: +
                INT_LITERAL  Return type: INT_TYPE Node type: INT_LITERAL-3 (type: INT_TYPE)
                INT_LITERAL  Return type: INT_TYPE Node type: INT_LITERAL-8 (type: INT_TYPE)
            INT_LITERAL  Return type: INT_TYPE Node type: INT_LITERAL100 (type: INT_TYPE)
          SEQ  Return type: ROOT Node type: SEQ
            LOCAL_DECLARATIONS  Return type: ROOT Node type: LOCAL_DECLARATIONS
              ID  Return type: INT_TYPE Node type: IDtt (type: INT_TYPE)[scope (2,1) <- (1,0)] declared at line 63
              ARRAY_TYPE  Return type: INT_TYPE Node type: ARRAY_TYPEuu (type: INT_TYPE)[scope (2,1) <- (1,0)] declared at line 63
                INT_LITERAL  Return type: INT_TYPE Node type: INT_LITERAL10 (type: INT_TYPE)
            STATEMENT_LIST  Return type: INT_TYPE Node type: STATEMENT_LIST
              PRINT  Return type: INT_TYPE Node type: PRINT
                *  Return type: INT_TYPE Node type: *
                  INT_LITERAL  Return type: INT_TYPE Node type: INT_LITERAL12 (type: INT_TYPE)
                  INT_LITERAL  Return type: INT_TYPE Node type: INT_LITERAL21 (type: INT_TYPE)
        DO_WHILE  Return type: ROOT Node type: DO_WHILE
          INT_LITERAL  Return type: INT_TYPE Node type: INT_LITERAL1 (type: INT_TYPE)
          SEQ  Return type: ROOT Node type: SEQ
            LOCAL_DECLARATIONS  Return type: ROOT Node type: LOCAL_DECLARATIONS
              ID  Return type: INT_TYPE Node type: IDasd (type: INT_TYPE)[scope (2,2) <- (1,0)] declared at line 69
              ID  Return type: INT_TYPE Node type: IDdsa (type: INT_TYPE)[scope (2,2) <- (1,0)] declared at line 70
            STATEMENT_LIST  Return type: INT_TYPE Node type: STATEMENT_LIST
              =  Return type: INT_TYPE Node type: =
                ID  Return type: INT_TYPE Node type: IDasd (type: INT_TYPE)[scope (2,2) <- (1,0)] declared at line 69
                ID  Return type: INT_TYPE Node type: IDdsa (type: INT_TYPE)[scope (2,2) <- (1,0)] declared at line 70
        IF_ELSE_STMT  Return type: ROOT Node type: IF_ELSE_STMT
          ==  Return type: INT_TYPE Node type: ==
            *  Return type: INT_TYPE Node type: *
              ID  Return type: INT_TYPE Node type: IDa (type: INT_TYPE)[scope (1,0) <- (0,0)] declared at line 8
              ID  Return type: INT_TYPE Node type: IDb (type: INT_TYPE)[scope (1,0) <- (0,0)] declared at line 8
            ID  Return type: INT_TYPE Node type: IDc (type: INT_TYPE)[scope (1,0) <- (0,0)] declared at line 8
          SEQ  Return type: ROOT Node type: SEQ
            LOCAL_DECLARATIONS  Return type: INT_TYPE Node type: LOCAL_DECLARATIONS
              ID  Return type: INT_TYPE Node type: IDx (type: INT_TYPE)[scope (2,3) <- (1,0)] declared at line 75
            STATEMENT_LIST  Return type: ROOT Node type: STATEMENT_LIST
          SEQ  Return type: ROOT Node type: SEQ
            LOCAL_DECLARATIONS  Return type: INT_TYPE Node type: LOCAL_DECLARATIONS
              ID  Return type: INT_TYPE Node type: IDy (type: INT_TYPE)[scope (2,4) <- (1,0)] declared at line 78
            STATEMENT_LIST  Return type: ROOT Node type: STATEMENT_LIST
        RETURN  Return type: INT_TYPE Node type: RETURN[scope (1,0) <- (0,0)]return to main at line 1
          INT_LITERAL  Return type: INT_TYPE Node type: INT_LITERAL0 (type: INT_TYPE)


===========================================================
test1.c finished.
