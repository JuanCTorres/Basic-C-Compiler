Result of test done to parser.

test2.c BEGIN.
===========================================================


Error: Number of parameters to function my_func at line 45 does not match the declaration at line 1


Print hashtables (level-sibno) according to their hierarchy
(0-0) contains:
  FUNC_INT main (0 params:)
  FUNC_VOID your_func (0 params:)
  FUNC_INT my_func (2 params: VAR_INT  VAR_INT )
  (1-0) contains:
    VAR_INT b
    VAR_INT q
  (1-1) contains:
    VAR_INT ee
    VAR_INT gg
  (1-2) contains:
    VAR_INT a
    VAR_INT t
    VAR_INT u
    VAR_INT v
    VAR_INT w
    VAR_INT y
    VAR_INT ppp
    VAR_ARRAY_INT fff
    (2-0) contains:
      (3-0) contains:
        (4-0) contains:
      (3-1) contains:
    (2-1) contains:
      VAR_INT qwert
      (3-2) contains:


Error: Operation / not supported between ROOT and INT_TYPE
Error: Operation != not supported between ROOT and INT_TYPE
ROOT  Return type: ROOT Node type: ROOT
  FUNC_DECLARATION  Return type: INT_TYPE Node type: FUNC_DECLARATIONmy_func (type: INT_TYPE) (2 params: VAR_INT  VAR_INT )[scope (0,0) <- (0,0)] declared at line 1
    FORMAL_PARAMS  Return type: ROOT Node type: FORMAL_PARAMS
      ID  Return type: INT_TYPE Node type: IDq (type: INT_TYPE)[scope (1,0) <- (0,0)] declared at line 1
      ID  Return type: INT_TYPE Node type: IDb (type: INT_TYPE)[scope (1,0) <- (0,0)] declared at line 1
    SEQ  Return type: ROOT Node type: SEQ
      LOCAL_DECLARATIONS  Return type: ROOT Node type: LOCAL_DECLARATIONS
      STATEMENT_LIST  Return type: ROOT Node type: STATEMENT_LIST
        PRINT  Return type: INT_TYPE Node type: PRINT
          +  Return type: INT_TYPE Node type: +
            ID  Return type: INT_TYPE Node type: IDq (type: INT_TYPE)[scope (1,0) <- (0,0)] declared at line 1
            ID  Return type: INT_TYPE Node type: IDb (type: INT_TYPE)[scope (1,0) <- (0,0)] declared at line 1
        RETURN  Return type: INT_TYPE Node type: RETURN[scope (1,0) <- (0,0)]return to my_func at line 1
          INT_LITERAL  Return type: INT_TYPE Node type: INT_LITERAL12345 (type: INT_TYPE)
  FUNC_DECLARATION  Return type: VOID_TYPE Node type: FUNC_DECLARATIONyour_func (type: VOID_TYPE) (0 params:)[scope (0,0) <- (0,0)] declared at line 6
    FORMAL_PARAMS  Return type: ROOT Node type: FORMAL_PARAMS
    SEQ  Return type: ROOT Node type: SEQ
      LOCAL_DECLARATIONS  Return type: ROOT Node type: LOCAL_DECLARATIONS
        ID  Return type: INT_TYPE Node type: IDgg (type: INT_TYPE)[scope (1,1) <- (0,0)] declared at line 7
        ID  Return type: INT_TYPE Node type: IDee (type: INT_TYPE)[scope (1,1) <- (0,0)] declared at line 7
      STATEMENT_LIST  Return type: ROOT Node type: STATEMENT_LIST
        PRINT  Return type: ROOT Node type: PRINT
          STRING_LITERAL  Return type: ROOT Node type: STRING_LITERALLOL!\n
  FUNC_DECLARATION  Return type: INT_TYPE Node type: FUNC_DECLARATIONmain (type: INT_TYPE) (0 params:)[scope (0,0) <- (0,0)] declared at line 15
    FORMAL_PARAMS  Return type: ROOT Node type: FORMAL_PARAMS
    SEQ  Return type: ROOT Node type: SEQ
      LOCAL_DECLARATIONS  Return type: ROOT Node type: LOCAL_DECLARATIONS
        ID  Return type: INT_TYPE Node type: IDa (type: INT_TYPE)[scope (1,2) <- (0,0)] declared at line 17
        ID  Return type: INT_TYPE Node type: IDt (type: INT_TYPE)[scope (1,2) <- (0,0)] declared at line 17
        ID  Return type: INT_TYPE Node type: IDy (type: INT_TYPE)[scope (1,2) <- (0,0)] declared at line 17
        ID  Return type: INT_TYPE Node type: IDu (type: INT_TYPE)[scope (1,2) <- (0,0)] declared at line 17
        ID  Return type: INT_TYPE Node type: IDw (type: INT_TYPE)[scope (1,2) <- (0,0)] declared at line 17
        ID  Return type: INT_TYPE Node type: IDv (type: INT_TYPE)[scope (1,2) <- (0,0)] declared at line 17
        ID  Return type: INT_TYPE Node type: IDppp (type: INT_TYPE)[scope (1,2) <- (0,0)] declared at line 17
        ARRAY_TYPE  Return type: INT_TYPE Node type: ARRAY_TYPEfff (type: INT_TYPE)[scope (1,2) <- (0,0)] declared at line 18
          INT_LITERAL  Return type: INT_TYPE Node type: INT_LITERAL2 (type: INT_TYPE)
      STATEMENT_LIST  Return type: ROOT Node type: STATEMENT_LIST
        =  Return type: ROOT Node type: =
          ID  Return type: INT_TYPE Node type: IDa (type: INT_TYPE)[scope (1,2) <- (0,0)] declared at line 17
          =  Return type: INT_TYPE Node type: =
            ID  Return type: INT_TYPE Node type: IDt (type: INT_TYPE)[scope (1,2) <- (0,0)] declared at line 17
            =  Return type: INT_TYPE Node type: =
              ID  Return type: INT_TYPE Node type: IDy (type: INT_TYPE)[scope (1,2) <- (0,0)] declared at line 17
              -  Return type: INT_TYPE Node type: -
                /  Return type: INT_TYPE Node type: /
                  INT_LITERAL  Return type: INT_TYPE Node type: INT_LITERAL4 (type: INT_TYPE)
                  INT_LITERAL  Return type: INT_TYPE Node type: INT_LITERAL5 (type: INT_TYPE)
        IF_ELSE_STMT  Return type: ROOT Node type: IF_ELSE_STMT
          >  Return type: INT_TYPE Node type: >
            ID  Return type: INT_TYPE Node type: IDa (type: INT_TYPE)[scope (1,2) <- (0,0)] declared at line 17
            INT_LITERAL  Return type: INT_TYPE Node type: INT_LITERAL10 (type: INT_TYPE)
          SEQ  Return type: ROOT Node type: SEQ
            LOCAL_DECLARATIONS  Return type: ROOT Node type: LOCAL_DECLARATIONS
            STATEMENT_LIST  Return type: ROOT Node type: STATEMENT_LIST
              IF_ELSE_STMT  Return type: ROOT Node type: IF_ELSE_STMT
                INT_LITERAL  Return type: INT_TYPE Node type: INT_LITERAL1 (type: INT_TYPE)
                SEQ  Return type: ROOT Node type: SEQ
                  LOCAL_DECLARATIONS  Return type: ROOT Node type: LOCAL_DECLARATIONS
                  STATEMENT_LIST  Return type: ROOT Node type: STATEMENT_LIST
                    DO_WHILE  Return type: ROOT Node type: DO_WHILE
                      !=  Return type: INT_TYPE Node type: !=
                        /  Return type: INT_TYPE Node type: /
                          *  Return type: INT_TYPE Node type: *
                            ID  Return type: INT_TYPE Node type: IDa (type: INT_TYPE)[scope (3,0) <- (2,0)] declared at line 17
                            -  Return type: INT_TYPE Node type: -
                              ID  Return type: INT_TYPE Node type: IDt (type: INT_TYPE)[scope (3,0) <- (2,0)] declared at line 17
                              ID  Return type: INT_TYPE Node type: IDu (type: INT_TYPE)[scope (3,0) <- (2,0)] declared at line 17
                          ID  Return type: INT_TYPE Node type: IDw (type: INT_TYPE)[scope (3,0) <- (2,0)] declared at line 17
                        INT_LITERAL  Return type: INT_TYPE Node type: INT_LITERAL10 (type: INT_TYPE)
                      SEQ  Return type: ROOT Node type: SEQ
                        LOCAL_DECLARATIONS  Return type: ROOT Node type: LOCAL_DECLARATIONS
                        STATEMENT_LIST  Return type: ROOT Node type: STATEMENT_LIST
                SEQ  Return type: ROOT Node type: SEQ
                  LOCAL_DECLARATIONS  Return type: ROOT Node type: LOCAL_DECLARATIONS
                  STATEMENT_LIST  Return type: ROOT Node type: STATEMENT_LIST
                    PRINT  Return type: ROOT Node type: PRINT
                      STRING_LITERAL  Return type: ROOT Node type: STRING_LITERALnot\n
          SEQ  Return type: ROOT Node type: SEQ
            LOCAL_DECLARATIONS  Return type: INT_TYPE Node type: LOCAL_DECLARATIONS
              =  Return type: INT_TYPE Node type: =
                ID  Return type: INT_TYPE Node type: IDqwert (type: INT_TYPE)[scope (2,1) <- (1,2)] declared at line 37
                INT_LITERAL  Return type: INT_TYPE Node type: INT_LITERAL123 (type: INT_TYPE)
            STATEMENT_LIST  Return type: ROOT Node type: STATEMENT_LIST
              FOR  Return type: ROOT Node type: FOR
                =  Return type: INT_TYPE Node type: =
                  ID  Return type: INT_TYPE Node type: IDt (type: INT_TYPE)[scope (2,1) <- (1,2)] declared at line 17
                  INT_LITERAL  Return type: INT_TYPE Node type: INT_LITERAL0 (type: INT_TYPE)
                <  Return type: INT_TYPE Node type: <
                  ID  Return type: INT_TYPE Node type: IDt (type: INT_TYPE)[scope (2,1) <- (1,2)] declared at line 17
                  INT_LITERAL  Return type: INT_TYPE Node type: INT_LITERAL99 (type: INT_TYPE)
                ++  Return type: INT_TYPE Node type: ++
                  ID  Return type: INT_TYPE Node type: IDt (type: INT_TYPE)[scope (2,1) <- (1,2)] declared at line 17
                SEQ  Return type: ROOT Node type: SEQ
                  LOCAL_DECLARATIONS  Return type: ROOT Node type: LOCAL_DECLARATIONS
                  STATEMENT_LIST  Return type: ROOT Node type: STATEMENT_LIST
                    =  Return type: INT_TYPE Node type: =
                      ID  Return type: INT_TYPE Node type: IDa (type: INT_TYPE)[scope (3,2) <- (2,1)] declared at line 17
                      =  Return type: INT_TYPE Node type: =
                        ID  Return type: INT_TYPE Node type: IDy (type: INT_TYPE)[scope (3,2) <- (2,1)] declared at line 17
                        ID  Return type: INT_TYPE Node type: IDu (type: INT_TYPE)[scope (3,2) <- (2,1)] declared at line 17
                    =  Return type: INT_TYPE Node type: =
                      ID  Return type: INT_TYPE Node type: IDy (type: INT_TYPE)[scope (3,2) <- (2,1)] declared at line 17
                      =  Return type: INT_TYPE Node type: =
                        ID  Return type: INT_TYPE Node type: IDa (type: INT_TYPE)[scope (3,2) <- (2,1)] declared at line 17
                        ID  Return type: INT_TYPE Node type: IDw (type: INT_TYPE)[scope (3,2) <- (2,1)] declared at line 17
                    PRINT  Return type: ROOT Node type: PRINT
                      STRING_LITERAL  Return type: ROOT Node type: STRING_LITERALin for loop\n
        =  Return type: ROOT Node type: =
          ID  Return type: INT_TYPE Node type: IDw (type: INT_TYPE)[scope (1,2) <- (0,0)] declared at line 17
          CALL  Return type: INT_TYPE Node type: CALL
            FUNCTION  Return type: INT_TYPE Node type: FUNCTIONmy_func (type: INT_TYPE) (3 params: !=  !=  != )[scope (1,2) <- (0,0)] declared at line 1
              ID  Return type: INT_TYPE Node type: IDw (type: INT_TYPE)[scope (1,2) <- (0,0)] declared at line 17
              ID  Return type: INT_TYPE Node type: IDv (type: INT_TYPE)[scope (1,2) <- (0,0)] declared at line 17
              ID  Return type: INT_TYPE Node type: IDppp (type: INT_TYPE)[scope (1,2) <- (0,0)] declared at line 17
        CALL  Return type: VOID_TYPE Node type: CALL
          FUNCTION  Return type: VOID_TYPE Node type: FUNCTIONyour_func (type: VOID_TYPE) (0 params:)[scope (1,2) <- (0,0)] declared at line 6
        CALL  Return type: INT_TYPE Node type: CALL
          FUNCTION  Return type: INT_TYPE Node type: FUNCTIONmy_func (type: INT_TYPE) (2 params: !=  != )[scope (1,2) <- (0,0)] declared at line 1
            ARRAY_TYPE  Return type: INT_TYPE Node type: ARRAY_TYPEfff (type: INT_TYPE)[scope (1,2) <- (0,0)] declared at line 18
              INT_LITERAL  Return type: INT_TYPE Node type: INT_LITERAL1 (type: INT_TYPE)
            ID  Return type: INT_TYPE Node type: IDv (type: INT_TYPE)[scope (1,2) <- (0,0)] declared at line 17
        RETURN  Return type: INT_TYPE Node type: RETURN[scope (1,2) <- (0,0)]return to main at line 15
          INT_LITERAL  Return type: INT_TYPE Node type: INT_LITERAL0 (type: INT_TYPE)


===========================================================
test2.c finished.
