Result of test done to parser.

for.c BEGIN.
===========================================================






ROOT (uid: N0) inferred ret type: ROOT isDecl = 0, ignore = 0 
  FUNC_DECLARATION (uid: N1) inferred ret type: VOID_TYPE isDecl = 0, ignore = 0 main  (0 params:)[scope (0,0) <- (0,0)] declared at line 1  (type: VOID_TYPE) 
    FORMAL_PARAMS (uid: N2) inferred ret type: ROOT isDecl = 0, ignore = 0 
    SEQ (uid: N3) inferred ret type: ROOT isDecl = 0, ignore = 0 
      LOCAL_DECLARATIONS (uid: N4) inferred ret type: ROOT isDecl = 0, ignore = 0 
        ID (uid: N5) inferred ret type: INT_TYPE isDecl = 1, ignore = 0 a [scope (1,0) <- (0,0)] declared at line 2  (type: INT_TYPE) 
        ARRAY_TYPE (uid: N6) inferred ret type: INT_TYPE isDecl = 1, ignore = 0 b [scope (1,0) <- (0,0)] declared at line 3  (type: INT_TYPE) 
          INT_LITERAL (uid: N7) inferred ret type: INT_TYPE isDecl = 0, ignore = 0 10 (type: INT_TYPE) 
      STATEMENT_LIST (uid: N8) inferred ret type: ROOT isDecl = 0, ignore = 0 
        FOR (uid: N9) inferred ret type: ROOT isDecl = 0, ignore = 0 
          = (uid: N10) inferred ret type: INT_TYPE isDecl = 0, ignore = 0  (type: INT_TYPE) 
            ID (uid: N11) inferred ret type: INT_TYPE isDecl = 0, ignore = 0 a [scope (1,0) <- (0,0)] declared at line 2  (type: INT_TYPE) 
            INT_LITERAL (uid: N12) inferred ret type: INT_TYPE isDecl = 0, ignore = 0 0 (type: INT_TYPE) 
          < (uid: N13) inferred ret type: INT_TYPE isDecl = 0, ignore = 0  (type: INT_TYPE) 
            ID (uid: N14) inferred ret type: INT_TYPE isDecl = 0, ignore = 0 a [scope (1,0) <- (0,0)] declared at line 2  (type: INT_TYPE) 
            INT_LITERAL (uid: N15) inferred ret type: INT_TYPE isDecl = 0, ignore = 0 10 (type: INT_TYPE) 
          ++ (uid: N16) inferred ret type: INT_TYPE isDecl = 0, ignore = 0  (type: INT_TYPE) 
            ID (uid: N17) inferred ret type: INT_TYPE isDecl = 0, ignore = 0 a [scope (1,0) <- (0,0)] declared at line 2  (type: INT_TYPE) 
          SEQ (uid: N18) inferred ret type: ROOT isDecl = 0, ignore = 0 
            LOCAL_DECLARATIONS (uid: N19) inferred ret type: ROOT isDecl = 0, ignore = 0 
            STATEMENT_LIST (uid: N20) inferred ret type: ROOT isDecl = 0, ignore = 0 
              = (uid: N21) inferred ret type: INT_TYPE isDecl = 0, ignore = 0  (type: INT_TYPE) 
                ARRAY_TYPE (uid: N22) inferred ret type: INT_TYPE isDecl = 0, ignore = 0 b [scope (2,0) <- (1,0)] declared at line 3  (type: INT_TYPE) 
                  ID (uid: N23) inferred ret type: INT_TYPE isDecl = 0, ignore = 0 a [scope (2,0) <- (1,0)] declared at line 2  (type: INT_TYPE) 
                ID (uid: N24) inferred ret type: INT_TYPE isDecl = 0, ignore = 0 a [scope (2,0) <- (1,0)] declared at line 2  (type: INT_TYPE) 
        RETURN (uid: N0) inferred ret type: VOID_TYPE isDecl = 0, ignore = 0 [scope (0,0) <- (0,0)]return to main at line 1  (type: VOID_TYPE) 
          VOID_TYPE (uid: N0) inferred ret type: ROOT isDecl = 0, ignore = 0 
(0-0) contains:
  VAR_INT __void (offset: 0 or addr: 0)
  VAR_INT __10 (offset: 0 or addr: 0)
  VAR_INT __0 (offset: 0 or addr: 0)
  VAR_INT __1 (offset: 0 or addr: 0)
  VAR_INT __4 (offset: 0 or addr: 0)
There are 21 entries
0: (LABEL, main, -, -)
1: (ASSIGN, a, __0, -)
2: (LABEL, __L_9_FOR_BEGIN, -, -)
3: (ASSIGN, __T0, a, -)
4: (ASSIGN, __T1, __10, -)
5: (LT, __T2, __T0, __T1)
6: (ifTrue, __L_13_TRUE, __T2, -)
7: (ASSIGN, __T2, __0, -)
8: (GOTO, __L_13_DONE, -, -)
9: (LABEL, __L_13_TRUE, -, -)
10: (ASSIGN, __T2, __1, -)
11: (LABEL, __L_13_DONE, -, -)
12: (ifFalse, __L_9_FOR_END, __T2, -)
13: (MULT, __T3, a, __4)
14: (ADDR, __T4, b, -)
15: (SUB, __T5, __T4, __T3)
16: (ASSIGN, __T5, a, -)
17: (INC, a, -, -)
18: (GOTO, __L_9_FOR_BEGIN, -, -)
19: (LABEL, __L_9_FOR_END, -, -)
20: (RETURN, __void, -, -)

Print hashtables (level-sibno) according to their hierarchy
(0-0) contains:
  FUNC_VOID main (0 params:)space needed: 92
  (1-0) contains:
    VAR_INT a (offset: -8 or addr: 0)
    VAR_ARRAY_INT b (length: 10, offset: -12 or addr: 0), sym_length = 10 
    (2-0) contains:


===========================================================
for.c finished.
