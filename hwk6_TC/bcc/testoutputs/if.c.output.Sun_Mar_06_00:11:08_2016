Result of test done to parser.

if.c BEGIN.
===========================================================



ROOT (uid: N0) inferred ret type: ROOT
  FUNC_DECLARATION (uid: N1) inferred ret type: VOID_TYPEmain  (0 params:)[scope (0,0) <- (0,0)] declared at line 1 (type: VOID_TYPE) 
    FORMAL_PARAMS (uid: N2) inferred ret type: ROOT
    SEQ (uid: N3) inferred ret type: ROOT
      LOCAL_DECLARATIONS (uid: N4) inferred ret type: ROOT
        = (uid: N5) inferred ret type: INT_TYPE(type: INT_TYPE) 
          ID (uid: N6) inferred ret type: INT_TYPEa [scope (1,0) <- (0,0)] declared at line 2 (type: INT_TYPE) 
          INT_LITERAL (uid: N7) inferred ret type: INT_TYPE1(type: INT_TYPE) 
      STATEMENT_LIST (uid: N8) inferred ret type: ROOT
        IF_ELSE_STMT (uid: N9) inferred ret type: ROOT
          == (uid: N10) inferred ret type: INT_TYPE(type: INT_TYPE) 
            ID (uid: N11) inferred ret type: INT_TYPEa [scope (1,0) <- (0,0)] declared at line 2 (type: INT_TYPE) 
            ID (uid: N12) inferred ret type: INT_TYPEa [scope (1,0) <- (0,0)] declared at line 2 (type: INT_TYPE) 
          SEQ (uid: N13) inferred ret type: ROOT
            LOCAL_DECLARATIONS (uid: N14) inferred ret type: ROOT
              = (uid: N15) inferred ret type: INT_TYPE(type: INT_TYPE) 
                ID (uid: N16) inferred ret type: INT_TYPEb [scope (2,0) <- (1,0)] declared at line 4 (type: INT_TYPE) 
                INT_LITERAL (uid: N17) inferred ret type: INT_TYPE1(type: INT_TYPE) 
            STATEMENT_LIST (uid: N18) inferred ret type: ROOT
          SEQ (uid: N19) inferred ret type: ROOT
            LOCAL_DECLARATIONS (uid: N20) inferred ret type: ROOT
              = (uid: N21) inferred ret type: INT_TYPE(type: INT_TYPE) 
                ID (uid: N22) inferred ret type: INT_TYPEb [scope (2,1) <- (1,0)] declared at line 6 (type: INT_TYPE) 
                INT_LITERAL (uid: N23) inferred ret type: INT_TYPE0(type: INT_TYPE) 
            STATEMENT_LIST (uid: N24) inferred ret type: ROOT
        RETURN (uid: N0) inferred ret type: VOID_TYPE[scope (0,0) <- (0,0)]return to main at line 1 (type: VOID_TYPE) 
          VOID_TYPE (uid: N0) inferred ret type: ROOT



ROOT (uid: N0) inferred ret type: ROOT
  FUNC_DECLARATION (uid: N1) inferred ret type: VOID_TYPEmain  (0 params:)[scope (0,0) <- (0,0)] declared at line 1 (type: VOID_TYPE) 
    FORMAL_PARAMS (uid: N2) inferred ret type: ROOT
    SEQ (uid: N3) inferred ret type: ROOT
      LOCAL_DECLARATIONS (uid: N4) inferred ret type: ROOT
        = (uid: N5) inferred ret type: INT_TYPE(type: INT_TYPE) 
          ID (uid: N6) inferred ret type: INT_TYPEa [scope (1,0) <- (0,0)] declared at line 2 (type: INT_TYPE) 
          INT_LITERAL (uid: N7) inferred ret type: INT_TYPE1(type: INT_TYPE) 
      STATEMENT_LIST (uid: N8) inferred ret type: ROOT
        IF_ELSE_STMT (uid: N9) inferred ret type: ROOT
          == (uid: N10) inferred ret type: INT_TYPE(type: INT_TYPE) 
            ID (uid: N11) inferred ret type: INT_TYPEa [scope (1,0) <- (0,0)] declared at line 2 (type: INT_TYPE) 
            ID (uid: N12) inferred ret type: INT_TYPEa [scope (1,0) <- (0,0)] declared at line 2 (type: INT_TYPE) 
          SEQ (uid: N13) inferred ret type: ROOT
            LOCAL_DECLARATIONS (uid: N14) inferred ret type: ROOT
              = (uid: N15) inferred ret type: INT_TYPE(type: INT_TYPE) 
                ID (uid: N16) inferred ret type: INT_TYPEb [scope (2,0) <- (1,0)] declared at line 4 (type: INT_TYPE) 
                INT_LITERAL (uid: N17) inferred ret type: INT_TYPE1(type: INT_TYPE) 
            STATEMENT_LIST (uid: N18) inferred ret type: ROOT
          SEQ (uid: N19) inferred ret type: ROOT
            LOCAL_DECLARATIONS (uid: N20) inferred ret type: ROOT
              = (uid: N21) inferred ret type: INT_TYPE(type: INT_TYPE) 
                ID (uid: N22) inferred ret type: INT_TYPEb [scope (2,1) <- (1,0)] declared at line 6 (type: INT_TYPE) 
                INT_LITERAL (uid: N23) inferred ret type: INT_TYPE0(type: INT_TYPE) 
            STATEMENT_LIST (uid: N24) inferred ret type: ROOT
        RETURN (uid: N0) inferred ret type: VOID_TYPE[scope (0,0) <- (0,0)]return to main at line 1 (type: VOID_TYPE) 
     left temp is 1
0
     VOID_TYPE (uid: N0) inferred ret type: ROOT
(0-0) contains:
  VAR_INT __void (offset: 0 or addr: 0)
  VAR_INT __0 (offset: 0 or addr: 0)
  VAR_INT __1 (offset: 0 or addr: 0)
  VAR_INT __4 (offset: 0 or addr: 0)
There are 19 entries
0: (LABEL, main, -, -)
1: (ASSIGN, a, __1, -)
2: (ASSIGN, __T1, a, -)
3: (ASSIGN, __T2, a, -)
4: (EQ, __T3, __T1, __T2)
5: (ifTrue, __L_10_TRUE, __T3, -)
6: (ASSIGN, __T3, __0, -)
7: (GOTO, __L_10_DONE, -, -)
8: (LABEL, __L_10_TRUE, -, -)
9: (ASSIGN, __T3, __1, -)
10: (LABEL, __L_10_DONE, -, -)
11: (ASSIGN, __T0, __T3, -)
12: (ifFalse, __L_9_ELSE, __T0, -)
13: (ASSIGN, b, __1, -)
14: (GOTO, __L_9_FI, -, -)
15: (LABEL, __L_9_ELSE, -, -)
16: (ASSIGN, b, __0, -)
17: (LABEL, __L_9_FI, -, -)
18: (RETURN, __void, -, -)
a -12
b -16
b -20

Print hashtables (level-sibno) according to their hierarchy
(0-0) contains:
  FUNC_VOID main (0 params:)space needed: 20
  (1-0) contains:
    VAR_INT a (offset: -8 or addr: 0)
    (2-0) contains:
      VAR_INT b (offset: -12 or addr: 0)
    (2-1) contains:
      VAR_INT b (offset: -16 or addr: 0)


===========================================================
if.c finished.
