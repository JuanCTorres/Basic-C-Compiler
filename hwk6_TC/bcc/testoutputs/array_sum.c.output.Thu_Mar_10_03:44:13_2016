Result of test done to parser.

array_sum.c BEGIN.
===========================================================






ROOT (uid: N0) inferred ret type: ROOT isDecl = 0, ignore = 0 
  FUNC_DECLARATION (uid: N1) inferred ret type: INT_TYPE isDecl = 0, ignore = 0 sum  (1 params: VAR_ARRAY_INT )[scope (0,0) <- (0,0)] declared at line 1  (type: INT_TYPE) 
    FORMAL_PARAMS (uid: N2) inferred ret type: ROOT isDecl = 0, ignore = 0 
      ARRAY_TYPE (uid: N3) inferred ret type: ARRAY_TYPE isDecl = 1, ignore = 0 b [scope (1,0) <- (0,0)] declared at line 1  (type: ARRAY_TYPE) 
    SEQ (uid: N4) inferred ret type: ROOT isDecl = 0, ignore = 0 
      LOCAL_DECLARATIONS (uid: N5) inferred ret type: ROOT isDecl = 0, ignore = 0 
        ID (uid: N6) inferred ret type: INT_TYPE isDecl = 1, ignore = 0 c [scope (1,0) <- (0,0)] declared at line 2  (type: INT_TYPE) 
        ID (uid: N7) inferred ret type: INT_TYPE isDecl = 1, ignore = 0 d [scope (1,0) <- (0,0)] declared at line 2  (type: INT_TYPE) 
        ID (uid: N8) inferred ret type: INT_TYPE isDecl = 1, ignore = 0 e [scope (1,0) <- (0,0)] declared at line 2  (type: INT_TYPE) 
      STATEMENT_LIST (uid: N9) inferred ret type: ROOT isDecl = 0, ignore = 0 
        = (uid: N10) inferred ret type: INT_TYPE isDecl = 0, ignore = 0  (type: INT_TYPE) 
          ARRAY_TYPE (uid: N11) inferred ret type: INT_TYPE isDecl = 0, ignore = 0 b [scope (1,0) <- (0,0)] declared at line 1  (type: INT_TYPE) 
            INT_LITERAL (uid: N12) inferred ret type: INT_TYPE isDecl = 0, ignore = 0 4 (type: INT_TYPE) 
          INT_LITERAL (uid: N13) inferred ret type: INT_TYPE isDecl = 0, ignore = 0 5 (type: INT_TYPE) 
        = (uid: N14) inferred ret type: INT_TYPE isDecl = 0, ignore = 0  (type: INT_TYPE) 
          ARRAY_TYPE (uid: N15) inferred ret type: INT_TYPE isDecl = 0, ignore = 0 b [scope (1,0) <- (0,0)] declared at line 1  (type: INT_TYPE) 
            INT_LITERAL (uid: N16) inferred ret type: INT_TYPE isDecl = 0, ignore = 0 3 (type: INT_TYPE) 
          INT_LITERAL (uid: N17) inferred ret type: INT_TYPE isDecl = 0, ignore = 0 4 (type: INT_TYPE) 
        FOR (uid: N18) inferred ret type: ROOT isDecl = 0, ignore = 0 
          = (uid: N19) inferred ret type: INT_TYPE isDecl = 0, ignore = 0  (type: INT_TYPE) 
            ID (uid: N20) inferred ret type: INT_TYPE isDecl = 0, ignore = 0 d [scope (1,0) <- (0,0)] declared at line 2  (type: INT_TYPE) 
            INT_LITERAL (uid: N21) inferred ret type: INT_TYPE isDecl = 0, ignore = 0 0 (type: INT_TYPE) 
          < (uid: N22) inferred ret type: INT_TYPE isDecl = 0, ignore = 0  (type: INT_TYPE) 
            ID (uid: N23) inferred ret type: INT_TYPE isDecl = 0, ignore = 0 d [scope (1,0) <- (0,0)] declared at line 2  (type: INT_TYPE) 
            INT_LITERAL (uid: N24) inferred ret type: INT_TYPE isDecl = 0, ignore = 0 5 (type: INT_TYPE) 
          ++ (uid: N25) inferred ret type: INT_TYPE isDecl = 0, ignore = 0  (type: INT_TYPE) 
            ID (uid: N26) inferred ret type: INT_TYPE isDecl = 0, ignore = 0 d [scope (1,0) <- (0,0)] declared at line 2  (type: INT_TYPE) 
          SEQ (uid: N27) inferred ret type: ROOT isDecl = 0, ignore = 0 
            LOCAL_DECLARATIONS (uid: N28) inferred ret type: ROOT isDecl = 0, ignore = 0 
            STATEMENT_LIST (uid: N29) inferred ret type: ROOT isDecl = 0, ignore = 0 
              = (uid: N30) inferred ret type: INT_TYPE isDecl = 0, ignore = 0  (type: INT_TYPE) 
                ID (uid: N31) inferred ret type: INT_TYPE isDecl = 0, ignore = 0 c [scope (2,0) <- (1,0)] declared at line 2  (type: INT_TYPE) 
                + (uid: N32) inferred ret type: INT_TYPE isDecl = 0, ignore = 0  (type: INT_TYPE) 
                  ID (uid: N33) inferred ret type: INT_TYPE isDecl = 0, ignore = 0 c [scope (2,0) <- (1,0)] declared at line 2  (type: INT_TYPE) 
                  ARRAY_TYPE (uid: N34) inferred ret type: INT_TYPE isDecl = 0, ignore = 0 b [scope (2,0) <- (1,0)] declared at line 1  (type: INT_TYPE) 
                    ID (uid: N35) inferred ret type: INT_TYPE isDecl = 0, ignore = 0 d [scope (2,0) <- (1,0)] declared at line 2  (type: INT_TYPE) 
        RETURN (uid: N36) inferred ret type: ROOT isDecl = 0, ignore = 0 [scope (1,0) <- (0,0)]return to sum at line 1 
          ID (uid: N37) inferred ret type: INT_TYPE isDecl = 0, ignore = 0 c [scope (1,0) <- (0,0)] declared at line 2  (type: INT_TYPE) 
  FUNC_DECLARATION (uid: N38) inferred ret type: INT_TYPE isDecl = 0, ignore = 0 main  (0 params:)[scope (0,0) <- (0,0)] declared at line 14  (type: INT_TYPE) 
    FORMAL_PARAMS (uid: N39) inferred ret type: ROOT isDecl = 0, ignore = 0 
    SEQ (uid: N40) inferred ret type: ROOT isDecl = 0, ignore = 0 
      LOCAL_DECLARATIONS (uid: N41) inferred ret type: ROOT isDecl = 0, ignore = 0 
        ARRAY_TYPE (uid: N42) inferred ret type: INT_TYPE isDecl = 1, ignore = 0 i [scope (1,1) <- (0,0)] declared at line 15  (type: INT_TYPE) 
          INT_LITERAL (uid: N43) inferred ret type: INT_TYPE isDecl = 0, ignore = 0 5 (type: INT_TYPE) 
      STATEMENT_LIST (uid: N44) inferred ret type: ROOT isDecl = 0, ignore = 0 
        = (uid: N45) inferred ret type: INT_TYPE isDecl = 0, ignore = 0  (type: INT_TYPE) 
          ARRAY_TYPE (uid: N46) inferred ret type: INT_TYPE isDecl = 0, ignore = 0 i [scope (1,1) <- (0,0)] declared at line 15  (type: INT_TYPE) 
            INT_LITERAL (uid: N47) inferred ret type: INT_TYPE isDecl = 0, ignore = 0 0 (type: INT_TYPE) 
          INT_LITERAL (uid: N48) inferred ret type: INT_TYPE isDecl = 0, ignore = 0 1 (type: INT_TYPE) 
        = (uid: N49) inferred ret type: INT_TYPE isDecl = 0, ignore = 0  (type: INT_TYPE) 
          ARRAY_TYPE (uid: N50) inferred ret type: INT_TYPE isDecl = 0, ignore = 0 i [scope (1,1) <- (0,0)] declared at line 15  (type: INT_TYPE) 
            INT_LITERAL (uid: N51) inferred ret type: INT_TYPE isDecl = 0, ignore = 0 1 (type: INT_TYPE) 
          INT_LITERAL (uid: N52) inferred ret type: INT_TYPE isDecl = 0, ignore = 0 2 (type: INT_TYPE) 
        = (uid: N53) inferred ret type: INT_TYPE isDecl = 0, ignore = 0  (type: INT_TYPE) 
          ARRAY_TYPE (uid: N54) inferred ret type: INT_TYPE isDecl = 0, ignore = 0 i [scope (1,1) <- (0,0)] declared at line 15  (type: INT_TYPE) 
            INT_LITERAL (uid: N55) inferred ret type: INT_TYPE isDecl = 0, ignore = 0 2 (type: INT_TYPE) 
          INT_LITERAL (uid: N56) inferred ret type: INT_TYPE isDecl = 0, ignore = 0 3 (type: INT_TYPE) 
        PRINT (uid: N57) inferred ret type: ROOT isDecl = 0, ignore = 0 
          STRING_LITERAL (uid: N58) inferred ret type: ROOT isDecl = 0, ignore = 0 Passing array i as a parameter to my_f(). Should return 8 
        PRINT (uid: N59) inferred ret type: ROOT isDecl = 0, ignore = 0 
          CALL (uid: N60) inferred ret type: INT_TYPE isDecl = 0, ignore = 0  (type: INT_TYPE) 
            FUNCTION (uid: N61) inferred ret type: INT_TYPE isDecl = 0, ignore = 0 sum  (1 params: INT_TYPE)[scope (1,1) <- (0,0)] declared at line 1  (type: INT_TYPE) 
              ID (uid: N62) inferred ret type: ARRAY_TYPE isDecl = 0, ignore = 0 i  array length: 5 [scope (1,1) <- (0,0)] declared at line 15  (type: ARRAY_TYPE) 
        RETURN (uid: N63) inferred ret type: ROOT isDecl = 0, ignore = 0 [scope (1,1) <- (0,0)]return to main at line 14 
          INT_LITERAL (uid: N64) inferred ret type: INT_TYPE isDecl = 0, ignore = 0 0 (type: INT_TYPE) 
(0-0) contains:
  VAR_INT __0 (offset: 0 or addr: 0)
  VAR_INT __1 (offset: 0 or addr: 0)
  VAR_INT __2 (offset: 0 or addr: 0)
  VAR_INT __3 (offset: 0 or addr: 0)
  VAR_INT __4 (offset: 0 or addr: 0)
  VAR_INT __5 (offset: 0 or addr: 0)
  STRING Passing array i as a parameter to my_f(). Should return 8
There are 174 entries
0: (LABEL, sum, -, -)
1: (MULT, __T0, __4, __4)
2: (ADDR, __T1, b, -)
3: (SUB, __T2, __T1, __T0)
4: (ASSIGN, __T2, __5, -)
5: (MULT, __T4, __3, __4)
6: (ADDR, __T5, b, -)
7: (SUB, __T6, __T5, __T4)
8: (ASSIGN, __T6, __4, -)
9: (ASSIGN, d, __0, -)
10: (LABEL, __L_18_FOR_BEGIN, -, -)
11: (ASSIGN, __T8, d, -)
12: (ASSIGN, __T9, __5, -)
13: (LT, __T10, __T8, __T9)
14: (ifTrue, __L_22_TRUE, __T10, -)
15: (ASSIGN, __T10, __0, -)
16: (GOTO, __L_22_DONE, -, -)
17: (LABEL, __L_22_TRUE, -, -)
18: (ASSIGN, __T10, __1, -)
19: (LABEL, __L_22_DONE, -, -)
20: (ifFalse, __L_18_FOR_END, __T10, -)
21: (MULT, __T12, d, __4)
22: (ADDR, __T13, b, -)
23: (SUB, __T14, __T13, __T12)
24: (DEREF, __T11, __T14, -)
25: (MULT, __T17, d, __4)
26: (ADDR, __T18, b, -)
27: (SUB, __T19, __T18, __T17)
28: (DEREF, __T16, __T19, -)
29: (ADD, __T21, c, __T16)
30: (ASSIGN, c, __T21, -)
31: (INC, d, -, -)
32: (GOTO, __L_18_FOR_BEGIN, -, -)
33: (LABEL, __L_18_FOR_END, -, -)
34: (RETURN, c, -, -)
35: (LABEL, main, -, -)
36: (MULT, __T23, __0, __4)
37: (ADDR, __T24, i, -)
38: (SUB, __T25, __T24, __T23)
39: (ASSIGN, __T25, __1, -)
40: (MULT, __T27, __1, __4)
41: (ADDR, __T28, i, -)
42: (SUB, __T29, __T28, __T27)
43: (ASSIGN, __T29, __2, -)
44: (MULT, __T31, __2, __4)
45: (ADDR, __T32, i, -)
46: (SUB, __T33, __T32, __T31)
47: (ASSIGN, __T33, __3, -)
48: (PRINT, Passing array i as a parameter to my_f(). Should return 8, -, -)
49: (MULT, __T36, __0, __4)
50: (ADDR, __T37, i, -)
51: (SUB, __T38, __T37, __T36)
52: (DEREF, __T35, __T38, -)
53: (ASSIGN, __T40, __T35, -)
54: (PUSH, __T40, -, -)
55: (MULT, __T42, __1, __4)
56: (ADDR, __T43, i, -)
57: (SUB, __T44, __T43, __T42)
58: (DEREF, __T41, __T44, -)
59: (ASSIGN, __T46, __T41, -)
60: (PUSH, __T46, -, -)
61: (MULT, __T48, __2, __4)
62: (ADDR, __T49, i, -)
63: (SUB, __T50, __T49, __T48)
64: (DEREF, __T47, __T50, -)
65: (ASSIGN, __T52, __T47, -)
66: (PUSH, __T52, -, -)
67: (MULT, __T54, __3, __4)
68: (ADDR, __T55, i, -)
69: (SUB, __T56, __T55, __T54)
70: (DEREF, __T53, __T56, -)
71: (ASSIGN, __T58, __T53, -)
72: (PUSH, __T58, -, -)
73: (MULT, __T60, __4, __4)
74: (ADDR, __T61, i, -)
75: (SUB, __T62, __T61, __T60)
76: (DEREF, __T59, __T62, -)
77: (ASSIGN, __T64, __T59, -)
78: (PUSH, __T64, -, -)
79: (MULT, __T66, __5, __4)
80: (ADDR, __T67, i, -)
81: (SUB, __T68, __T67, __T66)
82: (DEREF, __T65, __T68, -)
83: (ASSIGN, __T70, __T65, -)
84: (PUSH, __T70, -, -)
85: (MULT, __T72, __6, __4)
86: (ADDR, __T73, i, -)
87: (SUB, __T74, __T73, __T72)
88: (DEREF, __T71, __T74, -)
89: (ASSIGN, __T76, __T71, -)
90: (PUSH, __T76, -, -)
91: (MULT, __T78, __7, __4)
92: (ADDR, __T79, i, -)
93: (SUB, __T80, __T79, __T78)
94: (DEREF, __T77, __T80, -)
95: (ASSIGN, __T82, __T77, -)
96: (PUSH, __T82, -, -)
97: (MULT, __T84, __8, __4)
98: (ADDR, __T85, i, -)
99: (SUB, __T86, __T85, __T84)
100: (DEREF, __T83, __T86, -)
101: (ASSIGN, __T88, __T83, -)
102: (PUSH, __T88, -, -)
103: (MULT, __T90, __9, __4)
104: (ADDR, __T91, i, -)
105: (SUB, __T92, __T91, __T90)
106: (DEREF, __T89, __T92, -)
107: (ASSIGN, __T94, __T89, -)
108: (PUSH, __T94, -, -)
109: (MULT, __T96, __10, __4)
110: (ADDR, __T97, i, -)
111: (SUB, __T98, __T97, __T96)
112: (DEREF, __T95, __T98, -)
113: (ASSIGN, __T100, __T95, -)
114: (PUSH, __T100, -, -)
115: (MULT, __T102, __11, __4)
116: (ADDR, __T103, i, -)
117: (SUB, __T104, __T103, __T102)
118: (DEREF, __T101, __T104, -)
119: (ASSIGN, __T106, __T101, -)
120: (PUSH, __T106, -, -)
121: (MULT, __T108, __12, __4)
122: (ADDR, __T109, i, -)
123: (SUB, __T110, __T109, __T108)
124: (DEREF, __T107, __T110, -)
125: (ASSIGN, __T112, __T107, -)
126: (PUSH, __T112, -, -)
127: (MULT, __T114, __13, __4)
128: (ADDR, __T115, i, -)
129: (SUB, __T116, __T115, __T114)
130: (DEREF, __T113, __T116, -)
131: (ASSIGN, __T118, __T113, -)
132: (PUSH, __T118, -, -)
133: (MULT, __T120, __14, __4)
134: (ADDR, __T121, i, -)
135: (SUB, __T122, __T121, __T120)
136: (DEREF, __T119, __T122, -)
137: (ASSIGN, __T124, __T119, -)
138: (PUSH, __T124, -, -)
139: (MULT, __T126, __15, __4)
140: (ADDR, __T127, i, -)
141: (SUB, __T128, __T127, __T126)
142: (DEREF, __T125, __T128, -)
143: (ASSIGN, __T130, __T125, -)
144: (PUSH, __T130, -, -)
145: (MULT, __T132, __16, __4)
146: (ADDR, __T133, i, -)
147: (SUB, __T134, __T133, __T132)
148: (DEREF, __T131, __T134, -)
149: (ASSIGN, __T136, __T131, -)
150: (PUSH, __T136, -, -)
151: (MULT, __T138, __17, __4)
152: (ADDR, __T139, i, -)
153: (SUB, __T140, __T139, __T138)
154: (DEREF, __T137, __T140, -)
155: (ASSIGN, __T142, __T137, -)
156: (PUSH, __T142, -, -)
157: (MULT, __T144, __18, __4)
158: (ADDR, __T145, i, -)
159: (SUB, __T146, __T145, __T144)
160: (DEREF, __T143, __T146, -)
161: (ASSIGN, __T148, __T143, -)
162: (PUSH, __T148, -, -)
163: (MULT, __T150, __19, __4)
164: (ADDR, __T151, i, -)
165: (SUB, __T152, __T151, __T150)
166: (DEREF, __T149, __T152, -)
167: (ASSIGN, __T154, __T149, -)
168: (PUSH, __T154, -, -)
169: (PRECALL, sum, -, -)
170: (CALL, sum, -, -)
171: (POSTCALL, sum, -, -)
172: (PRINT, __RET_INT, -, -)
173: (RETURN, __0, -, -)

Print hashtables (level-sibno) according to their hierarchy
(0-0) contains:
  FUNC_INT main (0 params:)space needed: 88
  FUNC_INT sum (1 params: VAR_ARRAY_INT )space needed: 20
  (1-0) contains:
    VAR_ARRAY_INT b (length: 0, offset: 80 or addr: 0), sym_length = 0 
    VAR_INT c (offset: -8 or addr: 0)
    VAR_INT d (offset: -12 or addr: 0)
    VAR_INT e (offset: -16 or addr: 0)
    (2-0) contains:
  (1-1) contains:
    VAR_ARRAY_INT i (length: 5, offset: -8 or addr: 0), sym_length = 5 


===========================================================
array_sum.c finished.
