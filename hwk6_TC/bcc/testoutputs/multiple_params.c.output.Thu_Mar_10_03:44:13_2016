Result of test done to parser.

multiple_params.c BEGIN.
===========================================================






ROOT (uid: N0) inferred ret type: ROOT isDecl = 0, ignore = 0 
  FUNC_DECLARATION (uid: N1) inferred ret type: INT_TYPE isDecl = 0, ignore = 0 func  (6 params: VAR_INT  VAR_INT  VAR_INT  VAR_INT  VAR_INT  VAR_ARRAY_INT )[scope (0,0) <- (0,0)] declared at line 1  (type: INT_TYPE) 
    FORMAL_PARAMS (uid: N2) inferred ret type: ROOT isDecl = 0, ignore = 0 
      ID (uid: N3) inferred ret type: INT_TYPE isDecl = 1, ignore = 0 a [scope (1,0) <- (0,0)] declared at line 1  (type: INT_TYPE) 
      ID (uid: N4) inferred ret type: INT_TYPE isDecl = 1, ignore = 0 zz [scope (1,0) <- (0,0)] declared at line 1  (type: INT_TYPE) 
      ID (uid: N5) inferred ret type: INT_TYPE isDecl = 1, ignore = 0 yy [scope (1,0) <- (0,0)] declared at line 1  (type: INT_TYPE) 
      ID (uid: N6) inferred ret type: INT_TYPE isDecl = 1, ignore = 0 hallelujah [scope (1,0) <- (0,0)] declared at line 1  (type: INT_TYPE) 
      ID (uid: N7) inferred ret type: INT_TYPE isDecl = 1, ignore = 0 something [scope (1,0) <- (0,0)] declared at line 1  (type: INT_TYPE) 
      ARRAY_TYPE (uid: N8) inferred ret type: ARRAY_TYPE isDecl = 1, ignore = 0 u [scope (1,0) <- (0,0)] declared at line 1  (type: ARRAY_TYPE) 
    SEQ (uid: N9) inferred ret type: ROOT isDecl = 0, ignore = 0 
      LOCAL_DECLARATIONS (uid: N10) inferred ret type: ROOT isDecl = 0, ignore = 0 
        = (uid: N11) inferred ret type: INT_TYPE isDecl = 0, ignore = 0  (type: INT_TYPE) 
          ID (uid: N12) inferred ret type: INT_TYPE isDecl = 1, ignore = 0 b [scope (1,0) <- (0,0)] declared at line 2  (type: INT_TYPE) 
          INT_LITERAL (uid: N13) inferred ret type: INT_TYPE isDecl = 0, ignore = 0 1 (type: INT_TYPE) 
        = (uid: N14) inferred ret type: INT_TYPE isDecl = 0, ignore = 0  (type: INT_TYPE) 
          ID (uid: N15) inferred ret type: INT_TYPE isDecl = 1, ignore = 0 c [scope (1,0) <- (0,0)] declared at line 3  (type: INT_TYPE) 
          INT_LITERAL (uid: N16) inferred ret type: INT_TYPE isDecl = 0, ignore = 0 2 (type: INT_TYPE) 
        = (uid: N17) inferred ret type: INT_TYPE isDecl = 0, ignore = 0  (type: INT_TYPE) 
          ID (uid: N18) inferred ret type: INT_TYPE isDecl = 1, ignore = 0 d [scope (1,0) <- (0,0)] declared at line 4  (type: INT_TYPE) 
          INT_LITERAL (uid: N19) inferred ret type: INT_TYPE isDecl = 0, ignore = 0 2 (type: INT_TYPE) 
        = (uid: N20) inferred ret type: INT_TYPE isDecl = 0, ignore = 0  (type: INT_TYPE) 
          ID (uid: N21) inferred ret type: INT_TYPE isDecl = 1, ignore = 0 e [scope (1,0) <- (0,0)] declared at line 5  (type: INT_TYPE) 
          INT_LITERAL (uid: N22) inferred ret type: INT_TYPE isDecl = 0, ignore = 0 2 (type: INT_TYPE) 
      STATEMENT_LIST (uid: N23) inferred ret type: ROOT isDecl = 0, ignore = 0 
        RETURN (uid: N24) inferred ret type: ROOT isDecl = 0, ignore = 0 [scope (1,0) <- (0,0)]return to func at line 1 
          + (uid: N25) inferred ret type: INT_TYPE isDecl = 0, ignore = 0  (type: INT_TYPE) 
            ARRAY_TYPE (uid: N26) inferred ret type: INT_TYPE isDecl = 0, ignore = 0 u [scope (1,0) <- (0,0)] declared at line 1  (type: INT_TYPE) 
              INT_LITERAL (uid: N27) inferred ret type: INT_TYPE isDecl = 0, ignore = 0 0 (type: INT_TYPE) 
            INT_LITERAL (uid: N28) inferred ret type: INT_TYPE isDecl = 0, ignore = 0 5 (type: INT_TYPE) 
  FUNC_DECLARATION (uid: N29) inferred ret type: INT_TYPE isDecl = 0, ignore = 0 main  (0 params:)[scope (0,0) <- (0,0)] declared at line 9  (type: INT_TYPE) 
    FORMAL_PARAMS (uid: N30) inferred ret type: ROOT isDecl = 0, ignore = 0 
    SEQ (uid: N31) inferred ret type: ROOT isDecl = 0, ignore = 0 
      LOCAL_DECLARATIONS (uid: N32) inferred ret type: ROOT isDecl = 0, ignore = 0 
        = (uid: N33) inferred ret type: INT_TYPE isDecl = 0, ignore = 0  (type: INT_TYPE) 
          ID (uid: N34) inferred ret type: INT_TYPE isDecl = 1, ignore = 0 a [scope (1,1) <- (0,0)] declared at line 10  (type: INT_TYPE) 
          INT_LITERAL (uid: N35) inferred ret type: INT_TYPE isDecl = 0, ignore = 0 -5 (type: INT_TYPE) 
        ARRAY_TYPE (uid: N36) inferred ret type: INT_TYPE isDecl = 1, ignore = 0 z [scope (1,1) <- (0,0)] declared at line 11  (type: INT_TYPE) 
          INT_LITERAL (uid: N37) inferred ret type: INT_TYPE isDecl = 0, ignore = 0 10 (type: INT_TYPE) 
        ID (uid: N38) inferred ret type: INT_TYPE isDecl = 1, ignore = 0 b [scope (1,1) <- (0,0)] declared at line 12  (type: INT_TYPE) 
      STATEMENT_LIST (uid: N39) inferred ret type: ROOT isDecl = 0, ignore = 0 
        = (uid: N40) inferred ret type: INT_TYPE isDecl = 0, ignore = 0  (type: INT_TYPE) 
          ARRAY_TYPE (uid: N41) inferred ret type: INT_TYPE isDecl = 0, ignore = 0 z [scope (1,1) <- (0,0)] declared at line 11  (type: INT_TYPE) 
            INT_LITERAL (uid: N42) inferred ret type: INT_TYPE isDecl = 0, ignore = 0 0 (type: INT_TYPE) 
          INT_LITERAL (uid: N43) inferred ret type: INT_TYPE isDecl = 0, ignore = 0 1 (type: INT_TYPE) 
        = (uid: N44) inferred ret type: INT_TYPE isDecl = 0, ignore = 0  (type: INT_TYPE) 
          ID (uid: N45) inferred ret type: INT_TYPE isDecl = 0, ignore = 0 b [scope (1,1) <- (0,0)] declared at line 12  (type: INT_TYPE) 
          CALL (uid: N46) inferred ret type: INT_TYPE isDecl = 0, ignore = 0  (type: INT_TYPE) 
            FUNCTION (uid: N47) inferred ret type: INT_TYPE isDecl = 0, ignore = 0 func  (6 params: INT_TYPE INT_TYPE INT_TYPE INT_TYPE INT_TYPE INT_TYPE)[scope (1,1) <- (0,0)] declared at line 1  (type: INT_TYPE) 
              ID (uid: N48) inferred ret type: INT_TYPE isDecl = 0, ignore = 0 a [scope (1,1) <- (0,0)] declared at line 10  (type: INT_TYPE) 
              INT_LITERAL (uid: N49) inferred ret type: INT_TYPE isDecl = 0, ignore = 0 4 (type: INT_TYPE) 
              INT_LITERAL (uid: N50) inferred ret type: INT_TYPE isDecl = 0, ignore = 0 3 (type: INT_TYPE) 
              INT_LITERAL (uid: N51) inferred ret type: INT_TYPE isDecl = 0, ignore = 0 2 (type: INT_TYPE) 
              INT_LITERAL (uid: N52) inferred ret type: INT_TYPE isDecl = 0, ignore = 0 -5 (type: INT_TYPE) 
              ID (uid: N53) inferred ret type: ARRAY_TYPE isDecl = 0, ignore = 0 z  array length: 10 [scope (1,1) <- (0,0)] declared at line 11  (type: ARRAY_TYPE) 
        PRINT (uid: N54) inferred ret type: ROOT isDecl = 0, ignore = 0 
          ID (uid: N55) inferred ret type: INT_TYPE isDecl = 0, ignore = 0 b [scope (1,1) <- (0,0)] declared at line 12  (type: INT_TYPE) 
        RETURN (uid: N56) inferred ret type: ROOT isDecl = 0, ignore = 0 [scope (1,1) <- (0,0)]return to main at line 9 
          INT_LITERAL (uid: N57) inferred ret type: INT_TYPE isDecl = 0, ignore = 0 0 (type: INT_TYPE) 
(0-0) contains:
  VAR_INT __-5 (offset: 0 or addr: 0)
  VAR_INT __10 (offset: 0 or addr: 0)
  VAR_INT __0 (offset: 0 or addr: 0)
  VAR_INT __1 (offset: 0 or addr: 0)
  VAR_INT __2 (offset: 0 or addr: 0)
  VAR_INT __3 (offset: 0 or addr: 0)
  VAR_INT __4 (offset: 0 or addr: 0)
  VAR_INT __5 (offset: 0 or addr: 0)
There are 157 entries
0: (LABEL, func, -, -)
1: (ASSIGN, b, __1, -)
2: (ASSIGN, c, __2, -)
3: (ASSIGN, d, __2, -)
4: (ASSIGN, e, __2, -)
5: (MULT, __T1, __0, __4)
6: (ADDR, __T2, u, -)
7: (SUB, __T3, __T2, __T1)
8: (DEREF, __T0, __T3, -)
9: (MULT, __T6, __0, __4)
10: (ADDR, __T7, u, -)
11: (SUB, __T8, __T7, __T6)
12: (DEREF, __T5, __T8, -)
13: (ADD, __T10, __T5, __5)
14: (RETURN, __T10, -, -)
15: (LABEL, main, -, -)
16: (ASSIGN, a, __-5, -)
17: (MULT, __T11, __0, __4)
18: (ADDR, __T12, z, -)
19: (SUB, __T13, __T12, __T11)
20: (ASSIGN, __T13, __1, -)
21: (ASSIGN, __T15, a, -)
22: (PUSH, __T15, -, -)
23: (ASSIGN, __T16, __4, -)
24: (PUSH, __T16, -, -)
25: (ASSIGN, __T17, __3, -)
26: (PUSH, __T17, -, -)
27: (ASSIGN, __T18, __2, -)
28: (PUSH, __T18, -, -)
29: (ASSIGN, __T19, __-5, -)
30: (PUSH, __T19, -, -)
31: (MULT, __T21, __0, __4)
32: (ADDR, __T22, z, -)
33: (SUB, __T23, __T22, __T21)
34: (DEREF, __T20, __T23, -)
35: (ASSIGN, __T25, __T20, -)
36: (PUSH, __T25, -, -)
37: (MULT, __T27, __1, __4)
38: (ADDR, __T28, z, -)
39: (SUB, __T29, __T28, __T27)
40: (DEREF, __T26, __T29, -)
41: (ASSIGN, __T31, __T26, -)
42: (PUSH, __T31, -, -)
43: (MULT, __T33, __2, __4)
44: (ADDR, __T34, z, -)
45: (SUB, __T35, __T34, __T33)
46: (DEREF, __T32, __T35, -)
47: (ASSIGN, __T37, __T32, -)
48: (PUSH, __T37, -, -)
49: (MULT, __T39, __3, __4)
50: (ADDR, __T40, z, -)
51: (SUB, __T41, __T40, __T39)
52: (DEREF, __T38, __T41, -)
53: (ASSIGN, __T43, __T38, -)
54: (PUSH, __T43, -, -)
55: (MULT, __T45, __4, __4)
56: (ADDR, __T46, z, -)
57: (SUB, __T47, __T46, __T45)
58: (DEREF, __T44, __T47, -)
59: (ASSIGN, __T49, __T44, -)
60: (PUSH, __T49, -, -)
61: (MULT, __T51, __5, __4)
62: (ADDR, __T52, z, -)
63: (SUB, __T53, __T52, __T51)
64: (DEREF, __T50, __T53, -)
65: (ASSIGN, __T55, __T50, -)
66: (PUSH, __T55, -, -)
67: (MULT, __T57, __6, __4)
68: (ADDR, __T58, z, -)
69: (SUB, __T59, __T58, __T57)
70: (DEREF, __T56, __T59, -)
71: (ASSIGN, __T61, __T56, -)
72: (PUSH, __T61, -, -)
73: (MULT, __T63, __7, __4)
74: (ADDR, __T64, z, -)
75: (SUB, __T65, __T64, __T63)
76: (DEREF, __T62, __T65, -)
77: (ASSIGN, __T67, __T62, -)
78: (PUSH, __T67, -, -)
79: (MULT, __T69, __8, __4)
80: (ADDR, __T70, z, -)
81: (SUB, __T71, __T70, __T69)
82: (DEREF, __T68, __T71, -)
83: (ASSIGN, __T73, __T68, -)
84: (PUSH, __T73, -, -)
85: (MULT, __T75, __9, __4)
86: (ADDR, __T76, z, -)
87: (SUB, __T77, __T76, __T75)
88: (DEREF, __T74, __T77, -)
89: (ASSIGN, __T79, __T74, -)
90: (PUSH, __T79, -, -)
91: (MULT, __T81, __10, __4)
92: (ADDR, __T82, z, -)
93: (SUB, __T83, __T82, __T81)
94: (DEREF, __T80, __T83, -)
95: (ASSIGN, __T85, __T80, -)
96: (PUSH, __T85, -, -)
97: (MULT, __T87, __11, __4)
98: (ADDR, __T88, z, -)
99: (SUB, __T89, __T88, __T87)
100: (DEREF, __T86, __T89, -)
101: (ASSIGN, __T91, __T86, -)
102: (PUSH, __T91, -, -)
103: (MULT, __T93, __12, __4)
104: (ADDR, __T94, z, -)
105: (SUB, __T95, __T94, __T93)
106: (DEREF, __T92, __T95, -)
107: (ASSIGN, __T97, __T92, -)
108: (PUSH, __T97, -, -)
109: (MULT, __T99, __13, __4)
110: (ADDR, __T100, z, -)
111: (SUB, __T101, __T100, __T99)
112: (DEREF, __T98, __T101, -)
113: (ASSIGN, __T103, __T98, -)
114: (PUSH, __T103, -, -)
115: (MULT, __T105, __14, __4)
116: (ADDR, __T106, z, -)
117: (SUB, __T107, __T106, __T105)
118: (DEREF, __T104, __T107, -)
119: (ASSIGN, __T109, __T104, -)
120: (PUSH, __T109, -, -)
121: (MULT, __T111, __15, __4)
122: (ADDR, __T112, z, -)
123: (SUB, __T113, __T112, __T111)
124: (DEREF, __T110, __T113, -)
125: (ASSIGN, __T115, __T110, -)
126: (PUSH, __T115, -, -)
127: (MULT, __T117, __16, __4)
128: (ADDR, __T118, z, -)
129: (SUB, __T119, __T118, __T117)
130: (DEREF, __T116, __T119, -)
131: (ASSIGN, __T121, __T116, -)
132: (PUSH, __T121, -, -)
133: (MULT, __T123, __17, __4)
134: (ADDR, __T124, z, -)
135: (SUB, __T125, __T124, __T123)
136: (DEREF, __T122, __T125, -)
137: (ASSIGN, __T127, __T122, -)
138: (PUSH, __T127, -, -)
139: (MULT, __T129, __18, __4)
140: (ADDR, __T130, z, -)
141: (SUB, __T131, __T130, __T129)
142: (DEREF, __T128, __T131, -)
143: (ASSIGN, __T133, __T128, -)
144: (PUSH, __T133, -, -)
145: (MULT, __T135, __19, __4)
146: (ADDR, __T136, z, -)
147: (SUB, __T137, __T136, __T135)
148: (DEREF, __T134, __T137, -)
149: (ASSIGN, __T139, __T134, -)
150: (PUSH, __T139, -, -)
151: (PRECALL, func, -, -)
152: (CALL, func, -, -)
153: (POSTCALL, func, -, -)
154: (ASSIGN, b, __RET_INT, -)
155: (PRINT, b, -, -)
156: (RETURN, __0, -, -)

Print hashtables (level-sibno) according to their hierarchy
(0-0) contains:
  FUNC_INT main (0 params:)space needed: 96
  FUNC_INT func (6 params: VAR_INT  VAR_INT  VAR_INT  VAR_INT  VAR_INT  VAR_ARRAY_INT )space needed: 24
  (1-0) contains:
    VAR_INT something (offset: 84 or addr: 0)
    VAR_INT a (offset: 100 or addr: 0)
    VAR_INT b (offset: -8 or addr: 0)
    VAR_INT c (offset: -12 or addr: 0)
    VAR_INT d (offset: -16 or addr: 0)
    VAR_INT e (offset: -20 or addr: 0)
    VAR_ARRAY_INT u (length: 0, offset: 80 or addr: 0), sym_length = 0 
    VAR_INT yy (offset: 92 or addr: 0)
    VAR_INT zz (offset: 96 or addr: 0)
    VAR_INT hallelujah (offset: 88 or addr: 0)
  (1-1) contains:
    VAR_INT a (offset: -8 or addr: 0)
    VAR_INT b (offset: -12 or addr: 0)
    VAR_ARRAY_INT z (length: 10, offset: -16 or addr: 0), sym_length = 10 


===========================================================
multiple_params.c finished.
