Result of test done to parser.

test11.c BEGIN.
===========================================================

0





ROOT (uid: N0) inferred ret type: ROOT isDecl = 0, ignore = 0 
  FUNC_DECLARATION (uid: N1) inferred ret type: INT_TYPE isDecl = 0, ignore = 0 main  (0 params:)[scope (0,0) <- (0,0)] declared at line 1  (type: INT_TYPE) 
    FORMAL_PARAMS (uid: N2) inferred ret type: ROOT isDecl = 0, ignore = 0 
    SEQ (uid: N3) inferred ret type: ROOT isDecl = 0, ignore = 0 
      LOCAL_DECLARATIONS (uid: N4) inferred ret type: ROOT isDecl = 0, ignore = 0 
        = (uid: N5) inferred ret type: INT_TYPE isDecl = 0, ignore = 0  (type: INT_TYPE) 
          ID (uid: N6) inferred ret type: INT_TYPE isDecl = 1, ignore = 0 a [scope (1,0) <- (0,0)] declared at line 3  (type: INT_TYPE) 
          INT_LITERAL (uid: N7) inferred ret type: INT_TYPE isDecl = 0, ignore = 0 5 (type: INT_TYPE) 
        = (uid: N8) inferred ret type: INT_TYPE isDecl = 0, ignore = 0  (type: INT_TYPE) 
          ID (uid: N9) inferred ret type: INT_TYPE isDecl = 1, ignore = 0 b [scope (1,0) <- (0,0)] declared at line 4  (type: INT_TYPE) 
          * (uid: N10) inferred ret type: INT_TYPE isDecl = 0, ignore = 0  (type: INT_TYPE) 
            ID (uid: N11) inferred ret type: INT_TYPE isDecl = 0, ignore = 0 a [scope (1,0) <- (0,0)] declared at line 3  (type: INT_TYPE) 
            INT_LITERAL (uid: N12) inferred ret type: INT_TYPE isDecl = 0, ignore = 0 2 (type: INT_TYPE) 
        ARRAY_TYPE (uid: N13) inferred ret type: INT_TYPE isDecl = 1, ignore = 0 c [scope (1,0) <- (0,0)] declared at line 5  (type: INT_TYPE) 
          INT_LITERAL (uid: N14) inferred ret type: INT_TYPE isDecl = 0, ignore = 0 10 (type: INT_TYPE) 
      STATEMENT_LIST (uid: N15) inferred ret type: ROOT isDecl = 0, ignore = 0 
        PRINT (uid: N16) inferred ret type: ROOT isDecl = 0, ignore = 0 
          ID (uid: N17) inferred ret type: INT_TYPE isDecl = 0, ignore = 0 a [scope (1,0) <- (0,0)] declared at line 3  (type: INT_TYPE) 
        PRINT (uid: N18) inferred ret type: ROOT isDecl = 0, ignore = 0 
          ID (uid: N19) inferred ret type: INT_TYPE isDecl = 0, ignore = 0 b [scope (1,0) <- (0,0)] declared at line 4  (type: INT_TYPE) 
        IF_ELSE_STMT (uid: N20) inferred ret type: ROOT isDecl = 0, ignore = 0 
          == (uid: N21) inferred ret type: INT_TYPE isDecl = 0, ignore = 0  (type: INT_TYPE) 
            ID (uid: N22) inferred ret type: INT_TYPE isDecl = 0, ignore = 0 a [scope (1,0) <- (0,0)] declared at line 3  (type: INT_TYPE) 
            ID (uid: N23) inferred ret type: INT_TYPE isDecl = 0, ignore = 0 b [scope (1,0) <- (0,0)] declared at line 4  (type: INT_TYPE) 
          SEQ (uid: N24) inferred ret type: ROOT isDecl = 0, ignore = 0 
            LOCAL_DECLARATIONS (uid: N25) inferred ret type: ROOT isDecl = 0, ignore = 0 
            STATEMENT_LIST (uid: N26) inferred ret type: ROOT isDecl = 0, ignore = 0 
              PRINT (uid: N27) inferred ret type: ROOT isDecl = 0, ignore = 0 
                STRING_LITERAL (uid: N28) inferred ret type: ROOT isDecl = 0, ignore = 0 in if TRUE 
          SEQ (uid: N29) inferred ret type: ROOT isDecl = 0, ignore = 0 
            LOCAL_DECLARATIONS (uid: N30) inferred ret type: ROOT isDecl = 0, ignore = 0 
            STATEMENT_LIST (uid: N31) inferred ret type: ROOT isDecl = 0, ignore = 0 
              PRINT (uid: N32) inferred ret type: ROOT isDecl = 0, ignore = 0 
                STRING_LITERAL (uid: N33) inferred ret type: ROOT isDecl = 0, ignore = 0 in if FALSE 
        RETURN (uid: N34) inferred ret type: ROOT isDecl = 0, ignore = 0 [scope (1,0) <- (0,0)]return to main at line 1 
          INT_LITERAL (uid: N35) inferred ret type: INT_TYPE isDecl = 0, ignore = 0 0 (type: INT_TYPE) 
(0-0) contains:
  STRING in if TRUE
  STRING in if FALSE
  VAR_INT __10 (offset: 0 or addr: 0)
  VAR_INT __0 (offset: 0 or addr: 0)
  VAR_INT __1 (offset: 0 or addr: 0)
  VAR_INT __2 (offset: 0 or addr: 0)
  VAR_INT __4 (offset: 0 or addr: 0)
  VAR_INT __5 (offset: 0 or addr: 0)
There are 23 entries
0: (LABEL, main, -, -)
1: (ASSIGN, a, __5, -)
2: (MULT, __T0, a, __2)
3: (ASSIGN, b, __T0, -)
4: (PRINT, a, -, -)
5: (PRINT, b, -, -)
6: (ASSIGN, __T2, a, -)
7: (ASSIGN, __T3, b, -)
8: (EQ, __T4, __T2, __T3)
9: (ifTrue, __L_21_TRUE, __T4, -)
10: (ASSIGN, __T4, __0, -)
11: (GOTO, __L_21_DONE, -, -)
12: (LABEL, __L_21_TRUE, -, -)
13: (ASSIGN, __T4, __1, -)
14: (LABEL, __L_21_DONE, -, -)
15: (ASSIGN, __T1, __T4, -)
16: (ifFalse, __L_20_ELSE, __T1, -)
17: (PRINT, in if TRUE, -, -)
18: (GOTO, __L_20_FI, -, -)
19: (LABEL, __L_20_ELSE, -, -)
20: (PRINT, in if FALSE, -, -)
21: (LABEL, __L_20_FI, -, -)
22: (RETURN, __0, -, -)

Print hashtables (level-sibno) according to their hierarchy
(0-0) contains:
  FUNC_INT main (0 params:)space needed: 96
  (1-0) contains:
    VAR_INT a (offset: -8 or addr: 0)
    VAR_INT b (offset: -12 or addr: 0)
    VAR_ARRAY_INT c (length: 10, offset: -16 or addr: 0), sym_length = 10 
    (2-0) contains:
    (2-1) contains:


===========================================================
test11.c finished.
