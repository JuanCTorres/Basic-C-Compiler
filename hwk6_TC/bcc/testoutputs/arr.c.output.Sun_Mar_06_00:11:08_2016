Result of test done to parser.

arr.c BEGIN.
===========================================================



Found one

Found one

Found one

ROOT (uid: N0) inferred ret type: ROOT
  ARRAY_TYPE (uid: N1) inferred ret type: INT_TYPEglob [scope (0,0) <- (0,0)] declared at line 1 (type: INT_TYPE) 
    INT_LITERAL (uid: N2) inferred ret type: INT_TYPE3(type: INT_TYPE) 
  FUNC_DECLARATION (uid: N3) inferred ret type: VOID_TYPEfun2  (1 params: VAR_ARRAY_INT )[scope (0,0) <- (0,0)] declared at line 3 (type: VOID_TYPE) 
    FORMAL_PARAMS (uid: N4) inferred ret type: ROOT
      ARRAY_TYPE (uid: N5) inferred ret type: ARRAY_TYPEa [scope (1,0) <- (0,0)] declared at line 3 (type: ARRAY_TYPE) 
    SEQ (uid: N6) inferred ret type: ROOT
      LOCAL_DECLARATIONS (uid: N7) inferred ret type: ROOT
      STATEMENT_LIST (uid: N8) inferred ret type: ROOT
        = (uid: N9) inferred ret type: INT_TYPE(type: INT_TYPE) 
          ARRAY_TYPE (uid: N10) inferred ret type: INT_TYPEa [scope (1,0) <- (0,0)] declared at line 3 (type: INT_TYPE) 
            INT_LITERAL (uid: N11) inferred ret type: INT_TYPE1(type: INT_TYPE) 
          INT_LITERAL (uid: N12) inferred ret type: INT_TYPE17(type: INT_TYPE) 
        RETURN (uid: N0) inferred ret type: VOID_TYPE[scope (0,0) <- (0,0)]return to fun2 at line 3 (type: VOID_TYPE) 
          VOID_TYPE (uid: N0) inferred ret type: ROOT
  FUNC_DECLARATION (uid: N13) inferred ret type: INT_TYPEfun1  (1 params: VAR_ARRAY_INT )[scope (0,0) <- (0,0)] declared at line 9 (type: INT_TYPE) 
    FORMAL_PARAMS (uid: N14) inferred ret type: ROOT
      ARRAY_TYPE (uid: N15) inferred ret type: ARRAY_TYPEa [scope (1,1) <- (0,0)] declared at line 9 (type: ARRAY_TYPE) 
    SEQ (uid: N16) inferred ret type: ROOT
      LOCAL_DECLARATIONS (uid: N17) inferred ret type: ROOT
        ARRAY_TYPE (uid: N18) inferred ret type: INT_TYPEc [scope (1,1) <- (0,0)] declared at line 11 (type: INT_TYPE) 
          INT_LITERAL (uid: N19) inferred ret type: INT_TYPE3(type: INT_TYPE) 
      STATEMENT_LIST (uid: N20) inferred ret type: ROOT
        = (uid: N21) inferred ret type: INT_TYPE(type: INT_TYPE) 
          ARRAY_TYPE (uid: N22) inferred ret type: INT_TYPEc [scope (1,1) <- (0,0)] declared at line 11 (type: INT_TYPE) 
            INT_LITERAL (uid: N23) inferred ret type: INT_TYPE1(type: INT_TYPE) 
          INT_LITERAL (uid: N24) inferred ret type: INT_TYPE0(type: INT_TYPE) 
        CALL (uid: N25) inferred ret type: VOID_TYPE(type: VOID_TYPE) 
          FUNCTION (uid: N26) inferred ret type: VOID_TYPEfun2  (1 params: VOID_TYPE)[scope (1,1) <- (0,0)] declared at line 3 (type: VOID_TYPE) 
            ID (uid: N27) inferred ret type: ARRAY_TYPEc [scope (1,1) <- (0,0)] declared at line 11 (type: ARRAY_TYPE) 
        PRINT (uid: N28) inferred ret type: ROOT
          ARRAY_TYPE (uid: N29) inferred ret type: INT_TYPEc [scope (1,1) <- (0,0)] declared at line 11 (type: INT_TYPE) 
            INT_LITERAL (uid: N30) inferred ret type: INT_TYPE1(type: INT_TYPE) 
        = (uid: N31) inferred ret type: INT_TYPE(type: INT_TYPE) 
          ARRAY_TYPE (uid: N32) inferred ret type: INT_TYPEa [scope (1,1) <- (0,0)] declared at line 9 (type: INT_TYPE) 
            INT_LITERAL (uid: N33) inferred ret type: INT_TYPE2(type: INT_TYPE) 
          INT_LITERAL (uid: N34) inferred ret type: INT_TYPE23(type: INT_TYPE) 
        RETURN (uid: N35) inferred ret type: ROOT[scope (1,1) <- (0,0)]return to fun1 at line 9 
          INT_LITERAL (uid: N36) inferred ret type: INT_TYPE32(type: INT_TYPE) 
  FUNC_DECLARATION (uid: N37) inferred ret type: INT_TYPEmain  (0 params:)[scope (0,0) <- (0,0)] declared at line 27 (type: INT_TYPE) 
    FORMAL_PARAMS (uid: N38) inferred ret type: ROOT
    SEQ (uid: N39) inferred ret type: ROOT
      LOCAL_DECLARATIONS (uid: N40) inferred ret type: ROOT
        ARRAY_TYPE (uid: N41) inferred ret type: INT_TYPEla [scope (1,2) <- (0,0)] declared at line 29 (type: INT_TYPE) 
          INT_LITERAL (uid: N42) inferred ret type: INT_TYPE3(type: INT_TYPE) 
        ID (uid: N43) inferred ret type: INT_TYPEy [scope (1,2) <- (0,0)] declared at line 30 (type: INT_TYPE) 
      STATEMENT_LIST (uid: N44) inferred ret type: ROOT
        = (uid: N45) inferred ret type: INT_TYPE(type: INT_TYPE) 
          ID (uid: N46) inferred ret type: INT_TYPEy [scope (1,2) <- (0,0)] declared at line 30 (type: INT_TYPE) 
          CALL (uid: N47) inferred ret type: INT_TYPE(type: INT_TYPE) 
            FUNCTION (uid: N48) inferred ret type: INT_TYPEfun1  (1 params: INT_TYPE)[scope (1,2) <- (0,0)] declared at line 9 (type: INT_TYPE) 
              ID (uid: N49) inferred ret type: ARRAY_TYPEglob [scope (1,2) <- (0,0)] declared at line 34 (type: ARRAY_TYPE) 
        PRINT (uid: N50) inferred ret type: ROOT
          ARRAY_TYPE (uid: N51) inferred ret type: INT_TYPEglob [scope (1,2) <- (0,0)] declared at line 34 (type: INT_TYPE) 
            INT_LITERAL (uid: N52) inferred ret type: INT_TYPE2(type: INT_TYPE) 
        = (uid: N53) inferred ret type: INT_TYPE(type: INT_TYPE) 
          ID (uid: N54) inferred ret type: INT_TYPEy [scope (1,2) <- (0,0)] declared at line 30 (type: INT_TYPE) 
          CALL (uid: N55) inferred ret type: INT_TYPE(type: INT_TYPE) 
            FUNCTION (uid: N56) inferred ret type: INT_TYPEfun1  (1 params: INT_TYPE)[scope (1,2) <- (0,0)] declared at line 9 (type: INT_TYPE) 
              ID (uid: N57) inferred ret type: ARRAY_TYPEla [scope (1,2) <- (0,0)] declared at line 29 (type: ARRAY_TYPE) 
        PRINT (uid: N58) inferred ret type: ROOT
          ARRAY_TYPE (uid: N59) inferred ret type: INT_TYPEla [scope (1,2) <- (0,0)] declared at line 29 (type: INT_TYPE) 
            INT_LITERAL (uid: N60) inferred ret type: INT_TYPE2(type: INT_TYPE) 
        RETURN (uid: N61) inferred ret type: ROOT[scope (1,2) <- (0,0)]return to main at line 27 
          INT_LITERAL (uid: N62) inferred ret type: INT_TYPE123(type: INT_TYPE) 



ROOT (uid: N0) inferred ret type: ROOT
  ARRAY_TYPE (uid: N1) inferred ret type: INT_TYPEglob [scope (0,0) <- (0,0)] declared at line 1 (type: INT_TYPE) 
    INT_LITERAL (uid: N2) inferred ret type: INT_TYPE3(type: INT_TYPE) 
  FUNC_DECLARATION (uid: N3) inferred ret type: VOID_TYPEfun2  (1 params: VAR_ARRAY_INT )[scope (0,0) <- (0,0)] declared at line 3 (type: VOID_TYPE) 
    FORMAL_PARAMS (uid: N4) inferred ret type: ROOT
      ARRAY_TYPE (uid: N5) inferred ret type: ARRAY_TYPEa [scope (1,0) <- (0,0)] declared at line 3 (type: ARRAY_TYPE) 
    SEQ (uid: N6) inferred ret type: ROOT
      LOCAL_DECLARATIONS (uid: N7) inferred ret type: ROOT
      STATEMENT_LIST (uid: N8) inferred ret type: ROOT
        = (uid: N9) inferred ret type: INT_TYPE(type: INT_TYPE) 
          ARRAY_TYPE (uid: N10) inferred ret type: INT_TYPEa [scope (1,0) <- (0,0)] declared at line 3 (type: INT_TYPE) 
            INT_LITERAL (uid: N11) inferred ret type: INT_TYPE1(type: INT_TYPE) 
          INT_LITERAL (uid: N12) inferred ret type: INT_TYPE17(type: INT_TYPE) 
        RETURN (uid: N0) inferred ret type: VOID_TYPE[scope (0,0) <- (0,0)]return to fun2 at line 3 (type: VOID_TYPE) 
          VOID_TYPE (uid: N0) inferred ret type: ROOT
  FUNC_DECLARATION (uid: N13) inferred ret type: INT_TYPEfun1  (1 params: VAR_ARRAY_INT )[scope (0,0) <- (0,0)] declared at line 9 (type: INT_TYPE) 
    FORMAL_PARAMS (uid: N14) inferred ret type: ROOT
      ARRAY_TYPE (uid: N15) inferred ret type: ARRAY_TYPEa [scope (1,1) <- (0,0)] declared at line 9 (type: ARRAY_TYPE) 
    SEQ (uid: N16) inferred ret type: ROOT
      LOCAL_DECLARATIONS (uid: N17) inferred ret type: ROOT
        ARRAY_TYPE (uid: N18) inferred ret type: INT_TYPEc [scope (1,1) <- (0,0)] declared at line 11 (type: INT_TYPE) 
          INT_LITERAL (uid: N19) inferred ret type: INT_TYPE3(type: INT_TYPE) 
      STATEMENT_LIST (uid: N20) inferred ret type: ROOT
        = (uid: N21) inferred ret type: INT_TYPE(type: INT_TYPE) 
          ARRAY_TYPE (uid: N22) inferred ret type: INT_TYPEc [scope (1,1) <- (0,0)] declared at line 11 (type: INT_TYPE) 
            INT_LITERAL (uid: N23) inferred ret type: INT_TYPE1(type: INT_TYPE) 
          INT_LITERAL (uid: N24) inferred ret type: INT_TYPE0(type: INT_TYPE) 
        CALL (uid: N25) inferred ret type: VOID_TYPE(type: VOID_TYPE) 
          FUNCTION (uid: N26) inferred ret type: VOID_TYPEfun2  (1 params: VOID_TYPE)[scope (1,1) <- (0,0)] declared at line 3 (type: VOID_TYPE) 
            ID (uid: N27) inferred ret type: ARRAY_TYPEc [scope (1,1) <- (0,0)] declared at line 11 (type: ARRAY_TYPE) 
        PRINT (uid: N28) inferred ret type: ROOT
          ARRAY_TYPE (uid: N29) inferred ret type: INT_TYPEc [scope (1,1) <- (0,0)] declared at line 11 (type: INT_TYPE) 
            INT_LITERAL (uid: N30) inferred ret type: INT_TYPE1(type: INT_TYPE) 
        = (uid: N31) inferred ret type: INT_TYPE(type: INT_TYPE) 
          ARRAY_TYPE (uid: N32) inferred ret type: INT_TYPEa [scope (1,1) <- (0,0)] declared at line 9 (type: INT_TYPE) 
            INT_LITERAL (uid: N33) inferred ret type: INT_TYPE2(type: INT_TYPE) 
          INT_LITERAL (uid: N34) inferred ret type: INT_TYPE23(type: INT_TYPE) 
        RETURN (uid: N35) inferred ret type: ROOT[scope (1,1) <- (0,0)]return to fun1 at line 9 
          INT_LITERAL (uid: N36) inferred ret type: INT_TYPE32(type: INT_TYPE) 
  FUNC_DECLARATION (uid: N37) inferred ret type: INT_TYPEmain  (0 params:)[scope (0,0) <- (0,0)] declared at line 27 (type: INT_TYPE) 
    FORMAL_PARAMS (uid: N38) inferred ret type: ROOT
    SEQ (uid: N39) inferred ret type: ROOT
      LOCAL_DECLARATIONS (uid: N40) inferred ret type: ROOT
        ARRAY_TYPE (uid: N41) inferred ret type: INT_TYPEla [scope (1,2) <- (0,0)] declared at line 29 (type: INT_TYPE) 
          INT_LITERAL (uid: N42) inferred ret type: INT_TYPE3(type: INT_TYPE) 
        ID (uid: N43) inferred ret type: INT_TYPEy [scope (1,2) <- (0,0)] declared at line 30 (type: INT_TYPE) 
      STATEMENT_LIST (uid: N44) inferred ret type: ROOT
        = (uid: N45) inferred ret type: INT_TYPE(type: INT_TYPE) 
          ID (uid: N46) inferred ret type: INT_TYPEy [scope (1,2) <- (0,0)] declared at line 30 (type: INT_TYPE) 
          CALL (uid: N47) inferred ret type: INT_TYPE(type: INT_TYPE) 
            FUNCTION (uid: N48) inferred ret type: INT_TYPEfun1  (1 params: INT_TYPE)[scope (1,2) <- (0,0)] declared at line 9 (type: INT_TYPE) 
              ID (uid: N49) inferred ret type: ARRAY_TYPEglob [scope (1,2) <- (0,0)] declared at line 34 (type: ARRAY_TYPE) 
        PRINT (uid: N50) inferred ret type: ROOT
          ARRAY_TYPE (uid: N51) inferred ret type: INT_TYPEglob [scope (1,2) <- (0,0)] declared at line 34 (type: INT_TYPE) 
            INT_LITERAL (uid: N52) inferred ret type: INT_TYPE2(type: INT_TYPE) 
        = (uid: N53) inferred ret type: INT_TYPE(type: INT_TYPE) 
          ID (uid: N54) inferred ret type: INT_TYPEy [scope (1,2) <- (0,0)] declared at line 30 (type: INT_TYPE) 
          CALL (uid: N55) inferred ret type: INT_TYPE(type: INT_TYPE) 
            FUNCTION (uid: N56) inferred ret type: INT_TYPEfun1  (1 params: INT_TYPE)[scope (1,2) <- (0,0)] declared at line 9 (type: INT_TYPE) 
              ID (uid: N57) inferred ret type: ARRAY_TYPEla [scope (1,2) <- (0,0)] declared at line 29 (type: ARRAY_TYPE) 
        PRINT (uid: N58) inferred ret type: ROOT
          ARRAY_TYPE (uid: N59) inferred ret type: INT_TYPEla [scope (1,2) <- (0,0)] declared at line 29 (type: INT_TYPE) 
            INT_LITERAL (uid: N60) inferred ret type: INT_TYPE2(type: INT_TYPE) 
        RETURN (uid: N61) inferred ret type: ROOT[scope (1,2) <- (0,0)]return to main at line 27 
          INT_LITERAL (uid: N62) inferred ret type: INT_TYPE123(type: INT_TYPE) 
(0-0) contains:
  VAR_INT __void (offset: 0 or addr: 0)
  VAR_INT __123 (offset: 0 or addr: 0)
  VAR_INT __17 (offset: 0 or addr: 0)
  VAR_INT __23 (offset: 0 or addr: 0)
  VAR_INT __32 (offset: 0 or addr: 0)
  VAR_INT __0 (offset: 0 or addr: 0)
  VAR_INT __1 (offset: 0 or addr: 0)
  VAR_INT __2 (offset: 0 or addr: 0)
  VAR_INT __3 (offset: 0 or addr: 0)
  VAR_INT __4 (offset: 0 or addr: 0)
There are 50 entries
0: (LABEL, fun2, -, -)
1: (MULT, __T0, __1, __4)
2: (ADDR, __T1, a, -)
3: (SUB, __T2, __T1, __T0)
4: (ASSIGN, __T2, __17, -)
5: (RETURN, __void, -, -)
6: (LABEL, fun1, -, -)
7: (MULT, __T4, __1, __4)
8: (ADDR, __T5, c, -)
9: (SUB, __T6, __T5, __T4)
10: (ASSIGN, __T6, __0, -)
11: (ASSIGN, __T8, c, -)
12: (PUSH, __T8, -, -)
13: (PRECALL, fun2, -, -)
14: (CALL, fun2, -, -)
15: (POSTCALL, fun2, -, -)
16: (MULT, __T10, __1, __4)
17: (ADDR, __T11, c, -)
18: (SUB, __T12, __T11, __T10)
19: (DEREF, __T9, __T12, -)
20: (PRINT, __T9, -, -)
21: (MULT, __T14, __2, __4)
22: (ADDR, __T15, a, -)
23: (SUB, __T16, __T15, __T14)
24: (ASSIGN, __T16, __23, -)
25: (RETURN, __32, -, -)
26: (LABEL, main, -, -)
27: (ASSIGN, __T18, glob, -)
28: (PUSH, __T18, -, -)
29: (PRECALL, fun1, -, -)
30: (CALL, fun1, -, -)
31: (POSTCALL, fun1, -, -)
32: (ASSIGN, y, __RET_INT, -)
33: (MULT, __T20, __2, __4)
34: (ADDR, __T21, glob, -)
35: (SUB, __T22, __T21, __T20)
36: (DEREF, __T19, __T22, -)
37: (PRINT, __T19, -, -)
38: (ASSIGN, __T24, la, -)
39: (PUSH, __T24, -, -)
40: (PRECALL, fun1, -, -)
41: (CALL, fun1, -, -)
42: (POSTCALL, fun1, -, -)
43: (ASSIGN, y, __RET_INT, -)
44: (MULT, __T26, __2, __4)
45: (ADDR, __T27, la, -)
46: (SUB, __T28, __T27, __T26)
47: (DEREF, __T25, __T28, -)
48: (PRINT, __T25, -, -)
49: (RETURN, __123, -, -)
y -20
a -12
a -12
in var array 

Print hashtables (level-sibno) according to their hierarchy
(0-0) contains:
  FUNC_INT main (0 params:)space needed: 32
  VAR_ARRAY_INT glob (length: 3, offset: 0 or addr: 1652)
  FUNC_INT fun1 (1 params: VAR_ARRAY_INT )space needed: 24
  FUNC_VOID fun2 (1 params: VAR_ARRAY_INT )space needed: 12
  (1-0) contains:
    VAR_INT a (offset: -8 or addr: 0)
  (1-1) contains:
    VAR_INT a (offset: -8 or addr: 0)
    VAR_ARRAY_INT c (length: 3, offset: -12 or addr: 0)
  (1-2) contains:
    VAR_ARRAY_INT glob (length: 2, offset: -8 or addr: 0)
    VAR_INT y (offset: -16 or addr: 0)
    VAR_ARRAY_INT la (length: 3, offset: -20 or addr: 0)


===========================================================
arr.c finished.
