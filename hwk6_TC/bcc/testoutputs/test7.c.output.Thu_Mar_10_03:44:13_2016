Result of test done to parser.

test7.c BEGIN.
===========================================================






ROOT (uid: N0) inferred ret type: ROOT isDecl = 0, ignore = 0 
  FUNC_DECLARATION (uid: N1) inferred ret type: VOID_TYPE isDecl = 0, ignore = 0 this_func  (0 params:)[scope (0,0) <- (0,0)] declared at line 1  (type: VOID_TYPE) 
    FORMAL_PARAMS (uid: N2) inferred ret type: ROOT isDecl = 0, ignore = 0 
    SEQ (uid: N3) inferred ret type: ROOT isDecl = 0, ignore = 0 
      LOCAL_DECLARATIONS (uid: N4) inferred ret type: ROOT isDecl = 0, ignore = 0 
      STATEMENT_LIST (uid: N5) inferred ret type: ROOT isDecl = 0, ignore = 0 
  FUNC_DECLARATION (uid: N6) inferred ret type: INT_TYPE isDecl = 0, ignore = 0 some_func  (0 params:)[scope (0,0) <- (0,0)] declared at line 4  (type: INT_TYPE) 
    FORMAL_PARAMS (uid: N7) inferred ret type: ROOT isDecl = 0, ignore = 0 
    SEQ (uid: N8) inferred ret type: ROOT isDecl = 0, ignore = 0 
      LOCAL_DECLARATIONS (uid: N9) inferred ret type: ROOT isDecl = 0, ignore = 0 
        ARRAY_TYPE (uid: N10) inferred ret type: INT_TYPE isDecl = 1, ignore = 0 i [scope (1,1) <- (0,0)] declared at line 5  (type: INT_TYPE) 
          INT_LITERAL (uid: N11) inferred ret type: INT_TYPE isDecl = 0, ignore = 0 2 (type: INT_TYPE) 
        = (uid: N12) inferred ret type: INT_TYPE isDecl = 0, ignore = 0  (type: INT_TYPE) 
          ID (uid: N13) inferred ret type: INT_TYPE isDecl = 1, ignore = 0 a [scope (1,1) <- (0,0)] declared at line 6  (type: INT_TYPE) 
          INT_LITERAL (uid: N14) inferred ret type: INT_TYPE isDecl = 0, ignore = 0 1 (type: INT_TYPE) 
      STATEMENT_LIST (uid: N15) inferred ret type: ROOT isDecl = 0, ignore = 0 
        = (uid: N16) inferred ret type: INT_TYPE isDecl = 0, ignore = 0  (type: INT_TYPE) 
          ARRAY_TYPE (uid: N17) inferred ret type: INT_TYPE isDecl = 0, ignore = 0 i [scope (1,1) <- (0,0)] declared at line 5  (type: INT_TYPE) 
            ID (uid: N18) inferred ret type: INT_TYPE isDecl = 0, ignore = 0 a [scope (1,1) <- (0,0)] declared at line 6  (type: INT_TYPE) 
          INT_LITERAL (uid: N19) inferred ret type: INT_TYPE isDecl = 0, ignore = 0 300 (type: INT_TYPE) 
        IF_STMT (uid: N20) inferred ret type: ROOT isDecl = 0, ignore = 0 
          = (uid: N21) inferred ret type: INT_TYPE isDecl = 0, ignore = 0  (type: INT_TYPE) 
            ARRAY_TYPE (uid: N22) inferred ret type: INT_TYPE isDecl = 0, ignore = 0 i [scope (1,1) <- (0,0)] declared at line 5  (type: INT_TYPE) 
              INT_LITERAL (uid: N23) inferred ret type: INT_TYPE isDecl = 0, ignore = 0 1 (type: INT_TYPE) 
            INT_LITERAL (uid: N24) inferred ret type: INT_TYPE isDecl = 0, ignore = 0 300 (type: INT_TYPE) 
          SEQ (uid: N25) inferred ret type: ROOT isDecl = 0, ignore = 0 
            LOCAL_DECLARATIONS (uid: N26) inferred ret type: ROOT isDecl = 0, ignore = 0 
            STATEMENT_LIST (uid: N27) inferred ret type: ROOT isDecl = 0, ignore = 0 
              PRINT (uid: N28) inferred ret type: ROOT isDecl = 0, ignore = 0 
                STRING_LITERAL (uid: N29) inferred ret type: ROOT isDecl = 0, ignore = 0 HELLOOOOOO\n 
              PRINT (uid: N30) inferred ret type: ROOT isDecl = 0, ignore = 0 
                STRING_LITERAL (uid: N31) inferred ret type: ROOT isDecl = 0, ignore = 0 i[0] + 1000. Should be 1000 
              PRINT (uid: N32) inferred ret type: ROOT isDecl = 0, ignore = 0 
                + (uid: N33) inferred ret type: INT_TYPE isDecl = 0, ignore = 0  (type: INT_TYPE) 
                  ARRAY_TYPE (uid: N34) inferred ret type: INT_TYPE isDecl = 0, ignore = 0 i [scope (2,0) <- (1,1)] declared at line 5  (type: INT_TYPE) 
                    INT_LITERAL (uid: N35) inferred ret type: INT_TYPE isDecl = 0, ignore = 0 0 (type: INT_TYPE) 
                  INT_LITERAL (uid: N36) inferred ret type: INT_TYPE isDecl = 0, ignore = 0 1000 (type: INT_TYPE) 
              PRINT (uid: N37) inferred ret type: ROOT isDecl = 0, ignore = 0 
                STRING_LITERAL (uid: N38) inferred ret type: ROOT isDecl = 0, ignore = 0 i[1]. Should be 300. 
              PRINT (uid: N39) inferred ret type: ROOT isDecl = 0, ignore = 0 
                ARRAY_TYPE (uid: N40) inferred ret type: INT_TYPE isDecl = 0, ignore = 0 i [scope (2,0) <- (1,1)] declared at line 5  (type: INT_TYPE) 
                  INT_LITERAL (uid: N41) inferred ret type: INT_TYPE isDecl = 0, ignore = 0 1 (type: INT_TYPE) 
        = (uid: N42) inferred ret type: INT_TYPE isDecl = 0, ignore = 0  (type: INT_TYPE) 
          ID (uid: N43) inferred ret type: INT_TYPE isDecl = 0, ignore = 0 a [scope (1,1) <- (0,0)] declared at line 6  (type: INT_TYPE) 
          ARRAY_TYPE (uid: N44) inferred ret type: INT_TYPE isDecl = 0, ignore = 0 i [scope (1,1) <- (0,0)] declared at line 5  (type: INT_TYPE) 
            INT_LITERAL (uid: N45) inferred ret type: INT_TYPE isDecl = 0, ignore = 0 0 (type: INT_TYPE) 
        PRINT (uid: N46) inferred ret type: ROOT isDecl = 0, ignore = 0 
          STRING_LITERAL (uid: N47) inferred ret type: ROOT isDecl = 0, ignore = 0 a = i[0]. a should be 0. 
        PRINT (uid: N48) inferred ret type: ROOT isDecl = 0, ignore = 0 
          ID (uid: N49) inferred ret type: INT_TYPE isDecl = 0, ignore = 0 a [scope (1,1) <- (0,0)] declared at line 6  (type: INT_TYPE) 
        RETURN (uid: N50) inferred ret type: ROOT isDecl = 0, ignore = 0 [scope (1,1) <- (0,0)]return to some_func at line 4 
          ARRAY_TYPE (uid: N51) inferred ret type: INT_TYPE isDecl = 0, ignore = 0 i [scope (1,1) <- (0,0)] declared at line 5  (type: INT_TYPE) 
            INT_LITERAL (uid: N52) inferred ret type: INT_TYPE isDecl = 0, ignore = 0 1 (type: INT_TYPE) 
  FUNC_DECLARATION (uid: N53) inferred ret type: INT_TYPE isDecl = 0, ignore = 0 main  (0 params:)[scope (0,0) <- (0,0)] declared at line 26  (type: INT_TYPE) 
    FORMAL_PARAMS (uid: N54) inferred ret type: ROOT isDecl = 0, ignore = 0 
    SEQ (uid: N55) inferred ret type: ROOT isDecl = 0, ignore = 0 
      LOCAL_DECLARATIONS (uid: N56) inferred ret type: ROOT isDecl = 0, ignore = 0 
        ID (uid: N57) inferred ret type: INT_TYPE isDecl = 1, ignore = 0 b [scope (1,2) <- (0,0)] declared at line 27  (type: INT_TYPE) 
      STATEMENT_LIST (uid: N58) inferred ret type: ROOT isDecl = 0, ignore = 0 
        = (uid: N59) inferred ret type: INT_TYPE isDecl = 0, ignore = 0  (type: INT_TYPE) 
          ID (uid: N60) inferred ret type: INT_TYPE isDecl = 0, ignore = 0 b [scope (1,2) <- (0,0)] declared at line 27  (type: INT_TYPE) 
          CALL (uid: N61) inferred ret type: INT_TYPE isDecl = 0, ignore = 0  (type: INT_TYPE) 
            FUNCTION (uid: N62) inferred ret type: INT_TYPE isDecl = 0, ignore = 0 some_func  (0 params:)[scope (1,2) <- (0,0)] declared at line 4  (type: INT_TYPE) 
        PRINT (uid: N63) inferred ret type: ROOT isDecl = 0, ignore = 0 
          STRING_LITERAL (uid: N64) inferred ret type: ROOT isDecl = 0, ignore = 0 Called some_func(). Returned i[1] = 300 
        PRINT (uid: N65) inferred ret type: ROOT isDecl = 0, ignore = 0 
          ID (uid: N66) inferred ret type: INT_TYPE isDecl = 0, ignore = 0 b [scope (1,2) <- (0,0)] declared at line 27  (type: INT_TYPE) 
        RETURN (uid: N67) inferred ret type: ROOT isDecl = 0, ignore = 0 [scope (1,2) <- (0,0)]return to main at line 26 
          INT_LITERAL (uid: N68) inferred ret type: INT_TYPE isDecl = 0, ignore = 0 0 (type: INT_TYPE) 
(0-0) contains:
  STRING a = i[0]. a should be 0.
  STRING Called some_func(). Returned i[1] = 300
  STRING i[1]. Should be 300.
  STRING i[0] + 1000. Should be 1000
  VAR_INT __300 (offset: 0 or addr: 0)
  VAR_INT __0 (offset: 0 or addr: 0)
  VAR_INT __1 (offset: 0 or addr: 0)
  VAR_INT __2 (offset: 0 or addr: 0)
  VAR_INT __4 (offset: 0 or addr: 0)
  VAR_INT __1000 (offset: 0 or addr: 0)
  STRING HELLOOOOOO\n
There are 52 entries
0: (LABEL, this_func, -, -)
1: (LABEL, some_func, -, -)
2: (ASSIGN, a, __1, -)
3: (MULT, __T0, a, __4)
4: (ADDR, __T1, i, -)
5: (SUB, __T2, __T1, __T0)
6: (ASSIGN, __T2, __300, -)
7: (MULT, __T5, __1, __4)
8: (ADDR, __T6, i, -)
9: (SUB, __T7, __T6, __T5)
10: (ASSIGN, __T7, __300, -)
11: (ASSIGN, __T4, __T7, -)
12: (ifFalse, __L_20_FI, __T4, -)
13: (PRINT, HELLOOOOOO\n, -, -)
14: (PRINT, i[0] + 1000. Should be 1000, -, -)
15: (MULT, __T10, __0, __4)
16: (ADDR, __T11, i, -)
17: (SUB, __T12, __T11, __T10)
18: (DEREF, __T9, __T12, -)
19: (MULT, __T15, __0, __4)
20: (ADDR, __T16, i, -)
21: (SUB, __T17, __T16, __T15)
22: (DEREF, __T14, __T17, -)
23: (ADD, __T19, __T14, __1000)
24: (PRINT, __T19, -, -)
25: (PRINT, i[1]. Should be 300., -, -)
26: (MULT, __T21, __1, __4)
27: (ADDR, __T22, i, -)
28: (SUB, __T23, __T22, __T21)
29: (DEREF, __T20, __T23, -)
30: (PRINT, __T20, -, -)
31: (LABEL, __L_20_FI, -, -)
32: (MULT, __T26, __0, __4)
33: (ADDR, __T27, i, -)
34: (SUB, __T28, __T27, __T26)
35: (DEREF, __T25, __T28, -)
36: (ASSIGN, a, __T25, -)
37: (PRINT, a = i[0]. a should be 0., -, -)
38: (PRINT, a, -, -)
39: (MULT, __T31, __1, __4)
40: (ADDR, __T32, i, -)
41: (SUB, __T33, __T32, __T31)
42: (DEREF, __T30, __T33, -)
43: (RETURN, __T30, -, -)
44: (LABEL, main, -, -)
45: (PRECALL, some_func, -, -)
46: (CALL, some_func, -, -)
47: (POSTCALL, some_func, -, -)
48: (ASSIGN, b, __RET_INT, -)
49: (PRINT, Called some_func(). Returned i[1] = 300, -, -)
50: (PRINT, b, -, -)
51: (RETURN, __0, -, -)

Print hashtables (level-sibno) according to their hierarchy
(0-0) contains:
  FUNC_INT main (0 params:)space needed: 12
  FUNC_VOID this_func (0 params:)space needed: 0
  FUNC_INT some_func (0 params:)space needed: 92
  (1-0) contains:
  (1-1) contains:
    VAR_INT a (offset: -8 or addr: 0)
    VAR_ARRAY_INT i (length: 2, offset: -12 or addr: 0), sym_length = 2 
    (2-0) contains:
  (1-2) contains:
    VAR_INT b (offset: -8 or addr: 0)


===========================================================
test7.c finished.
