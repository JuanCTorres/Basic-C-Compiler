Result of test done to parser.

while.c BEGIN.
===========================================================



ROOT (uid: N0) inferred ret type: ROOT
  FUNC_DECLARATION (uid: N1) inferred ret type: VOID_TYPEmain  (0 params:)[scope (0,0) <- (0,0)] declared at line 1 (type: VOID_TYPE) 
    FORMAL_PARAMS (uid: N2) inferred ret type: ROOT
    SEQ (uid: N3) inferred ret type: ROOT
      LOCAL_DECLARATIONS (uid: N4) inferred ret type: ROOT
        = (uid: N5) inferred ret type: INT_TYPE(type: INT_TYPE) 
          ID (uid: N6) inferred ret type: INT_TYPEa [scope (1,0) <- (0,0)] declared at line 2 (type: INT_TYPE) 
          INT_LITERAL (uid: N7) inferred ret type: INT_TYPE0(type: INT_TYPE) 
      STATEMENT_LIST (uid: N8) inferred ret type: ROOT
        WHILE (uid: N9) inferred ret type: ROOT
          < (uid: N10) inferred ret type: INT_TYPE(type: INT_TYPE) 
            ID (uid: N11) inferred ret type: INT_TYPEa [scope (1,0) <- (0,0)] declared at line 2 (type: INT_TYPE) 
            INT_LITERAL (uid: N12) inferred ret type: INT_TYPE10(type: INT_TYPE) 
          SEQ (uid: N13) inferred ret type: ROOT
            LOCAL_DECLARATIONS (uid: N14) inferred ret type: ROOT
              = (uid: N15) inferred ret type: INT_TYPE(type: INT_TYPE) 
                ID (uid: N16) inferred ret type: INT_TYPEb [scope (2,0) <- (1,0)] declared at line 4 (type: INT_TYPE) 
                ++ (uid: N17) inferred ret type: INT_TYPE(type: INT_TYPE) 
                  ID (uid: N18) inferred ret type: INT_TYPEa [scope (2,0) <- (1,0)] declared at line 4 (type: INT_TYPE) 
            STATEMENT_LIST (uid: N19) inferred ret type: ROOT
        RETURN (uid: N0) inferred ret type: VOID_TYPE[scope (0,0) <- (0,0)]return to main at line 1 (type: VOID_TYPE) 
          VOID_TYPE (uid: N0) inferred ret type: ROOT
(0-0) contains:
  VAR_INT __void (offset: 0 or addr: 0)
  VAR_INT __10 (offset: 0 or addr: 0)
  VAR_INT __0 (offset: 0 or addr: 0)
  VAR_INT __1 (offset: 0 or addr: 0)
  VAR_INT __4 (offset: 0 or addr: 0)
There are 18 entries
0: (LABEL, main, -, -)
1: (ASSIGN, a, __0, -)
2: (LABEL, __L_9_WHILE_BEGIN, -, -)
3: (ASSIGN, __T0, a, -)
4: (ASSIGN, __T1, __10, -)
5: (LT, __T2, __T0, __T1)
6: (ifTrue, __L_10_TRUE, __T2, -)
7: (ASSIGN, __T2, __0, -)
8: (GOTO, __L_10_DONE, -, -)
9: (LABEL, __L_10_TRUE, -, -)
10: (ASSIGN, __T2, __1, -)
11: (LABEL, __L_10_DONE, -, -)
12: (ifFalse, __L_9_WHILE_END, __T2, -)
13: (INC, a, -, -)
14: (ASSIGN, b, a, -)
15: (GOTO, __L_9_WHILE_BEGIN, -, -)
16: (LABEL, __L_9_WHILE_END, -, -)
17: (RETURN, __void, -, -)
a -12
a -16
b -20

Print hashtables (level-sibno) according to their hierarchy
(0-0) contains:
  FUNC_VOID main (0 params:)space needed: 20
  (1-0) contains:
    VAR_INT a (offset: -8 or addr: 0)
    (2-0) contains:
      VAR_INT a (offset: -12 or addr: 0)
      VAR_INT b (offset: -16 or addr: 0)


===========================================================
while.c finished.
