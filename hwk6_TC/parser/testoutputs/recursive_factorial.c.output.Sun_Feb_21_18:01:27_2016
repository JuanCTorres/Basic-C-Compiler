Result of test done to parser.

recursive_factorial.c BEGIN.
===========================================================



ROOT (uid: N0) inferred ret type: ROOT
  FUNC_DECLARATION (uid: N1) inferred ret type: INT_TYPErecurr  (1 params: VAR_INT )[scope (0,0) <- (0,0)] declared at line 1 (type: INT_TYPE) 
    FORMAL_PARAMS (uid: N2) inferred ret type: ROOT
      ID (uid: N3) inferred ret type: INT_TYPEa [scope (1,0) <- (0,0)] declared at line 1 (type: INT_TYPE) 
    SEQ (uid: N4) inferred ret type: ROOT
      LOCAL_DECLARATIONS (uid: N5) inferred ret type: ROOT
      STATEMENT_LIST (uid: N6) inferred ret type: ROOT
        IF_ELSE_STMT (uid: N7) inferred ret type: ROOT
          == (uid: N8) inferred ret type: INT_TYPE(type: INT_TYPE) 
            ID (uid: N9) inferred ret type: INT_TYPEa [scope (1,0) <- (0,0)] declared at line 1 (type: INT_TYPE) 
            INT_LITERAL (uid: N10) inferred ret type: INT_TYPE0(type: INT_TYPE) 
          SEQ (uid: N11) inferred ret type: ROOT
            LOCAL_DECLARATIONS (uid: N12) inferred ret type: ROOT
            STATEMENT_LIST (uid: N13) inferred ret type: ROOT
              RETURN (uid: N14) inferred ret type: ROOT[scope (2,0) <- (1,0)]return to recurr at line 1 
                INT_LITERAL (uid: N15) inferred ret type: INT_TYPE1(type: INT_TYPE) 
          SEQ (uid: N16) inferred ret type: ROOT
            LOCAL_DECLARATIONS (uid: N17) inferred ret type: ROOT
            STATEMENT_LIST (uid: N18) inferred ret type: ROOT
              RETURN (uid: N19) inferred ret type: ROOT[scope (2,1) <- (1,0)]return to recurr at line 1 
                * (uid: N20) inferred ret type: INT_TYPE(type: INT_TYPE) 
                  ID (uid: N21) inferred ret type: INT_TYPEa [scope (2,1) <- (1,0)] declared at line 1 (type: INT_TYPE) 
                  CALL (uid: N22) inferred ret type: INT_TYPE(type: INT_TYPE) 
                    FUNCTION (uid: N23) inferred ret type: INT_TYPErecurr  (1 params: INT_TYPE)[scope (2,1) <- (1,0)] declared at line 1 (type: INT_TYPE) 
                      - (uid: N24) inferred ret type: INT_TYPE(type: INT_TYPE) 
                        ID (uid: N25) inferred ret type: INT_TYPEa [scope (2,1) <- (1,0)] declared at line 1 (type: INT_TYPE) 
                        INT_LITERAL (uid: N26) inferred ret type: INT_TYPE1(type: INT_TYPE) 
        RETURN (uid: N27) inferred ret type: ROOT[scope (1,0) <- (0,0)]return to recurr at line 1 
          INT_LITERAL (uid: N28) inferred ret type: INT_TYPE1(type: INT_TYPE) 
  FUNC_DECLARATION (uid: N29) inferred ret type: INT_TYPEmain  (0 params:)[scope (0,0) <- (0,0)] declared at line 14 (type: INT_TYPE) 
    FORMAL_PARAMS (uid: N30) inferred ret type: ROOT
    SEQ (uid: N31) inferred ret type: ROOT
      LOCAL_DECLARATIONS (uid: N32) inferred ret type: ROOT
        ID (uid: N33) inferred ret type: INT_TYPEanswer [scope (1,1) <- (0,0)] declared at line 15 (type: INT_TYPE) 
      STATEMENT_LIST (uid: N34) inferred ret type: ROOT
        = (uid: N35) inferred ret type: INT_TYPE(type: INT_TYPE) 
          ID (uid: N36) inferred ret type: INT_TYPEanswer [scope (1,1) <- (0,0)] declared at line 15 (type: INT_TYPE) 
          CALL (uid: N37) inferred ret type: INT_TYPE(type: INT_TYPE) 
            FUNCTION (uid: N38) inferred ret type: INT_TYPErecurr  (1 params: INT_TYPE)[scope (1,1) <- (0,0)] declared at line 1 (type: INT_TYPE) 
              INT_LITERAL (uid: N39) inferred ret type: INT_TYPE6(type: INT_TYPE) 
        PRINT (uid: N40) inferred ret type: ROOT
          ID (uid: N41) inferred ret type: INT_TYPEanswer [scope (1,1) <- (0,0)] declared at line 15 (type: INT_TYPE) 
        RETURN (uid: N42) inferred ret type: ROOT[scope (1,1) <- (0,0)]return to main at line 14 
          ID (uid: N43) inferred ret type: INT_TYPEanswer [scope (1,1) <- (0,0)] declared at line 15 (type: INT_TYPE) 
(0-0) contains:
  VAR_INT __0 (offset: 0 or addr: 0)
  VAR_INT __1 (offset: 0 or addr: 0)
  VAR_INT __4 (offset: 0 or addr: 0)
  VAR_INT __6 (offset: 0 or addr: 0)
There are 32 entries
0: (LABEL, recurr, -, -)
1: (EQ, __T3, a, __0)
2: (ifTrue, __L_8_TRUE, __T3, -)
3: (ASSIGN, __T3, __0, -)
4: (GOTO, __L_8_DONE, -, -)
5: (LABEL, __L_8_TRUE, -, -)
6: (ASSIGN, __T3, __1, -)
7: (LABEL, __L_8_DONE, -, -)
8: (ASSIGN, __T0, __T3, -)
9: (ifFalse, __L_7_ELSE, __T0, -)
10: (RETURN, __1, -, -)
11: (GOTO, __L_7_FI, -, -)
12: (LABEL, __L_7_ELSE, -, -)
13: (SUB, __T4, a, __1)
14: (ASSIGN, __T5, __T4, -)
15: (PUSH, __T5, -, -)
16: (PRECALL, recurr, -, -)
17: (CALL, recurr, -, -)
18: (POSTCALL, recurr, -, -)
19: (MULT, __T6, a, __RET_INT)
20: (RETURN, __T6, -, -)
21: (LABEL, __L_7_FI, -, -)
22: (RETURN, __1, -, -)
23: (LABEL, main, -, -)
24: (ASSIGN, __T7, __6, -)
25: (PUSH, __T7, -, -)
26: (PRECALL, recurr, -, -)
27: (CALL, recurr, -, -)
28: (POSTCALL, recurr, -, -)
29: (ASSIGN, answer, __RET_INT, -)
30: (PRINT, answer, -, -)
31: (RETURN, answer, -, -)
answer -12
a -12

Print hashtables (level-sibno) according to their hierarchy
(0-0) contains:
  FUNC_INT main (0 params:)space needed: 12
  FUNC_INT recurr (1 params: VAR_INT )space needed: 12
  (1-0) contains:
    VAR_INT a (offset: -8 or addr: 0)
    (2-0) contains:
    (2-1) contains:
  (1-1) contains:
    VAR_INT answer (offset: -8 or addr: 0)


===========================================================
recursive_factorial.c finished.
