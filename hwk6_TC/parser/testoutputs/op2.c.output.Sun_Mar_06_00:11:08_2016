Result of test done to parser.

op2.c BEGIN.
===========================================================



Found one

ROOT (uid: N0) inferred ret type: ROOT
  FUNC_DECLARATION (uid: N1) inferred ret type: INT_TYPEfoo  (1 params: VAR_ARRAY_INT )[scope (0,0) <- (0,0)] declared at line 1 (type: INT_TYPE) 
    FORMAL_PARAMS (uid: N2) inferred ret type: ROOT
      ARRAY_TYPE (uid: N3) inferred ret type: ARRAY_TYPEbar [scope (1,0) <- (0,0)] declared at line 1 (type: ARRAY_TYPE) 
    SEQ (uid: N4) inferred ret type: ROOT
      LOCAL_DECLARATIONS (uid: N5) inferred ret type: ROOT
      STATEMENT_LIST (uid: N6) inferred ret type: ROOT
        = (uid: N7) inferred ret type: INT_TYPE(type: INT_TYPE) 
          ARRAY_TYPE (uid: N8) inferred ret type: INT_TYPEbar [scope (1,0) <- (0,0)] declared at line 1 (type: INT_TYPE) 
            INT_LITERAL (uid: N9) inferred ret type: INT_TYPE1(type: INT_TYPE) 
          INT_LITERAL (uid: N10) inferred ret type: INT_TYPE3(type: INT_TYPE) 
        RETURN (uid: N11) inferred ret type: ROOT[scope (1,0) <- (0,0)]return to foo at line 1 
          ARRAY_TYPE (uid: N12) inferred ret type: INT_TYPEbar [scope (1,0) <- (0,0)] declared at line 1 (type: INT_TYPE) 
            INT_LITERAL (uid: N13) inferred ret type: INT_TYPE1(type: INT_TYPE) 
  FUNC_DECLARATION (uid: N14) inferred ret type: VOID_TYPEmain  (0 params:)[scope (0,0) <- (0,0)] declared at line 6 (type: VOID_TYPE) 
    FORMAL_PARAMS (uid: N15) inferred ret type: ROOT
    SEQ (uid: N16) inferred ret type: ROOT
      LOCAL_DECLARATIONS (uid: N17) inferred ret type: ROOT
        ARRAY_TYPE (uid: N18) inferred ret type: INT_TYPEb [scope (1,1) <- (0,0)] declared at line 7 (type: INT_TYPE) 
          INT_LITERAL (uid: N19) inferred ret type: INT_TYPE10(type: INT_TYPE) 
        ID (uid: N20) inferred ret type: INT_TYPEa [scope (1,1) <- (0,0)] declared at line 8 (type: INT_TYPE) 
        ID (uid: N21) inferred ret type: INT_TYPEc [scope (1,1) <- (0,0)] declared at line 9 (type: INT_TYPE) 
      STATEMENT_LIST (uid: N22) inferred ret type: ROOT
        ID (uid: N23) inferred ret type: ARRAY_TYPEb [scope (1,1) <- (0,0)] declared at line 7 (type: ARRAY_TYPE) 
        = (uid: N24) inferred ret type: INT_TYPE(type: INT_TYPE) 
          ID (uid: N25) inferred ret type: INT_TYPEc [scope (1,1) <- (0,0)] declared at line 9 (type: INT_TYPE) 
          - (uid: N26) inferred ret type: INT_TYPE(type: INT_TYPE) 
            + (uid: N27) inferred ret type: INT_TYPE(type: INT_TYPE) 
              ID (uid: N28) inferred ret type: INT_TYPEa [scope (1,1) <- (0,0)] declared at line 8 (type: INT_TYPE) 
              * (uid: N29) inferred ret type: INT_TYPE(type: INT_TYPE) 
                ++ (uid: N30) inferred ret type: INT_TYPE(type: INT_TYPE) 
                  ARRAY_TYPE (uid: N31) inferred ret type: INT_TYPEb [scope (1,1) <- (0,0)] declared at line 7 (type: INT_TYPE) 
                    INT_LITERAL (uid: N32) inferred ret type: INT_TYPE1(type: INT_TYPE) 
                INT_LITERAL (uid: N33) inferred ret type: INT_TYPE4(type: INT_TYPE) 
            INT_LITERAL (uid: N34) inferred ret type: INT_TYPE5(type: INT_TYPE) 
        = (uid: N35) inferred ret type: INT_TYPE(type: INT_TYPE) 
          ID (uid: N36) inferred ret type: INT_TYPEa [scope (1,1) <- (0,0)] declared at line 8 (type: INT_TYPE) 
          ++ (uid: N37) inferred ret type: INT_TYPE(type: INT_TYPE) 
            ARRAY_TYPE (uid: N38) inferred ret type: INT_TYPEb [scope (1,1) <- (0,0)] declared at line 7 (type: INT_TYPE) 
              ++ (uid: N39) inferred ret type: INT_TYPE(type: INT_TYPE) 
                ID (uid: N40) inferred ret type: INT_TYPEa [scope (1,1) <- (0,0)] declared at line 8 (type: INT_TYPE) 
        = (uid: N41) inferred ret type: INT_TYPE(type: INT_TYPE) 
          ID (uid: N42) inferred ret type: INT_TYPEa [scope (1,1) <- (0,0)] declared at line 8 (type: INT_TYPE) 
          UNARY - (uid: N43) inferred ret type: INT_TYPE(type: INT_TYPE) 
            ID (uid: N44) inferred ret type: INT_TYPEa [scope (1,1) <- (0,0)] declared at line 8 (type: INT_TYPE) 
        PRINT (uid: N45) inferred ret type: ROOT
          ARRAY_TYPE (uid: N46) inferred ret type: INT_TYPEb [scope (1,1) <- (0,0)] declared at line 7 (type: INT_TYPE) 
            UNARY - (uid: N47) inferred ret type: INT_TYPE(type: INT_TYPE) 
              ID (uid: N48) inferred ret type: INT_TYPEa [scope (1,1) <- (0,0)] declared at line 8 (type: INT_TYPE) 
        RETURN (uid: N0) inferred ret type: VOID_TYPE[scope (0,0) <- (0,0)]return to main at line 6 (type: VOID_TYPE) 
          VOID_TYPE (uid: N0) inferred ret type: ROOT



ROOT (uid: N0) inferred ret type: ROOT
  FUNC_DECLARATION (uid: N1) inferred ret type: INT_TYPEfoo  (1 params: VAR_ARRAY_INT )[scope (0,0) <- (0,0)] declared at line 1 (type: INT_TYPE) 
    FORMAL_PARAMS (uid: N2) inferred ret type: ROOT
      ARRAY_TYPE (uid: N3) inferred ret type: ARRAY_TYPEbar [scope (1,0) <- (0,0)] declared at line 1 (type: ARRAY_TYPE) 
    SEQ (uid: N4) inferred ret type: ROOT
      LOCAL_DECLARATIONS (uid: N5) inferred ret type: ROOT
      STATEMENT_LIST (uid: N6) inferred ret type: ROOT
        = (uid: N7) inferred ret type: INT_TYPE(type: INT_TYPE) 
          ARRAY_TYPE (uid: N8) inferred ret type: INT_TYPEbar [scope (1,0) <- (0,0)] declared at line 1 (type: INT_TYPE) 
            INT_LITERAL (uid: N9) inferred ret type: INT_TYPE1(type: INT_TYPE) 
          INT_LITERAL (uid: N10) inferred ret type: INT_TYPE3(type: INT_TYPE) 
        RETURN (uid: N11) inferred ret type: ROOT[scope (1,0) <- (0,0)]return to foo at line 1 
          ARRAY_TYPE (uid: N12) inferred ret type: INT_TYPEbar [scope (1,0) <- (0,0)] declared at line 1 (type: INT_TYPE) 
            INT_LITERAL (uid: N13) inferred ret type: INT_TYPE1(type: INT_TYPE) 
  FUNC_DECLARATION (uid: N14) inferred ret type: VOID_TYPEmain  (0 params:)[scope (0,0) <- (0,0)] declared at line 6 (type: VOID_TYPE) 
    FORMAL_PARAMS (uid: N15) inferred ret type: ROOT
    SEQ (uid: N16) inferred ret type: ROOT
      LOCAL_DECLARATIONS (uid: N17) inferred ret type: ROOT
        ARRAY_TYPE (uid: N18) inferred ret type: INT_TYPEb [scope (1,1) <- (0,0)] declared at line 7 (type: INT_TYPE) 
          INT_LITERAL (uid: N19) inferred ret type: INT_TYPE10(type: INT_TYPE) 
        ID (uid: N20) inferred ret type: INT_TYPEa [scope (1,1) <- (0,0)] declared at line 8 (type: INT_TYPE) 
        ID (uid: N21) inferred ret type: INT_TYPEc [scope (1,1) <- (0,0)] declared at line 9 (type: INT_TYPE) 
      STATEMENT_LIST (uid: N22) inferred ret type: ROOT
        ID (uid: N23) inferred ret type: ARRAY_TYPEb [scope (1,1) <- (0,0)] declared at line 7 (type: ARRAY_TYPE) 
        = (uid: N24) inferred ret type: INT_TYPE(type: INT_TYPE) 
          ID (uid: N25) inferred ret type: INT_TYPEc [scope (1,1) <- (0,0)] declared at line 9 (type: INT_TYPE) 
          - (uid: N26) inferred ret type: INT_TYPE(type: INT_TYPE) 
            + (uid: N27) inferred ret type: INT_TYPE(type: INT_TYPE) 
              ID (uid: N28) inferred ret type: INT_TYPEa [scope (1,1) <- (0,0)] declared at line 8 (type: INT_TYPE) 
              * (uid: N29) inferred ret type: INT_TYPE(type: INT_TYPE) 
                ++ (uid: N30) inferred ret type: INT_TYPE(type: INT_TYPE) 
                  ARRAY_TYPE (uid: N31) inferred ret type: INT_TYPEb [scope (1,1) <- (0,0)] declared at line 7 (type: INT_TYPE) 
                    INT_LITERAL (uid: N32) inferred ret type: INT_TYPE1(type: INT_TYPE) 
                INT_LITERAL (uid: N33) inferred ret type: INT_TYPE4(type: INT_TYPE) 
            INT_LITERAL (uid: N34) inferred ret type: INT_TYPE5(type: INT_TYPE) 
        = (uid: N35) inferred ret type: INT_TYPE(type: INT_TYPE) 
          ID (uid: N36) inferred ret type: INT_TYPEa [scope (1,1) <- (0,0)] declared at line 8 (type: INT_TYPE) 
          ++ (uid: N37) inferred ret type: INT_TYPE(type: INT_TYPE) 
            ARRAY_TYPE (uid: N38) inferred ret type: INT_TYPEb [scope (1,1) <- (0,0)] declared at line 7 (type: INT_TYPE) 
              ++ (uid: N39) inferred ret type: INT_TYPE(type: INT_TYPE) 
                ID (uid: N40) inferred ret type: INT_TYPEa [scope (1,1) <- (0,0)] declared at line 8 (type: INT_TYPE) 
        = (uid: N41) inferred ret type: INT_TYPE(type: INT_TYPE) 
          ID (uid: N42) inferred ret type: INT_TYPEa [scope (1,1) <- (0,0)] declared at line 8 (type: INT_TYPE) 
          UNARY - (uid: N43) inferred ret type: INT_TYPE(type: INT_TYPE) 
            ID (uid: N44) inferred ret type: INT_TYPEa [scope (1,1) <- (0,0)] declared at line 8 (type: INT_TYPE) 
        PRINT (uid: N45) inferred ret type: ROOT
          ARRAY_TYPE (uid: N46) inferred ret type: INT_TYPEb [scope (1,1) <- (0,0)] declared at line 7 (type: INT_TYPE) 
            UNARY - (uid: N47) inferred ret type: INT_TYPE(type: INT_TYPE) 
              ID (uid: N48) inferred ret type: INT_TYPEa [scope (1,1) <- (0,0)] declared at line 8 (type: INT_TYPE) 
        RETURN (uid: N0) inferred ret type: VOID_TYPE[scope (0,0) <- (0,0)]return to main at line 6 (type: VOID_TYPE) 
          VOID_TYPE (uid: N0) inferred ret type: ROOT
(0-0) contains:
  VAR_INT __void (offset: 0 or addr: 0)
  VAR_INT __10 (offset: 0 or addr: 0)
  VAR_INT __1 (offset: 0 or addr: 0)
  VAR_INT __3 (offset: 0 or addr: 0)
  VAR_INT __4 (offset: 0 or addr: 0)
  VAR_INT __5 (offset: 0 or addr: 0)
There are 52 entries
0: (LABEL, foo, -, -)
1: (MULT, __T0, __1, __4)
2: (ADDR, __T1, bar, -)
3: (SUB, __T2, __T1, __T0)
4: (ASSIGN, __T2, __3, -)
5: (MULT, __T5, __1, __4)
6: (ADDR, __T6, bar, -)
7: (SUB, __T7, __T6, __T5)
8: (DEREF, __T4, __T7, -)
9: (RETURN, __T4, -, -)
10: (LABEL, main, -, -)
11: (MULT, __T10, __1, __4)
12: (ADDR, __T11, b, -)
13: (SUB, __T12, __T11, __T10)
14: (DEREF, __T9, __T12, -)
15: (MULT, __T14, __1, __4)
16: (ADDR, __T15, b, -)
17: (SUB, __T16, __T15, __T14)
18: (MULT, __T20, __1, __4)
19: (ADDR, __T21, b, -)
20: (SUB, __T22, __T21, __T20)
21: (DEREF, __T19, __T22, -)
22: (ADD, __T18, __T19, __1)
23: (ASSIGN, __T16, __T18, -)
24: (MULT, __T24, __T18, __4)
25: (ADD, __T25, a, __T24)
26: (SUB, __T26, __T25, __5)
27: (ASSIGN, c, __T26, -)
28: (INC, a, -, -)
29: (MULT, __T29, a, __4)
30: (ADDR, __T30, b, -)
31: (SUB, __T31, __T30, __T29)
32: (DEREF, __T28, __T31, -)
33: (MULT, __T33, a, __4)
34: (ADDR, __T34, b, -)
35: (SUB, __T35, __T34, __T33)
36: (MULT, __T39, a, __4)
37: (ADDR, __T40, b, -)
38: (SUB, __T41, __T40, __T39)
39: (DEREF, __T38, __T41, -)
40: (ADD, __T37, __T38, __1)
41: (ASSIGN, __T35, __T37, -)
42: (ASSIGN, a, __T37, -)
43: (NEG, __T43, a, -)
44: (ASSIGN, a, __T43, -)
45: (NEG, __T44, a, -)
46: (MULT, __T46, __T44, __4)
47: (ADDR, __T47, b, -)
48: (SUB, __T48, __T47, __T46)
49: (DEREF, __T45, __T48, -)
50: (PRINT, __T45, -, -)
51: (RETURN, __void, -, -)
a -12
c -56
bar -12

Print hashtables (level-sibno) according to their hierarchy
(0-0) contains:
  FUNC_VOID main (0 params:)space needed: 56
  FUNC_INT foo (1 params: VAR_ARRAY_INT )space needed: 12
  (1-0) contains:
    VAR_INT bar (offset: -8 or addr: 0)
  (1-1) contains:
    VAR_INT a (offset: -8 or addr: 0)
    VAR_ARRAY_INT b (length: 10, offset: -12 or addr: 0)
    VAR_INT c (offset: -52 or addr: 0)


===========================================================
op2.c finished.
