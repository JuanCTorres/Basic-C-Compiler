Result of test done to parser.

test4.c.c BEGIN.
===========================================================



ROOT (uid: N0) inferred ret type: ROOT
  FUNC_DECLARATION (uid: N1) inferred ret type: VOID_TYPEmain  (3 params: VAR_INT  VAR_INT  VAR_INT )[scope (0,0) <- (0,0)] declared at line 1 (type: VOID_TYPE) 
    FORMAL_PARAMS (uid: N2) inferred ret type: ROOT
      ID (uid: N3) inferred ret type: INT_TYPEa [scope (1,0) <- (0,0)] declared at line 1 (type: INT_TYPE) 
      ID (uid: N4) inferred ret type: INT_TYPEb [scope (1,0) <- (0,0)] declared at line 1 (type: INT_TYPE) 
      ID (uid: N5) inferred ret type: INT_TYPEc [scope (1,0) <- (0,0)] declared at line 1 (type: INT_TYPE) 
    SEQ (uid: N6) inferred ret type: ROOT
      LOCAL_DECLARATIONS (uid: N7) inferred ret type: ROOT
        ID (uid: N8) inferred ret type: INT_TYPEzzzz [scope (1,0) <- (0,0)] declared at line 2 (type: INT_TYPE) 
      STATEMENT_LIST (uid: N9) inferred ret type: ROOT
        SEQ (uid: N10) inferred ret type: ROOT
          LOCAL_DECLARATIONS (uid: N11) inferred ret type: ROOT
            ID (uid: N12) inferred ret type: INT_TYPEd [scope (2,0) <- (1,0)] declared at line 4 (type: INT_TYPE) 
          STATEMENT_LIST (uid: N13) inferred ret type: ROOT
            SEQ (uid: N14) inferred ret type: ROOT
              LOCAL_DECLARATIONS (uid: N15) inferred ret type: ROOT
                ID (uid: N16) inferred ret type: INT_TYPEe [scope (3,0) <- (2,0)] declared at line 6 (type: INT_TYPE) 
              STATEMENT_LIST (uid: N17) inferred ret type: ROOT
                SEQ (uid: N18) inferred ret type: ROOT
                  LOCAL_DECLARATIONS (uid: N19) inferred ret type: ROOT
                    ID (uid: N20) inferred ret type: INT_TYPEf [scope (4,0) <- (3,0)] declared at line 8 (type: INT_TYPE) 
                  STATEMENT_LIST (uid: N21) inferred ret type: ROOT
                    IF_STMT (uid: N22) inferred ret type: ROOT
                      != (uid: N23) inferred ret type: INT_TYPE(type: INT_TYPE) 
                        ID (uid: N24) inferred ret type: INT_TYPEe [scope (4,0) <- (3,0)] declared at line 6 (type: INT_TYPE) 
                        ID (uid: N25) inferred ret type: INT_TYPEf [scope (4,0) <- (3,0)] declared at line 8 (type: INT_TYPE) 
                      SEQ (uid: N26) inferred ret type: ROOT
                        LOCAL_DECLARATIONS (uid: N27) inferred ret type: ROOT
                          ID (uid: N28) inferred ret type: INT_TYPEg [scope (5,0) <- (4,0)] declared at line 10 (type: INT_TYPE) 
                        STATEMENT_LIST (uid: N29) inferred ret type: ROOT
                          SEQ (uid: N30) inferred ret type: ROOT
                            LOCAL_DECLARATIONS (uid: N31) inferred ret type: ROOT
                              ID (uid: N32) inferred ret type: INT_TYPEh [scope (6,0) <- (5,0)] declared at line 12 (type: INT_TYPE) 
                            STATEMENT_LIST (uid: N33) inferred ret type: ROOT
                              WHILE (uid: N34) inferred ret type: ROOT
                                != (uid: N35) inferred ret type: INT_TYPE(type: INT_TYPE) 
                                  ID (uid: N36) inferred ret type: INT_TYPEh [scope (6,0) <- (5,0)] declared at line 12 (type: INT_TYPE) 
                                  INT_LITERAL (uid: N37) inferred ret type: INT_TYPE0(type: INT_TYPE) 
                                SEQ (uid: N38) inferred ret type: ROOT
                                  LOCAL_DECLARATIONS (uid: N39) inferred ret type: ROOT
                                    ID (uid: N40) inferred ret type: INT_TYPEi [scope (7,0) <- (6,0)] declared at line 14 (type: INT_TYPE) 
                                  STATEMENT_LIST (uid: N41) inferred ret type: ROOT
                                    FOR (uid: N42) inferred ret type: ROOT
                                      ID (uid: N43) inferred ret type: INT_TYPEh [scope (7,0) <- (6,0)] declared at line 12 (type: INT_TYPE) 
                                      > (uid: N44) inferred ret type: INT_TYPE(type: INT_TYPE) 
                                        ID (uid: N45) inferred ret type: INT_TYPEh [scope (7,0) <- (6,0)] declared at line 12 (type: INT_TYPE) 
                                        INT_LITERAL (uid: N46) inferred ret type: INT_TYPE10(type: INT_TYPE) 
                                      ++ (uid: N47) inferred ret type: INT_TYPE(type: INT_TYPE) 
                                        ID (uid: N48) inferred ret type: INT_TYPEh [scope (7,0) <- (6,0)] declared at line 12 (type: INT_TYPE) 
                                      SEQ (uid: N49) inferred ret type: ROOT
                                        LOCAL_DECLARATIONS (uid: N50) inferred ret type: ROOT
                                          ID (uid: N51) inferred ret type: INT_TYPEj [scope (8,0) <- (7,0)] declared at line 16 (type: INT_TYPE) 
                                        STATEMENT_LIST (uid: N52) inferred ret type: ROOT
        SEQ (uid: N53) inferred ret type: ROOT
          LOCAL_DECLARATIONS (uid: N54) inferred ret type: ROOT
            ID (uid: N55) inferred ret type: INT_TYPEhuehuehue [scope (2,1) <- (1,0)] declared at line 27 (type: INT_TYPE) 
          STATEMENT_LIST (uid: N56) inferred ret type: ROOT
        SEQ (uid: N57) inferred ret type: ROOT
          LOCAL_DECLARATIONS (uid: N58) inferred ret type: ROOT
            ID (uid: N59) inferred ret type: INT_TYPElolz [scope (2,2) <- (1,0)] declared at line 31 (type: INT_TYPE) 
            ARRAY_TYPE (uid: N60) inferred ret type: INT_TYPEcatz [scope (2,2) <- (1,0)] declared at line 31 (type: INT_TYPE) 
              INT_LITERAL (uid: N61) inferred ret type: INT_TYPE100(type: INT_TYPE) 
            ID (uid: N62) inferred ret type: INT_TYPEhaaa [scope (2,2) <- (1,0)] declared at line 31 (type: INT_TYPE) 
          STATEMENT_LIST (uid: N63) inferred ret type: ROOT
        RETURN (uid: N0) inferred ret type: VOID_TYPE[scope (0,0) <- (0,0)]return to main at line 1 (type: VOID_TYPE) 
          VOID_TYPE (uid: N0) inferred ret type: ROOT
(0-0) contains:
  VAR_INT __void (offset: 0 or addr: 0)
  VAR_INT __100 (offset: 0 or addr: 0)
  VAR_INT __10 (offset: 0 or addr: 0)
  VAR_INT __0 (offset: 0 or addr: 0)
  VAR_INT __1 (offset: 0 or addr: 0)
  VAR_INT __4 (offset: 0 or addr: 0)
There are 41 entries
0: (LABEL, main, -, -)
1: (ASSIGN, __T1, e, -)
2: (ASSIGN, __T2, f, -)
3: (NEQ, __T3, __T1, __T2)
4: (ifTrue, __L_23_TRUE, __T3, -)
5: (ASSIGN, __T3, __0, -)
6: (GOTO, __L_23_DONE, -, -)
7: (LABEL, __L_23_TRUE, -, -)
8: (ASSIGN, __T3, __1, -)
9: (LABEL, __L_23_DONE, -, -)
10: (ASSIGN, __T0, __T3, -)
11: (ifFalse, __L_22_FI, __T0, -)
12: (LABEL, __L_34_WHILE_BEGIN, -, -)
13: (ASSIGN, __T4, h, -)
14: (ASSIGN, __T5, __0, -)
15: (NEQ, __T6, __T4, __T5)
16: (ifTrue, __L_35_TRUE, __T6, -)
17: (ASSIGN, __T6, __0, -)
18: (GOTO, __L_35_DONE, -, -)
19: (LABEL, __L_35_TRUE, -, -)
20: (ASSIGN, __T6, __1, -)
21: (LABEL, __L_35_DONE, -, -)
22: (ifFalse, __L_34_WHILE_END, __T6, -)
23: (LABEL, __L_42_FOR_BEGIN, -, -)
24: (ASSIGN, __T7, h, -)
25: (ASSIGN, __T8, __10, -)
26: (GT, __T9, __T7, __T8)
27: (ifTrue, __L_44_TRUE, __T9, -)
28: (ASSIGN, __T9, __0, -)
29: (GOTO, __L_44_DONE, -, -)
30: (LABEL, __L_44_TRUE, -, -)
31: (ASSIGN, __T9, __1, -)
32: (LABEL, __L_44_DONE, -, -)
33: (ifFalse, __L_42_FOR_END, __T9, -)
34: (INC, h, -, -)
35: (GOTO, __L_42_FOR_BEGIN, -, -)
36: (LABEL, __L_42_FOR_END, -, -)
37: (GOTO, __L_34_WHILE_BEGIN, -, -)
38: (LABEL, __L_34_WHILE_END, -, -)
39: (LABEL, __L_22_FI, -, -)
40: (RETURN, __void, -, -)
zzzz -12
a -16
b -20
c -24
d -28
e -32
f -36
g -40
h -44
i -48
j -52
huehuehue -56
haaa -60
lolz -464

Print hashtables (level-sibno) according to their hierarchy
(0-0) contains:
  FUNC_VOID main (3 params: VAR_INT  VAR_INT  VAR_INT )space needed: 464
  (1-0) contains:
    VAR_INT zzzz (offset: -8 or addr: 0)
    VAR_INT a (offset: -12 or addr: 0)
    VAR_INT b (offset: -16 or addr: 0)
    VAR_INT c (offset: -20 or addr: 0)
    (2-0) contains:
      VAR_INT d (offset: -24 or addr: 0)
      (3-0) contains:
        VAR_INT e (offset: -28 or addr: 0)
        (4-0) contains:
          VAR_INT f (offset: -32 or addr: 0)
          (5-0) contains:
            VAR_INT g (offset: -36 or addr: 0)
            (6-0) contains:
              VAR_INT h (offset: -40 or addr: 0)
              (7-0) contains:
                VAR_INT i (offset: -44 or addr: 0)
                (8-0) contains:
                  VAR_INT j (offset: -48 or addr: 0)
    (2-1) contains:
      VAR_INT huehuehue (offset: -52 or addr: 0)
    (2-2) contains:
      VAR_INT haaa (offset: -56 or addr: 0)
      VAR_ARRAY_INT catz (length: 100, offset: -60 or addr: 0)
      VAR_INT lolz (offset: -460 or addr: 0)


===========================================================
test4.c finished.
