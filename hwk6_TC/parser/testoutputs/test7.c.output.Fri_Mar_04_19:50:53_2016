Result of test done to parser.

test7.c.c BEGIN.
===========================================================



ROOT (uid: N0) inferred ret type: ROOT
  FUNC_DECLARATION (uid: N1) inferred ret type: VOID_TYPEthis_func  (0 params:)[scope (0,0) <- (0,0)] declared at line 1 (type: VOID_TYPE) 
    FORMAL_PARAMS (uid: N2) inferred ret type: ROOT
    SEQ (uid: N3) inferred ret type: ROOT
      LOCAL_DECLARATIONS (uid: N4) inferred ret type: ROOT
      STATEMENT_LIST (uid: N5) inferred ret type: ROOT
  FUNC_DECLARATION (uid: N6) inferred ret type: INT_TYPEsome_func  (0 params:)[scope (0,0) <- (0,0)] declared at line 4 (type: INT_TYPE) 
    FORMAL_PARAMS (uid: N7) inferred ret type: ROOT
    SEQ (uid: N8) inferred ret type: ROOT
      LOCAL_DECLARATIONS (uid: N9) inferred ret type: ROOT
        ARRAY_TYPE (uid: N10) inferred ret type: INT_TYPEi [scope (1,1) <- (0,0)] declared at line 5 (type: INT_TYPE) 
          INT_LITERAL (uid: N11) inferred ret type: INT_TYPE2(type: INT_TYPE) 
        = (uid: N12) inferred ret type: INT_TYPE(type: INT_TYPE) 
          ID (uid: N13) inferred ret type: INT_TYPEa [scope (1,1) <- (0,0)] declared at line 6 (type: INT_TYPE) 
          INT_LITERAL (uid: N14) inferred ret type: INT_TYPE1(type: INT_TYPE) 
      STATEMENT_LIST (uid: N15) inferred ret type: ROOT
        = (uid: N16) inferred ret type: INT_TYPE(type: INT_TYPE) 
          ARRAY_TYPE (uid: N17) inferred ret type: INT_TYPEi [scope (1,1) <- (0,0)] declared at line 5 (type: INT_TYPE) 
            ID (uid: N18) inferred ret type: INT_TYPEa [scope (1,1) <- (0,0)] declared at line 6 (type: INT_TYPE) 
          INT_LITERAL (uid: N19) inferred ret type: INT_TYPE300(type: INT_TYPE) 
        IF_STMT (uid: N20) inferred ret type: ROOT
          = (uid: N21) inferred ret type: INT_TYPE(type: INT_TYPE) 
            ARRAY_TYPE (uid: N22) inferred ret type: INT_TYPEi [scope (1,1) <- (0,0)] declared at line 5 (type: INT_TYPE) 
              INT_LITERAL (uid: N23) inferred ret type: INT_TYPE1(type: INT_TYPE) 
            INT_LITERAL (uid: N24) inferred ret type: INT_TYPE300(type: INT_TYPE) 
          SEQ (uid: N25) inferred ret type: ROOT
            LOCAL_DECLARATIONS (uid: N26) inferred ret type: ROOT
            STATEMENT_LIST (uid: N27) inferred ret type: ROOT
        RETURN (uid: N28) inferred ret type: ROOT[scope (1,1) <- (0,0)]return to some_func at line 4 
          ARRAY_TYPE (uid: N29) inferred ret type: INT_TYPEi [scope (1,1) <- (0,0)] declared at line 5 (type: INT_TYPE) 
            INT_LITERAL (uid: N30) inferred ret type: INT_TYPE1(type: INT_TYPE) 
  FUNC_DECLARATION (uid: N31) inferred ret type: INT_TYPEmain  (0 params:)[scope (0,0) <- (0,0)] declared at line 23 (type: INT_TYPE) 
    FORMAL_PARAMS (uid: N32) inferred ret type: ROOT
    SEQ (uid: N33) inferred ret type: ROOT
      LOCAL_DECLARATIONS (uid: N34) inferred ret type: ROOT
        ID (uid: N35) inferred ret type: INT_TYPEb [scope (1,2) <- (0,0)] declared at line 24 (type: INT_TYPE) 
      STATEMENT_LIST (uid: N36) inferred ret type: ROOT
        = (uid: N37) inferred ret type: INT_TYPE(type: INT_TYPE) 
          ID (uid: N38) inferred ret type: INT_TYPEb [scope (1,2) <- (0,0)] declared at line 24 (type: INT_TYPE) 
          CALL (uid: N39) inferred ret type: INT_TYPE(type: INT_TYPE) 
            FUNCTION (uid: N40) inferred ret type: INT_TYPEsome_func  (0 params:)[scope (1,2) <- (0,0)] declared at line 4 (type: INT_TYPE) 
        PRINT (uid: N41) inferred ret type: ROOT
          ID (uid: N42) inferred ret type: INT_TYPEb [scope (1,2) <- (0,0)] declared at line 24 (type: INT_TYPE) 
        RETURN (uid: N43) inferred ret type: ROOT[scope (1,2) <- (0,0)]return to main at line 23 
          INT_LITERAL (uid: N44) inferred ret type: INT_TYPE0(type: INT_TYPE) 
(0-0) contains:
  VAR_INT __300 (offset: 0 or addr: 0)
  VAR_INT __0 (offset: 0 or addr: 0)
  VAR_INT __1 (offset: 0 or addr: 0)
  VAR_INT __2 (offset: 0 or addr: 0)
  VAR_INT __4 (offset: 0 or addr: 0)
There are 26 entries
0: (LABEL, this_func, -, -)
1: (LABEL, some_func, -, -)
2: (ASSIGN, a, __1, -)
3: (MULT, __T0, a, __4)
4: (ADDR, __T1, i, -)
5: (SUB, __T2, __T1, __T0)
6: (ASSIGN, __T2, __300, -)
7: (MULT, __T5, __1, __4)
8: (ADDR, __T6, i, -)
9: (SUB, __T7, __T6, __T5)
10: (ASSIGN, __T7, __300, -)
11: (ASSIGN, __T4, __T7, -)
12: (ifFalse, __L_20_FI, __T4, -)
13: (LABEL, __L_20_FI, -, -)
14: (MULT, __T10, __1, __4)
15: (ADDR, __T11, i, -)
16: (SUB, __T12, __T11, __T10)
17: (DEREF, __T9, __T12, -)
18: (RETURN, __T9, -, -)
19: (LABEL, main, -, -)
20: (PRECALL, some_func, -, -)
21: (CALL, some_func, -, -)
22: (POSTCALL, some_func, -, -)
23: (ASSIGN, b, __RET_INT, -)
24: (PRINT, b, -, -)
25: (RETURN, __0, -, -)
b -12
a -12

Print hashtables (level-sibno) according to their hierarchy
(0-0) contains:
  FUNC_INT main (0 params:)space needed: 12
  FUNC_VOID this_func (0 params:)space needed: 0
  FUNC_INT some_func (0 params:)space needed: 20
  (1-0) contains:
  (1-1) contains:
    VAR_INT a (offset: -8 or addr: 0)
    VAR_ARRAY_INT i (length: 2, offset: -12 or addr: 0)
    (2-0) contains:
  (1-2) contains:
    VAR_INT b (offset: -8 or addr: 0)


===========================================================
test7.c finished.
