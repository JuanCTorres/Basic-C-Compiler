Result of test done to parser.

inc.c BEGIN.
===========================================================



ROOT (uid: N0) inferred ret type: ROOT
  ARRAY_TYPE (uid: N1) inferred ret type: INT_TYPEa [scope (0,0) <- (0,0)] declared at line 1 (type: INT_TYPE) 
    INT_LITERAL (uid: N2) inferred ret type: INT_TYPE3(type: INT_TYPE) 
  FUNC_DECLARATION (uid: N3) inferred ret type: INT_TYPEmain  (0 params:)[scope (0,0) <- (0,0)] declared at line 3 (type: INT_TYPE) 
    FORMAL_PARAMS (uid: N4) inferred ret type: ROOT
    SEQ (uid: N5) inferred ret type: ROOT
      LOCAL_DECLARATIONS (uid: N6) inferred ret type: ROOT
        ID (uid: N7) inferred ret type: INT_TYPEi [scope (1,0) <- (0,0)] declared at line 5 (type: INT_TYPE) 
        ID (uid: N8) inferred ret type: INT_TYPEn [scope (1,0) <- (0,0)] declared at line 5 (type: INT_TYPE) 
        ARRAY_TYPE (uid: N9) inferred ret type: INT_TYPEb [scope (1,0) <- (0,0)] declared at line 5 (type: INT_TYPE) 
          INT_LITERAL (uid: N10) inferred ret type: INT_TYPE3(type: INT_TYPE) 
      STATEMENT_LIST (uid: N11) inferred ret type: ROOT
        FOR (uid: N12) inferred ret type: ROOT
          = (uid: N13) inferred ret type: INT_TYPE(type: INT_TYPE) 
            ID (uid: N14) inferred ret type: INT_TYPEi [scope (1,0) <- (0,0)] declared at line 5 (type: INT_TYPE) 
            INT_LITERAL (uid: N15) inferred ret type: INT_TYPE0(type: INT_TYPE) 
          < (uid: N16) inferred ret type: INT_TYPE(type: INT_TYPE) 
            ID (uid: N17) inferred ret type: INT_TYPEi [scope (1,0) <- (0,0)] declared at line 5 (type: INT_TYPE) 
            INT_LITERAL (uid: N18) inferred ret type: INT_TYPE3(type: INT_TYPE) 
          = (uid: N19) inferred ret type: INT_TYPE(type: INT_TYPE) 
            ID (uid: N20) inferred ret type: INT_TYPEi [scope (1,0) <- (0,0)] declared at line 5 (type: INT_TYPE) 
            + (uid: N21) inferred ret type: INT_TYPE(type: INT_TYPE) 
              ID (uid: N22) inferred ret type: INT_TYPEi [scope (1,0) <- (0,0)] declared at line 5 (type: INT_TYPE) 
              INT_LITERAL (uid: N23) inferred ret type: INT_TYPE1(type: INT_TYPE) 
          SEQ (uid: N24) inferred ret type: ROOT
            LOCAL_DECLARATIONS (uid: N25) inferred ret type: ROOT
            STATEMENT_LIST (uid: N26) inferred ret type: ROOT
              = (uid: N27) inferred ret type: INT_TYPE(type: INT_TYPE) 
                ARRAY_TYPE (uid: N28) inferred ret type: INT_TYPEa [scope (2,0) <- (1,0)] declared at line 1 (type: INT_TYPE) 
                  ID (uid: N29) inferred ret type: INT_TYPEi [scope (2,0) <- (1,0)] declared at line 5 (type: INT_TYPE) 
                INT_LITERAL (uid: N30) inferred ret type: INT_TYPE0(type: INT_TYPE) 
              = (uid: N31) inferred ret type: INT_TYPE(type: INT_TYPE) 
                ARRAY_TYPE (uid: N32) inferred ret type: INT_TYPEb [scope (2,0) <- (1,0)] declared at line 5 (type: INT_TYPE) 
                  ID (uid: N33) inferred ret type: INT_TYPEi [scope (2,0) <- (1,0)] declared at line 5 (type: INT_TYPE) 
                INT_LITERAL (uid: N34) inferred ret type: INT_TYPE0(type: INT_TYPE) 
        = (uid: N35) inferred ret type: INT_TYPE(type: INT_TYPE) 
          ID (uid: N36) inferred ret type: INT_TYPEn [scope (1,0) <- (0,0)] declared at line 5 (type: INT_TYPE) 
          INT_LITERAL (uid: N37) inferred ret type: INT_TYPE1(type: INT_TYPE) 
        ++ (uid: N38) inferred ret type: INT_TYPE(type: INT_TYPE) 
          ARRAY_TYPE (uid: N39) inferred ret type: INT_TYPEa [scope (1,0) <- (0,0)] declared at line 1 (type: INT_TYPE) 
            ++ (uid: N40) inferred ret type: INT_TYPE(type: INT_TYPE) 
              ID (uid: N41) inferred ret type: INT_TYPEn [scope (1,0) <- (0,0)] declared at line 5 (type: INT_TYPE) 
        = (uid: N42) inferred ret type: INT_TYPE(type: INT_TYPE) 
          ID (uid: N43) inferred ret type: INT_TYPEn [scope (1,0) <- (0,0)] declared at line 5 (type: INT_TYPE) 
          INT_LITERAL (uid: N44) inferred ret type: INT_TYPE1(type: INT_TYPE) 
        ++ (uid: N45) inferred ret type: INT_TYPE(type: INT_TYPE) 
          ARRAY_TYPE (uid: N46) inferred ret type: INT_TYPEb [scope (1,0) <- (0,0)] declared at line 5 (type: INT_TYPE) 
            ++ (uid: N47) inferred ret type: INT_TYPE(type: INT_TYPE) 
              ID (uid: N48) inferred ret type: INT_TYPEn [scope (1,0) <- (0,0)] declared at line 5 (type: INT_TYPE) 
        FOR (uid: N49) inferred ret type: ROOT
          = (uid: N50) inferred ret type: INT_TYPE(type: INT_TYPE) 
            ID (uid: N51) inferred ret type: INT_TYPEi [scope (1,0) <- (0,0)] declared at line 5 (type: INT_TYPE) 
            INT_LITERAL (uid: N52) inferred ret type: INT_TYPE0(type: INT_TYPE) 
          < (uid: N53) inferred ret type: INT_TYPE(type: INT_TYPE) 
            ID (uid: N54) inferred ret type: INT_TYPEi [scope (1,0) <- (0,0)] declared at line 5 (type: INT_TYPE) 
            INT_LITERAL (uid: N55) inferred ret type: INT_TYPE3(type: INT_TYPE) 
          = (uid: N56) inferred ret type: INT_TYPE(type: INT_TYPE) 
            ID (uid: N57) inferred ret type: INT_TYPEi [scope (1,0) <- (0,0)] declared at line 5 (type: INT_TYPE) 
            + (uid: N58) inferred ret type: INT_TYPE(type: INT_TYPE) 
              ID (uid: N59) inferred ret type: INT_TYPEi [scope (1,0) <- (0,0)] declared at line 5 (type: INT_TYPE) 
              INT_LITERAL (uid: N60) inferred ret type: INT_TYPE1(type: INT_TYPE) 
          SEQ (uid: N61) inferred ret type: ROOT
            LOCAL_DECLARATIONS (uid: N62) inferred ret type: ROOT
            STATEMENT_LIST (uid: N63) inferred ret type: ROOT
              PRINT (uid: N64) inferred ret type: ROOT
                ARRAY_TYPE (uid: N65) inferred ret type: INT_TYPEa [scope (2,1) <- (1,0)] declared at line 1 (type: INT_TYPE) 
                  ID (uid: N66) inferred ret type: INT_TYPEi [scope (2,1) <- (1,0)] declared at line 5 (type: INT_TYPE) 
              PRINT (uid: N67) inferred ret type: ROOT
                ARRAY_TYPE (uid: N68) inferred ret type: INT_TYPEb [scope (2,1) <- (1,0)] declared at line 5 (type: INT_TYPE) 
                  ID (uid: N69) inferred ret type: INT_TYPEi [scope (2,1) <- (1,0)] declared at line 5 (type: INT_TYPE) 
        RETURN (uid: N70) inferred ret type: ROOT[scope (1,0) <- (0,0)]return to main at line 3 
          INT_LITERAL (uid: N71) inferred ret type: INT_TYPE0(type: INT_TYPE) 
(0-0) contains:
  VAR_INT __0 (offset: 0 or addr: 0)
  VAR_INT __1 (offset: 0 or addr: 0)
  VAR_INT __3 (offset: 0 or addr: 0)
  VAR_INT __4 (offset: 0 or addr: 0)
There are 82 entries
0: (LABEL, main, -, -)
1: (ASSIGN, i, __0, -)
2: (LABEL, __L_12_FOR_BEGIN, -, -)
3: (ASSIGN, __T0, i, -)
4: (ASSIGN, __T1, __3, -)
5: (LT, __T2, __T0, __T1)
6: (ifTrue, __L_16_TRUE, __T2, -)
7: (ASSIGN, __T2, __0, -)
8: (GOTO, __L_16_DONE, -, -)
9: (LABEL, __L_16_TRUE, -, -)
10: (ASSIGN, __T2, __1, -)
11: (LABEL, __L_16_DONE, -, -)
12: (ifFalse, __L_12_FOR_END, __T2, -)
13: (MULT, __T3, i, __4)
14: (ADDR, __T4, a, -)
15: (ADD, __T5, __T4, __T3)
16: (ASSIGN, __T5, __0, -)
17: (MULT, __T7, i, __4)
18: (ADDR, __T8, b, -)
19: (SUB, __T9, __T8, __T7)
20: (ASSIGN, __T9, __0, -)
21: (ADD, __T11, i, __1)
22: (ASSIGN, i, __T11, -)
23: (GOTO, __L_12_FOR_BEGIN, -, -)
24: (LABEL, __L_12_FOR_END, -, -)
25: (ASSIGN, n, __1, -)
26: (INC, n, -, -)
27: (MULT, __T14, n, __4)
28: (ADDR, __T15, a, -)
29: (ADD, __T16, __T15, __T14)
30: (DEREF, __T13, __T16, -)
31: (MULT, __T18, n, __4)
32: (ADDR, __T19, a, -)
33: (ADD, __T20, __T19, __T18)
34: (MULT, __T24, n, __4)
35: (ADDR, __T25, a, -)
36: (ADD, __T26, __T25, __T24)
37: (DEREF, __T23, __T26, -)
38: (ADD, __T22, __T23, __1)
39: (ASSIGN, __T20, __T22, -)
40: (ASSIGN, n, __1, -)
41: (INC, n, -, -)
42: (MULT, __T30, n, __4)
43: (ADDR, __T31, b, -)
44: (SUB, __T32, __T31, __T30)
45: (DEREF, __T29, __T32, -)
46: (MULT, __T34, n, __4)
47: (ADDR, __T35, b, -)
48: (SUB, __T36, __T35, __T34)
49: (MULT, __T40, n, __4)
50: (ADDR, __T41, b, -)
51: (SUB, __T42, __T41, __T40)
52: (DEREF, __T39, __T42, -)
53: (ADD, __T38, __T39, __1)
54: (ASSIGN, __T36, __T38, -)
55: (ASSIGN, i, __0, -)
56: (LABEL, __L_49_FOR_BEGIN, -, -)
57: (ASSIGN, __T44, i, -)
58: (ASSIGN, __T45, __3, -)
59: (LT, __T46, __T44, __T45)
60: (ifTrue, __L_53_TRUE, __T46, -)
61: (ASSIGN, __T46, __0, -)
62: (GOTO, __L_53_DONE, -, -)
63: (LABEL, __L_53_TRUE, -, -)
64: (ASSIGN, __T46, __1, -)
65: (LABEL, __L_53_DONE, -, -)
66: (ifFalse, __L_49_FOR_END, __T46, -)
67: (MULT, __T48, i, __4)
68: (ADDR, __T49, a, -)
69: (ADD, __T50, __T49, __T48)
70: (DEREF, __T47, __T50, -)
71: (PRINT, __T47, -, -)
72: (MULT, __T53, i, __4)
73: (ADDR, __T54, b, -)
74: (SUB, __T55, __T54, __T53)
75: (DEREF, __T52, __T55, -)
76: (PRINT, __T52, -, -)
77: (ADD, __T57, i, __1)
78: (ASSIGN, i, __T57, -)
79: (GOTO, __L_49_FOR_BEGIN, -, -)
80: (LABEL, __L_49_FOR_END, -, -)
81: (RETURN, __0, -, -)
i -24
n -28
in var array 

Print hashtables (level-sibno) according to their hierarchy
(0-0) contains:
  FUNC_INT main (0 params:)space needed: 28
  VAR_ARRAY_INT a (length: 3, offset: 0 or addr: 2724)
  (1-0) contains:
    VAR_ARRAY_INT b (length: 3, offset: -8 or addr: 0)
    VAR_INT i (offset: -20 or addr: 0)
    VAR_INT n (offset: -24 or addr: 0)
    (2-0) contains:
    (2-1) contains:


===========================================================
inc.c finished.
