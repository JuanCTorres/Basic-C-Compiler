#END OF PROG: 964

.pos 0
	irmovl stack, %esp
	irmovl stack, %ebp
	call main
	halt
.pos 0x14
#(LABEL, myfunc, -, -)
myfunc:

	irmovl 20, %ecx
	subl %ecx, %esp
#NUM PARAMS: 2
	mrmovl 4(%ebp), %eax
	rmmovl %eax, -8(%ebp)
	mrmovl 8(%ebp), %eax
	rmmovl %eax, -12(%ebp)
#(ASSIGN, c, __9, -)
	irmovl 9, %eax
	rmmovl %eax, -16(%ebp)
#(PRINT, c, -, -)
	mrmovl -16(%ebp), %edx
	rmmovl %edx, 0x00FFFE14
#(ADD, __T0, a, b)
	mrmovl -8(%ebp), %eax
	mrmovl -12(%ebp), %ecx
	addl %ecx, %eax
	rmmovl %eax, 984

#(ASSIGN, a, __T0, -)
	mrmovl 984, %eax
	rmmovl %eax, -8(%ebp)
#(PRINT, a, -, -)
	mrmovl -8(%ebp), %edx
	rmmovl %edx, 0x00FFFE14
#(RETURN, __999, -, -)
	irmovl 999, %edi
	rrmovl %ebp, %esp
	popl %ebp
	irmovl -8, %ecx
	addl %ecx, %esp
	ret
#(LABEL, main, -, -)
main:

	irmovl 0, %ecx
	subl %ecx, %esp
#NUM PARAMS: 0
#(EQ, __T4, __1, __1)
	irmovl 1, %eax
	irmovl 1, %ecx
	subl %ecx, %eax
	rmmovl %eax, 1000
#(ifTrue, __L_31_TRUE, __T4, -)
	je L_31_TRUE
#(ASSIGN, __T4, __0, -)
	irmovl 0, %eax
	rmmovl %eax, 1000
#(GOTO, __L_31_DONE, -, -)
	jmp L_31_DONE
#(LABEL, __L_31_TRUE, -, -)
L_31_TRUE:

#(ASSIGN, __T4, __1, -)
	irmovl 1, %eax
	rmmovl %eax, 1000
#(LABEL, __L_31_DONE, -, -)
L_31_DONE:

#(ASSIGN, __T1, __T4, -)
	mrmovl 1000, %eax
	rmmovl %eax, 988
#(ifFalse, __L_30_FI, __T1, -)
	mrmovl 988, %eax
	irmovl 0, %ecx
	subl %ecx, %eax
	je L_30_FI
#(ASSIGN, a, __333, -)
	irmovl 333, %eax
	rmmovl %eax, 0(%ebp)
#(PRINT, a, -, -)
	mrmovl 0(%ebp), %edx
	rmmovl %edx, 0x00FFFE14
#(LABEL, __L_30_FI, -, -)
L_30_FI:

#(ASSIGN, a, __1, -)
	irmovl 1, %eax
	rmmovl %eax, 1020
#(ASSIGN, c, __11, -)
	irmovl 11, %eax
	rmmovl %eax, 1028
#(ASSIGN, __T5, __3, -)
	irmovl 3, %eax
	rmmovl %eax, 1004
#(PUSH, __T5, -, -)
	mrmovl 1004, %eax
	pushl %eax
#(ASSIGN, __T6, __4, -)
	irmovl 4, %eax
	rmmovl %eax, 1008
#(PUSH, __T6, -, -)
	mrmovl 1008, %eax
	pushl %eax
#(PRECALL, myfunc, -, -)
	pushl %ebp
	rrmovl %esp, %ebp
#(CALL, myfunc, -, -)
	call myfunc
#(POSTCALL, myfunc, -, -)
	irmovl 24, %ecx
	rrmovl %ebp, %esp
	addl %ecx, %esp
#(PRINT, a, -, -)
	mrmovl 1020, %edx
	rmmovl %edx, 0x00FFFE14
#(PRINT, c, -, -)
	mrmovl 1028, %edx
	rmmovl %edx, 0x00FFFE14
#(RETURN, __0, -, -)
	irmovl 0, %edi
	rrmovl %ebp, %esp
	popl %ebp
	irmovl -8, %ecx
	addl %ecx, %esp
	ret
.pos 0x3f8    #Start of string space

.pos 0x3fc   # Start of global var space 
	.long 0x00000000
	.long 0x00000000
	.long 0x00000000
.pos 0x0000FFFC
stack:
