

 #This function has locals 



 #This function has locals 

#END OF PROG: 3392

.pos 0
	irmovl stack, %esp
	irmovl stack, %ebp
	call main
	halt
.pos 0x14
#(LABEL, my_func, -, -)
my_func:

	irmovl 32, %ecx
	subl %ecx, %esp
#NUM PARAMS: 2
	mrmovl 4(%ebp), %eax
	rmmovl %eax, -8(%ebp)
	mrmovl 8(%ebp), %eax
	rmmovl %eax, -12(%ebp)
#(ADD, __T0, f, __4)
	mrmovl -20(%ebp), %eax
	irmovl 4, %ecx
	addl %ecx, %eax
	rmmovl %eax, 3412

#(ASSIGN, e, __T0, -)
	mrmovl 3412, %eax
	rmmovl %eax, -16(%ebp)
#(RETURN, __void, -, -)
	irmovl 0, %edi
	rrmovl %ebp, %esp
	popl %ebp
	irmovl -8, %ecx
	addl %ecx, %esp
	ret
#(LABEL, my_new_f, -, -)
my_new_f:

	irmovl 12, %ecx
	subl %ecx, %esp
#NUM PARAMS: 0
#(LABEL, main, -, -)
main:

	irmovl 24, %ecx
	subl %ecx, %esp
#NUM PARAMS: 0
#(ASSIGN, b, __1, -)
	irmovl 1, %eax
	rmmovl %eax, -12(%ebp)
#(ASSIGN, c, __2, -)
	irmovl 2, %eax
	rmmovl %eax, -16(%ebp)
#(ASSIGN, d, __3, -)
	irmovl 3, %eax
	rmmovl %eax, -20(%ebp)
#(ASSIGN, __T2, a, -)
	mrmovl -8(%ebp), %eax
	rmmovl %eax, 3420
#(ASSIGN, __T3, __1, -)
	irmovl 1, %eax
	rmmovl %eax, 3424
#(EQ, __T4, __T2, __T3)
	mrmovl 3420, %eax
	mrmovl 3424, %ecx
	subl %ecx, %eax
	rmmovl %eax, 3428
#(ifTrue, __L_45_TRUE, __T4, -)
	je L_45_TRUE
#(ASSIGN, __T4, __0, -)
	irmovl 0, %eax
	rmmovl %eax, 3428
#(GOTO, __L_45_DONE, -, -)
	jmp L_45_DONE
#(LABEL, __L_45_TRUE, -, -)
L_45_TRUE:

#(ASSIGN, __T4, __1, -)
	irmovl 1, %eax
	rmmovl %eax, 3428
#(LABEL, __L_45_DONE, -, -)
L_45_DONE:

#(ASSIGN, __T1, __T4, -)
	mrmovl 3428, %eax
	rmmovl %eax, 3416
#(ifFalse, __L_44_FI, __T1, -)
	mrmovl 3416, %eax
	irmovl 0, %ecx
	subl %ecx, %eax
	je L_44_FI
#(ASSIGN, b, __1, -)
	irmovl 1, %eax
	rmmovl %eax, -12(%ebp)
#(LABEL, __L_44_FI, -, -)
L_44_FI:

#(ASSIGN, __T6, b, -)
	mrmovl -12(%ebp), %eax
	rmmovl %eax, 3436
#(ASSIGN, __T7, __1, -)
	irmovl 1, %eax
	rmmovl %eax, 3440
#(EQ, __T8, __T6, __T7)
	mrmovl 3436, %eax
	mrmovl 3440, %ecx
	subl %ecx, %eax
	rmmovl %eax, 3444
#(ifTrue, __L_55_TRUE, __T8, -)
	je L_55_TRUE
#(ASSIGN, __T8, __0, -)
	irmovl 0, %eax
	rmmovl %eax, 3444
#(GOTO, __L_55_DONE, -, -)
	jmp L_55_DONE
#(LABEL, __L_55_TRUE, -, -)
L_55_TRUE:

#(ASSIGN, __T8, __1, -)
	irmovl 1, %eax
	rmmovl %eax, 3444
#(LABEL, __L_55_DONE, -, -)
L_55_DONE:

#(ASSIGN, __T5, __T8, -)
	mrmovl 3444, %eax
	rmmovl %eax, 3432
#(ifFalse, __L_54_ELSE, __T5, -)
	mrmovl 3432, %eax
	irmovl 0, %ecx
	subl %ecx, %eax
	je L_54_ELSE
#(ASSIGN, c, __2, -)
	irmovl 2, %eax
	rmmovl %eax, -16(%ebp)
#(ASSIGN, d, __4, -)
	irmovl 4, %eax
	rmmovl %eax, -20(%ebp)
#(ADD, __T9, a, b)
	mrmovl -8(%ebp), %eax
	mrmovl -12(%ebp), %ecx
	addl %ecx, %eax
	rmmovl %eax, 3448

#(GOTO, __L_54_FI, -, -)
	jmp L_54_FI
#(LABEL, __L_54_ELSE, -, -)
L_54_ELSE:

#(ASSIGN, c, __3, -)
	irmovl 3, %eax
	rmmovl %eax, -16(%ebp)
#(ASSIGN, b, __2, -)
	irmovl 2, %eax
	rmmovl %eax, -12(%ebp)
#(ASSIGN, d, __1, -)
	irmovl 1, %eax
	rmmovl %eax, -20(%ebp)
#(ADD, __T10, d, b)
	mrmovl -20(%ebp), %eax
	mrmovl -12(%ebp), %ecx
	addl %ecx, %eax
	rmmovl %eax, 3452

#(ASSIGN, a, __T10, -)
	mrmovl 3452, %eax
	rmmovl %eax, -8(%ebp)
#(LABEL, __L_54_FI, -, -)
L_54_FI:

#(LABEL, __L_87_DO_WHILE_BEGIN, -, -)
L_87_DO_WHILE_BEGIN:

#(ASSIGN, a, __3, -)
	irmovl 3, %eax
	rmmovl %eax, -8(%ebp)
#(ASSIGN, __T11, b, -)
	mrmovl -12(%ebp), %eax
	rmmovl %eax, 3456
#(ASSIGN, __T12, __3, -)
	irmovl 3, %eax
	rmmovl %eax, 3460
#(EQ, __T13, __T11, __T12)
	mrmovl 3456, %eax
	mrmovl 3460, %ecx
	subl %ecx, %eax
	rmmovl %eax, 3464
#(ifTrue, __L_88_TRUE, __T13, -)
	je L_88_TRUE
#(ASSIGN, __T13, __0, -)
	irmovl 0, %eax
	rmmovl %eax, 3464
#(GOTO, __L_88_DONE, -, -)
	jmp L_88_DONE
#(LABEL, __L_88_TRUE, -, -)
L_88_TRUE:

#(ASSIGN, __T13, __1, -)
	irmovl 1, %eax
	rmmovl %eax, 3464
#(LABEL, __L_88_DONE, -, -)
L_88_DONE:

#(ifTrue, __L_87_DO_WHILE_BEGIN, __T13, -)
	mrmovl 3464, %eax
	irmovl 0, %ecx
	subl %ecx, %eax
	jne L_87_DO_WHILE_BEGIN
#(ASSIGN, __T14, __1, -)
	irmovl 1, %eax
	rmmovl %eax, 3468
#(LABEL, __L_97_FOR_BEGIN, -, -)
L_97_FOR_BEGIN:

#(ASSIGN, __T15, __1, -)
	irmovl 1, %eax
	rmmovl %eax, 3472
#(ifFalse, __L_97_FOR_END, __T15, -)
	mrmovl 3472, %eax
	irmovl 0, %ecx
	subl %ecx, %eax
	je L_97_FOR_END
#(ASSIGN, b, __3, -)
	irmovl 3, %eax
	rmmovl %eax, -12(%ebp)
#(ASSIGN, b, __3, -)
	irmovl 3, %eax
	rmmovl %eax, -12(%ebp)
#(ASSIGN, b, __3, -)
	irmovl 3, %eax
	rmmovl %eax, -12(%ebp)
#(ASSIGN, b, __3, -)
	irmovl 3, %eax
	rmmovl %eax, -12(%ebp)
#(ASSIGN, b, __3, -)
	irmovl 3, %eax
	rmmovl %eax, -12(%ebp)
#(ASSIGN, __T16, __1, -)
	irmovl 1, %eax
	rmmovl %eax, 3476
#(GOTO, __L_97_FOR_BEGIN, -, -)
	jmp L_97_FOR_BEGIN
#(LABEL, __L_97_FOR_END, -, -)
L_97_FOR_END:

#(PRINT, alygljkglkug, -, -)
	irmovl 3612, %edx
	rmmovl %edx, 0x00FFFE10
#(MULT, __T17, a, b)
	mrmovl -8(%ebp), %eax
	mrmovl -12(%ebp), %ecx
	mull %ecx, %eax
	rmmovl %eax, 3480

#(PRINT, __T17, -, -)
	mrmovl 3480, %edx
	rmmovl %edx, 0x00FFFE14
#(PRINT, c, -, -)
	mrmovl -16(%ebp), %edx
	rmmovl %edx, 0x00FFFE14
#(PRINT, diz_gloval_var, -, -)
	mrmovl 3648, %edx
	rmmovl %edx, 0x00FFFE14
#(ADD, __T18, b, __3)
	mrmovl -12(%ebp), %eax
	irmovl 3, %ecx
	addl %ecx, %eax
	rmmovl %eax, 3484

#(ADD, __T19, __T18, d)
	mrmovl 3484, %eax
	mrmovl -20(%ebp), %ecx
	addl %ecx, %eax
	rmmovl %eax, 3488

#(ASSIGN, __T20, __T19, -)
	mrmovl 3488, %eax
	rmmovl %eax, 3492
#(PUSH, __T20, -, -)
	mrmovl 3492, %eax
	pushl %eax
#(ASSIGN, __T21, c, -)
	mrmovl -16(%ebp), %eax
	rmmovl %eax, 3496
#(PUSH, __T21, -, -)
	mrmovl 3496, %eax
	pushl %eax
#(PRECALL, my_func, -, -)
	pushl %ebp
	rrmovl %esp, %ebp
#(CALL, my_func, -, -)
	call my_func
#(POSTCALL, my_func, -, -)
	irmovl 36, %ecx
	rrmovl %ebp, %esp
	addl %ecx, %esp
#(ASSIGN, d, __7, -)
	irmovl 7, %eax
	rmmovl %eax, -20(%ebp)
#(ADD, __T22, a, c)
	mrmovl -8(%ebp), %eax
	mrmovl -16(%ebp), %ecx
	addl %ecx, %eax
	rmmovl %eax, 3500

#(ADD, __T23, d, b)
	mrmovl -20(%ebp), %eax
	mrmovl -12(%ebp), %ecx
	addl %ecx, %eax
	rmmovl %eax, 3504

#(ASSIGN, __T24, __T23, -)
	mrmovl 3504, %eax
	rmmovl %eax, 3508
#(ASSIGN, __T25, __2, -)
	irmovl 2, %eax
	rmmovl %eax, 3512
#(EQ, __T26, __T24, __T25)
	mrmovl 3508, %eax
	mrmovl 3512, %ecx
	subl %ecx, %eax
	rmmovl %eax, 3516
#(ifTrue, __L_143_TRUE, __T26, -)
	je L_143_TRUE
#(ASSIGN, __T26, __0, -)
	irmovl 0, %eax
	rmmovl %eax, 3516
#(GOTO, __L_143_DONE, -, -)
	jmp L_143_DONE
#(LABEL, __L_143_TRUE, -, -)
L_143_TRUE:

#(ASSIGN, __T26, __1, -)
	irmovl 1, %eax
	rmmovl %eax, 3516
#(LABEL, __L_143_DONE, -, -)
L_143_DONE:

#(MULT, __T28, __3, __4)
	irmovl 3, %eax
	irmovl 4, %ecx
	mull %ecx, %eax
	rmmovl %eax, 3524

#(ADDR, __T29, b, -)
	irmovl -12, %eax
	addl %ebp, %eax
	rmmovl %eax, 3528
#(SUB, __T30, __T29, __T28)
	mrmovl 3528, %eax
	mrmovl 3524, %ecx
	subl %ecx, %eax
	rmmovl %eax, 3532

#(DEREF, __T27, __T30, -)
	mrmovl 3532, %ecx
	mrmovl (%ecx), %eax
	rmmovl %eax, 3520
#(MULT, __T33, __3, __4)
	irmovl 3, %eax
	irmovl 4, %ecx
	mull %ecx, %eax
	rmmovl %eax, 3544

#(ADDR, __T34, b, -)
	irmovl -12, %eax
	addl %ebp, %eax
	rmmovl %eax, 3548
#(SUB, __T35, __T34, __T33)
	mrmovl 3548, %eax
	mrmovl 3544, %ecx
	subl %ecx, %eax
	rmmovl %eax, 3552

#(DEREF, __T32, __T35, -)
	mrmovl 3552, %ecx
	mrmovl (%ecx), %eax
	rmmovl %eax, 3540
#(ADD, __T37, a, __T32)
	mrmovl -8(%ebp), %eax
	mrmovl 3540, %ecx
	addl %ecx, %eax
	rmmovl %eax, 3560

#(MULT, __T39, __5, __4)
	irmovl 5, %eax
	irmovl 4, %ecx
	mull %ecx, %eax
	rmmovl %eax, 3568

#(ADDR, __T40, b, -)
	irmovl -12, %eax
	addl %ebp, %eax
	rmmovl %eax, 3572
#(SUB, __T41, __T40, __T39)
	mrmovl 3572, %eax
	mrmovl 3568, %ecx
	subl %ecx, %eax
	rmmovl %eax, 3576

#(DEREF, __T38, __T41, -)
	mrmovl 3576, %ecx
	mrmovl (%ecx), %eax
	rmmovl %eax, 3564
#(MULT, __T44, __5, __4)
	irmovl 5, %eax
	irmovl 4, %ecx
	mull %ecx, %eax
	rmmovl %eax, 3588

#(ADDR, __T45, b, -)
	irmovl -12, %eax
	addl %ebp, %eax
	rmmovl %eax, 3592
#(SUB, __T46, __T45, __T44)
	mrmovl 3592, %eax
	mrmovl 3588, %ecx
	subl %ecx, %eax
	rmmovl %eax, 3596

#(DEREF, __T43, __T46, -)
	mrmovl 3596, %ecx
	mrmovl (%ecx), %eax
	rmmovl %eax, 3584
#(ADD, __T48, a, __T43)
	mrmovl -8(%ebp), %eax
	mrmovl 3584, %ecx
	addl %ecx, %eax
	rmmovl %eax, 3604

#(RETURN, __0, -, -)
	irmovl 0, %edi
	rrmovl %ebp, %esp
	popl %ebp
	irmovl -8, %ecx
	addl %ecx, %esp
	ret
.pos 0xe1c    #qwerty

	.byte 	0x61

	.byte 	0x6c

	.byte 	0x79

	.byte 	0x67

	.byte 	0x6c

	.byte 	0x6a

	.byte 	0x6b

	.byte 	0x67

	.byte 	0x6c

	.byte 	0x6b

	.byte 	0x75

	.byte 	0x67

	.byte 	0x0

.pos 0xe3c   # Start of global var space 
	.long 0x00000000
	.long 0x00000000
	.long 0x00000000
.pos 0x0000FFFC
stack:
