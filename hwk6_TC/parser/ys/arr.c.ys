

 #This function has locals 

#END OF PROG: 1504

.pos 0
	irmovl stack, %esp
	irmovl stack, %ebp
	call main
	halt
.pos 0x14
#(LABEL, fun2, -, -)
fun2:

	irmovl 12, %ecx
	subl %ecx, %esp
#NUM PARAMS: 1
	mrmovl 4(%ebp), %eax
	rmmovl %eax, -8(%ebp)
#(MULT, __T0, __1, __4)
	irmovl 1, %eax
	irmovl 8, %ecx
	mull %ecx, %eax
	rmmovl %eax, 1524

#(ADDR, __T1, a, -)
	irmovl -8, %eax
	addl %ebp, %eax
	rmmovl %eax, 1528
#(SUB, __T2, __T1, __T0)
	mrmovl 1528, %eax
	mrmovl 1524, %ecx
	subl %ecx, %eax
	rmmovl %eax, 1532

#(ASSIGN, __T2, __17, -)
	irmovl 17, %eax
	mrmovl 1532, %ecx
	rmmovl %eax, (%ecx)#(RETURN, __void, -, -)
	irmovl 0, %edi
	rrmovl %ebp, %esp
	popl %ebp
	irmovl -8, %ecx
	addl %ecx, %esp
	ret
#(LABEL, fun1, -, -)
fun1:

	irmovl 24, %ecx
	subl %ecx, %esp
#NUM PARAMS: 1
	mrmovl 4(%ebp), %eax
	rmmovl %eax, -8(%ebp)
#(MULT, __T4, __1, __4)
	irmovl 1, %eax
	irmovl 8, %ecx
	mull %ecx, %eax
	rmmovl %eax, 1540

#(ADDR, __T5, c, -)
	irmovl -12, %eax
	addl %ebp, %eax
	rmmovl %eax, 1544
#(SUB, __T6, __T5, __T4)
	mrmovl 1544, %eax
	mrmovl 1540, %ecx
	subl %ecx, %eax
	rmmovl %eax, 1548

#(ASSIGN, __T6, __0, -)
	irmovl 0, %eax
	mrmovl 1548, %ecx
	rmmovl %eax, (%ecx)#(ASSIGN, __T8, c, -)
	mrmovl -12(%ebp), %eax
	rmmovl %eax, 1556
#(PUSH, __T8, -, -)
	mrmovl 1556, %eax
	pushl %eax
#(PRECALL, fun2, -, -)
	pushl %ebp
	rrmovl %esp, %ebp
#(CALL, fun2, -, -)
	call fun2
#(POSTCALL, fun2, -, -)
	irmovl 16, %ecx
	rrmovl %ebp, %esp
	addl %ecx, %esp
#(MULT, __T10, __1, __4)
	irmovl 1, %eax
	irmovl 8, %ecx
	mull %ecx, %eax
	rmmovl %eax, 1564

#(ADDR, __T11, c, -)
	irmovl -12, %eax
	addl %ebp, %eax
	rmmovl %eax, 1568
#(SUB, __T12, __T11, __T10)
	mrmovl 1568, %eax
	mrmovl 1564, %ecx
	subl %ecx, %eax
	rmmovl %eax, 1572

#(DEREF, __T9, __T12, -)
	mrmovl 1572, %ecx
	mrmovl (%ecx), %eax
	rmmovl %eax, 1560
#(PRINT, __T9, -, -)
	mrmovl 1560, %edx
	rmmovl %edx, 0x00FFFE14
#(MULT, __T14, __2, __4)
	irmovl 2, %eax
	irmovl 8, %ecx
	mull %ecx, %eax
	rmmovl %eax, 1580

#(ADDR, __T15, a, -)
	irmovl -8, %eax
	addl %ebp, %eax
	rmmovl %eax, 1584
#(SUB, __T16, __T15, __T14)
	mrmovl 1584, %eax
	mrmovl 1580, %ecx
	subl %ecx, %eax
	rmmovl %eax, 1588

#(ASSIGN, __T16, __23, -)
	irmovl 23, %eax
	mrmovl 1588, %ecx
	rmmovl %eax, (%ecx)#(RETURN, __32, -, -)
	irmovl 32, %edi
	rrmovl %ebp, %esp
	popl %ebp
	irmovl -8, %ecx
	addl %ecx, %esp
	ret
#(LABEL, main, -, -)
main:

	irmovl 32, %ecx
	subl %ecx, %esp
#NUM PARAMS: 0
#(ASSIGN, __T18, glob, -)
	mrmovl -8(%ebp), %eax
	rmmovl %eax, 1596
#(PUSH, __T18, -, -)
	mrmovl 1596, %eax
	pushl %eax
#(PRECALL, fun1, -, -)
	pushl %ebp
	rrmovl %esp, %ebp
#(CALL, fun1, -, -)
	call fun1
#(POSTCALL, fun1, -, -)
	irmovl 28, %ecx
	rrmovl %ebp, %esp
	addl %ecx, %esp
#(ASSIGN, y, __RET_INT, -)
	rrmovl %edi, %eax
	rmmovl %eax, -16(%ebp)
#(MULT, __T20, __2, __4)
	irmovl 2, %eax
	irmovl 8, %ecx
	mull %ecx, %eax
	rmmovl %eax, 1604

#(ADDR, __T21, glob, -)
	irmovl -8, %eax
	addl %ebp, %eax
	rmmovl %eax, 1608
#(SUB, __T22, __T21, __T20)
	mrmovl 1608, %eax
	mrmovl 1604, %ecx
	subl %ecx, %eax
	rmmovl %eax, 1612

#(DEREF, __T19, __T22, -)
	mrmovl 1612, %ecx
	mrmovl (%ecx), %eax
	rmmovl %eax, 1600
#(PRINT, __T19, -, -)
	mrmovl 1600, %edx
	rmmovl %edx, 0x00FFFE14
#(ASSIGN, __T24, la, -)
	mrmovl -20(%ebp), %eax
	rmmovl %eax, 1620
#(PUSH, __T24, -, -)
	mrmovl 1620, %eax
	pushl %eax
#(PRECALL, fun1, -, -)
	pushl %ebp
	rrmovl %esp, %ebp
#(CALL, fun1, -, -)
	call fun1
#(POSTCALL, fun1, -, -)
	irmovl 28, %ecx
	rrmovl %ebp, %esp
	addl %ecx, %esp
#(ASSIGN, y, __RET_INT, -)
	rrmovl %edi, %eax
	rmmovl %eax, -16(%ebp)
#(MULT, __T26, __2, __4)
	irmovl 2, %eax
	irmovl 8, %ecx
	mull %ecx, %eax
	rmmovl %eax, 1628

#(ADDR, __T27, la, -)
	irmovl -20, %eax
	addl %ebp, %eax
	rmmovl %eax, 1632
#(SUB, __T28, __T27, __T26)
	mrmovl 1632, %eax
	mrmovl 1628, %ecx
	subl %ecx, %eax
	rmmovl %eax, 1636

#(DEREF, __T25, __T28, -)
	mrmovl 1636, %ecx
	mrmovl (%ecx), %eax
	rmmovl %eax, 1624
#(PRINT, __T25, -, -)
	mrmovl 1624, %edx
	rmmovl %edx, 0x00FFFE14
#(RETURN, __123, -, -)
	irmovl 123, %edi
	rrmovl %ebp, %esp
	popl %ebp
	irmovl -8, %ecx
	addl %ecx, %esp
	ret

.pos 0x674   # Start of global var space 
	.long 0x00000000
	.long 0x00000000
	.long 0x00000000
.pos 0x0000FFFC
stack:
