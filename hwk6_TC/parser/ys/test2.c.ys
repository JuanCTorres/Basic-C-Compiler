

 #This function has locals 



 #This function has locals 

#END OF PROG: 2612

.pos 0
	irmovl stack, %esp
	irmovl stack, %ebp
	call main
	halt
.pos 0x14
#(LABEL, my_func, -, -)
my_func:

	irmovl 16, %ecx
	subl %ecx, %esp
#NUM PARAMS: 2
	mrmovl 4(%ebp), %eax
	rmmovl %eax, -8(%ebp)
	mrmovl 8(%ebp), %eax
	rmmovl %eax, -12(%ebp)
#(ADD, __T0, q, b)
	mrmovl -12(%ebp), %eax
	mrmovl -8(%ebp), %ecx
	addl %ecx, %eax
	rmmovl %eax, 2632

#(PRINT, __T0, -, -)
	mrmovl 2632, %edx
	rmmovl %edx, 0x00FFFE14
#(RETURN, __12345, -, -)
	irmovl 12345, %edi
	rrmovl %ebp, %esp
	popl %ebp
	irmovl -8, %ecx
	addl %ecx, %esp
	ret
#(LABEL, your_func, -, -)
your_func:

	irmovl 16, %ecx
	subl %ecx, %esp
#NUM PARAMS: 0
#(PRINT, LOL!\n, -, -)
	irmovl 2752, %edx
	rmmovl %edx, 0x00FFFE10
#(RETURN, __void, -, -)
	irmovl 0, %edi
	rrmovl %ebp, %esp
	popl %ebp
	irmovl -8, %ecx
	addl %ecx, %esp
	ret
#(LABEL, main, -, -)
main:

	irmovl 48, %ecx
	subl %ecx, %esp
#NUM PARAMS: 0
#(DIV, __T1, __4, __5)
	irmovl 4, %eax
	irmovl 5, %ecx
	divl %ecx, %eax
	rmmovl %eax, 2636

#(NEG, __T2, __T1, -)
	mrmovl 2636, %ecx
	irmovl 0, %eax
	subl %ecx, %eax
	rmmovl %eax, 2640
#(ASSIGN, y, __T2, -)
	mrmovl 2640, %eax
	rmmovl %eax, -28(%ebp)
#(ASSIGN, t, y, -)
	mrmovl -28(%ebp), %eax
	rmmovl %eax, -12(%ebp)
#(ASSIGN, a, t, -)
	mrmovl -12(%ebp), %eax
	rmmovl %eax, -8(%ebp)
#(GT, __T6, a, __10)
	mrmovl -8(%ebp), %eax
	irmovl 10, %ecx
	subl %ecx, %eax
	rmmovl %eax, 2656
#(ifTrue, __L_48_TRUE, __T6, -)
	jg L_48_TRUE
#(ASSIGN, __T6, __0, -)
	irmovl 0, %eax
	rmmovl %eax, 2656
#(GOTO, __L_48_DONE, -, -)
	jmp L_48_DONE
#(LABEL, __L_48_TRUE, -, -)
L_48_TRUE:

#(ASSIGN, __T6, __1, -)
	irmovl 1, %eax
	rmmovl %eax, 2656
#(LABEL, __L_48_DONE, -, -)
L_48_DONE:

#(ASSIGN, __T3, __T6, -)
	mrmovl 2656, %eax
	rmmovl %eax, 2644
#(ifFalse, __L_47_ELSE, __T3, -)
	mrmovl 2644, %eax
	irmovl 0, %ecx
	subl %ecx, %eax
	je L_47_ELSE
#(ASSIGN, __T7, __1, -)
	irmovl 1, %eax
	rmmovl %eax, 2660
#(ifFalse, __L_54_ELSE, __T7, -)
	mrmovl 2660, %eax
	irmovl 0, %ecx
	subl %ecx, %eax
	je L_54_ELSE
#(LABEL, __L_59_DO_WHILE_BEGIN, -, -)
L_59_DO_WHILE_BEGIN:

#(ASSIGN, a, __3, -)
	irmovl 3, %eax
	rmmovl %eax, -8(%ebp)
#(ASSIGN, a, __4, -)
	irmovl 4, %eax
	rmmovl %eax, -8(%ebp)
#(ASSIGN, t, __3, -)
	irmovl 3, %eax
	rmmovl %eax, -12(%ebp)
#(MULT, __T8, a, t)
	mrmovl -8(%ebp), %eax
	mrmovl -12(%ebp), %ecx
	mull %ecx, %eax
	rmmovl %eax, 2664

#(SUB, __T9, t, u)
	mrmovl -12(%ebp), %eax
	mrmovl -16(%ebp), %ecx
	subl %ecx, %eax
	rmmovl %eax, 2668

#(MULT, __T10, a, __T9)
	mrmovl -8(%ebp), %eax
	mrmovl 2668, %ecx
	mull %ecx, %eax
	rmmovl %eax, 2672

#(DIV, __T11, __T10, w)
	mrmovl 2672, %eax
	mrmovl -24(%ebp), %ecx
	divl %ecx, %eax
	rmmovl %eax, 2676

#(NEQ, __T14, __T11, __10)
	mrmovl 2676, %eax
	irmovl 10, %ecx
	subl %ecx, %eax
	rmmovl %eax, 2688
#(ifTrue, __L_60_TRUE, __T14, -)
	jne L_60_TRUE
#(ASSIGN, __T14, __0, -)
	irmovl 0, %eax
	rmmovl %eax, 2688
#(GOTO, __L_60_DONE, -, -)
	jmp L_60_DONE
#(LABEL, __L_60_TRUE, -, -)
L_60_TRUE:

#(ASSIGN, __T14, __1, -)
	irmovl 1, %eax
	rmmovl %eax, 2688
#(LABEL, __L_60_DONE, -, -)
L_60_DONE:

#(ifTrue, __L_59_DO_WHILE_BEGIN, __T14, -)
	mrmovl 2688, %eax
	irmovl 0, %ecx
	subl %ecx, %eax
	jne L_59_DO_WHILE_BEGIN
#(GOTO, __L_54_FI, -, -)
	jmp L_54_FI
#(LABEL, __L_54_ELSE, -, -)
L_54_ELSE:

#(PRINT, not\n, -, -)
	irmovl 2776, %edx
	rmmovl %edx, 0x00FFFE10
#(LABEL, __L_54_FI, -, -)
L_54_FI:

#(GOTO, __L_47_FI, -, -)
	jmp L_47_FI
#(LABEL, __L_47_ELSE, -, -)
L_47_ELSE:

#(ASSIGN, qwert, __123, -)
	irmovl 123, %eax
	rmmovl %eax, -44(%ebp)
#(ASSIGN, t, __0, -)
	irmovl 0, %eax
	rmmovl %eax, -12(%ebp)
#(LABEL, __L_95_FOR_BEGIN, -, -)
L_95_FOR_BEGIN:

#(LT, __T17, t, __99)
	mrmovl -12(%ebp), %eax
	irmovl 99, %ecx
	subl %ecx, %eax
	rmmovl %eax, 2700
#(ifTrue, __L_99_TRUE, __T17, -)
	jl L_99_TRUE
#(ASSIGN, __T17, __0, -)
	irmovl 0, %eax
	rmmovl %eax, 2700
#(GOTO, __L_99_DONE, -, -)
	jmp L_99_DONE
#(LABEL, __L_99_TRUE, -, -)
L_99_TRUE:

#(ASSIGN, __T17, __1, -)
	irmovl 1, %eax
	rmmovl %eax, 2700
#(LABEL, __L_99_DONE, -, -)
L_99_DONE:

#(ifFalse, __L_95_FOR_END, __T17, -)
	mrmovl 2700, %eax
	irmovl 0, %ecx
	subl %ecx, %eax
	je L_95_FOR_END
#(ASSIGN, y, u, -)
	mrmovl -16(%ebp), %eax
	rmmovl %eax, -28(%ebp)
#(ASSIGN, a, y, -)
	mrmovl -28(%ebp), %eax
	rmmovl %eax, -8(%ebp)
#(ASSIGN, a, w, -)
	mrmovl -24(%ebp), %eax
	rmmovl %eax, -8(%ebp)
#(ASSIGN, y, a, -)
	mrmovl -8(%ebp), %eax
	rmmovl %eax, -28(%ebp)
#(PRINT, in for loop\n, -, -)
	irmovl 2760, %edx
	rmmovl %edx, 0x00FFFE10
#(INC, __T18, t, -)
	mrmovl -12(%ebp), %eax
	irmovl 1, %ecx
	addl %ecx, %eax
	rmmovl %eax, -12(%ebp)
#(GOTO, __L_95_FOR_BEGIN, -, -)
	jmp L_95_FOR_BEGIN
#(LABEL, __L_95_FOR_END, -, -)
L_95_FOR_END:

#(LABEL, __L_47_FI, -, -)
L_47_FI:

#(PRECALL, your_func, -, -)
	pushl %ebp
	rrmovl %esp, %ebp
#(CALL, your_func, -, -)
	call your_func
#(POSTCALL, your_func, -, -)
	irmovl 20, %ecx
	rrmovl %ebp, %esp
	addl %ecx, %esp
#(MULT, __T19, __2, a)
	irmovl 2, %eax
	mrmovl -8(%ebp), %ecx
	mull %ecx, %eax
	rmmovl %eax, 2708

#(ASSIGN, w, __T19, -)
	mrmovl 2708, %eax
	rmmovl %eax, -24(%ebp)
#(ASSIGN, __T20, a, -)
	mrmovl -8(%ebp), %eax
	rmmovl %eax, 2712
#(PUSH, __T20, -, -)
	mrmovl 2712, %eax
	pushl %eax
#(ASSIGN, __T21, t, -)
	mrmovl -12(%ebp), %eax
	rmmovl %eax, 2716
#(PUSH, __T21, -, -)
	mrmovl 2716, %eax
	pushl %eax
#(PRECALL, my_func, -, -)
	pushl %ebp
	rrmovl %esp, %ebp
#(CALL, my_func, -, -)
	call my_func
#(POSTCALL, my_func, -, -)
	irmovl 20, %ecx
	rrmovl %ebp, %esp
	addl %ecx, %esp
#(MULT, __T22, __2, __RET_INT)
	irmovl 2, %eax
	rrmovl %edi, %ecx
	mull %ecx, %eax
	rmmovl %eax, 2720

#(ASSIGN, w, __T22, -)
	mrmovl 2720, %eax
	rmmovl %eax, -24(%ebp)
#(ADD, __T23, a, w)
	mrmovl -8(%ebp), %eax
	mrmovl -24(%ebp), %ecx
	addl %ecx, %eax
	rmmovl %eax, 2724

#(MULT, __T24, t, ppp)
	mrmovl -12(%ebp), %eax
	mrmovl -32(%ebp), %ecx
	mull %ecx, %eax
	rmmovl %eax, 2728

#(SUB, __T25, __T24, y)
	mrmovl 2728, %eax
	mrmovl -28(%ebp), %ecx
	subl %ecx, %eax
	rmmovl %eax, 2732

#(SUB, __T26, __T25, u)
	mrmovl 2732, %eax
	mrmovl -16(%ebp), %ecx
	subl %ecx, %eax
	rmmovl %eax, 2736

#(SUB, __T27, __T26, w)
	mrmovl 2736, %eax
	mrmovl -24(%ebp), %ecx
	subl %ecx, %eax
	rmmovl %eax, 2740

#(DIV, __T28, __T23, __T27)
	mrmovl 2724, %eax
	mrmovl 2740, %ecx
	divl %ecx, %eax
	rmmovl %eax, 2744

#(RETURN, __T28, -, -)
	mrmovl 2744, %edi
	rrmovl %ebp, %esp
	popl %ebp
	irmovl -8, %ecx
	addl %ecx, %esp
	ret
.pos 0xac0    #Start of string space

	.byte 	0x4c
	.byte 	0x4f
	.byte 	0x4c
	.byte 	0x21
	.byte 	0xa
	.byte 	0x69
	.byte 	0x6e
	.byte 	0x20
	.byte 	0x66
	.byte 	0x6f
	.byte 	0x72
	.byte 	0x20
	.byte 	0x6c
	.byte 	0x6f
	.byte 	0x6f
	.byte 	0x70
	.byte 	0xa
	.byte 	0x6e
	.byte 	0x6f
	.byte 	0x74
	.byte 	0xa
.pos 0xae4   # Start of global var space 
.pos 0x0000FFFC
stack:
