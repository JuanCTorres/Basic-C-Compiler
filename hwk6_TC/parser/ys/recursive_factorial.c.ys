

 #This function has locals 

#END OF PROG: 1592

.pos 0
	irmovl stack, %esp
	irmovl stack, %ebp
	call main
	halt
.pos 0x14
#(LABEL, recurr, -, -)
recurr:

	irmovl 12, %ecx
	subl %ecx, %esp
#NUM PARAMS: 1
	mrmovl 4(%ebp), %eax
	rmmovl %eax, -8(%ebp)
#(ASSIGN, __T1, a, -)
	mrmovl -8(%ebp), %eax
	rmmovl %eax, 1616
#(ASSIGN, __T2, __0, -)
	irmovl 0, %eax
	rmmovl %eax, 1620
#(EQ, __T3, __T1, __T2)
	mrmovl 1616, %eax
	mrmovl 1620, %ecx
	subl %ecx, %eax
	rmmovl %eax, 1624
#(ifTrue, __L_8_TRUE, __T3, -)
	je L_8_TRUE
#(ASSIGN, __T3, __0, -)
	irmovl 0, %eax
	rmmovl %eax, 1624
#(GOTO, __L_8_DONE, -, -)
	jmp L_8_DONE
#(LABEL, __L_8_TRUE, -, -)
L_8_TRUE:

#(ASSIGN, __T3, __1, -)
	irmovl 1, %eax
	rmmovl %eax, 1624
#(LABEL, __L_8_DONE, -, -)
L_8_DONE:

#(ASSIGN, __T0, __T3, -)
	mrmovl 1624, %eax
	rmmovl %eax, 1612
#(ifFalse, __L_7_ELSE, __T0, -)
	mrmovl 1612, %eax
	irmovl 0, %ecx
	subl %ecx, %eax
	je L_7_ELSE
#(RETURN, __1, -, -)
	irmovl 1, %edi
	rrmovl %ebp, %esp
	popl %ebp
	irmovl -8, %ecx
	addl %ecx, %esp
	ret
#(GOTO, __L_7_FI, -, -)
	jmp L_7_FI
#(LABEL, __L_7_ELSE, -, -)
L_7_ELSE:

#(SUB, __T4, a, __1)
	mrmovl -8(%ebp), %eax
	irmovl 1, %ecx
	subl %ecx, %eax
	rmmovl %eax, 1628

#(ASSIGN, __T5, __T4, -)
	mrmovl 1628, %eax
	rmmovl %eax, 1632
#(PUSH, __T5, -, -)
	mrmovl 1632, %eax
	pushl %eax
#(PRECALL, recurr, -, -)
	pushl %ebp
	rrmovl %esp, %ebp
#(CALL, recurr, -, -)
	call recurr
#(POSTCALL, recurr, -, -)
	irmovl 16, %ecx
	rrmovl %ebp, %esp
	addl %ecx, %esp
#(MULT, __T6, a, __RET_INT)
	mrmovl -8(%ebp), %eax
	rrmovl %edi, %ecx
	mull %ecx, %eax
	rmmovl %eax, 1636

#(RETURN, __T6, -, -)
	mrmovl 1636, %edi
	rrmovl %ebp, %esp
	popl %ebp
	irmovl -8, %ecx
	addl %ecx, %esp
	ret
#(LABEL, __L_7_FI, -, -)
L_7_FI:

#(RETURN, __1, -, -)
	irmovl 1, %edi
	rrmovl %ebp, %esp
	popl %ebp
	irmovl -8, %ecx
	addl %ecx, %esp
	ret
#(LABEL, main, -, -)
main:

	irmovl 28, %ecx
	subl %ecx, %esp
#NUM PARAMS: 0
#(MULT, __T7, __4, __4)
	irmovl 4, %eax
	irmovl 4, %ecx
	mull %ecx, %eax
	rmmovl %eax, 1640

#(ADDR, __T8, answer, -)
	irmovl -8, %eax
	addl %ebp, %eax
	rmmovl %eax, 1644
#(SUB, __T9, __T8, __T7)
	mrmovl 1644, %eax
	mrmovl 1640, %ecx
	subl %ecx, %eax
	rmmovl %eax, 1648

#(ASSIGN, __T9, __6, -)
	irmovl 6, %eax
	mrmovl 1648, %ecx
	rmmovl %eax, (%ecx)#(MULT, __T13, __4, __4)
	irmovl 4, %eax
	irmovl 4, %ecx
	mull %ecx, %eax
	rmmovl %eax, 1664

#(ADDR, __T14, answer, -)
	irmovl -8, %eax
	addl %ebp, %eax
	rmmovl %eax, 1668
#(SUB, __T15, __T14, __T13)
	mrmovl 1668, %eax
	mrmovl 1664, %ecx
	subl %ecx, %eax
	rmmovl %eax, 1672

#(DEREF, __T12, __T15, -)
	mrmovl 1672, %ecx
	mrmovl (%ecx), %eax
	rmmovl %eax, 1660
#(ASSIGN, __T11, __T12, -)
	mrmovl 1660, %eax
	rmmovl %eax, 1656
#(PUSH, __T11, -, -)
	mrmovl 1656, %eax
	pushl %eax
#(PRECALL, recurr, -, -)
	pushl %ebp
	rrmovl %esp, %ebp
#(CALL, recurr, -, -)
	call recurr
#(POSTCALL, recurr, -, -)
	irmovl 16, %ecx
	rrmovl %ebp, %esp
	addl %ecx, %esp
#(MULT, __T17, __2, __4)
	irmovl 2, %eax
	irmovl 4, %ecx
	mull %ecx, %eax
	rmmovl %eax, 1680

#(ADDR, __T18, answer, -)
	irmovl -8, %eax
	addl %ebp, %eax
	rmmovl %eax, 1684
#(SUB, __T19, __T18, __T17)
	mrmovl 1684, %eax
	mrmovl 1680, %ecx
	subl %ecx, %eax
	rmmovl %eax, 1688

#(ASSIGN, __T19, __RET_INT, -)
	rrmovl %edi, %eax
	mrmovl 1688, %ecx
	rmmovl %eax, (%ecx)#(MULT, __T22, __2, __4)
	irmovl 2, %eax
	irmovl 4, %ecx
	mull %ecx, %eax
	rmmovl %eax, 1700

#(ADDR, __T23, answer, -)
	irmovl -8, %eax
	addl %ebp, %eax
	rmmovl %eax, 1704
#(SUB, __T24, __T23, __T22)
	mrmovl 1704, %eax
	mrmovl 1700, %ecx
	subl %ecx, %eax
	rmmovl %eax, 1708

#(DEREF, __T21, __T24, -)
	mrmovl 1708, %ecx
	mrmovl (%ecx), %eax
	rmmovl %eax, 1696
#(PRINT, __T21, -, -)
	mrmovl 1696, %edx
	rmmovl %edx, 0x00FFFE14
#(MULT, __T27, __2, __4)
	irmovl 2, %eax
	irmovl 4, %ecx
	mull %ecx, %eax
	rmmovl %eax, 1720

#(ADDR, __T28, answer, -)
	irmovl -8, %eax
	addl %ebp, %eax
	rmmovl %eax, 1724
#(SUB, __T29, __T28, __T27)
	mrmovl 1724, %eax
	mrmovl 1720, %ecx
	subl %ecx, %eax
	rmmovl %eax, 1728

#(DEREF, __T26, __T29, -)
	mrmovl 1728, %ecx
	mrmovl (%ecx), %eax
	rmmovl %eax, 1716
#(RETURN, __T26, -, -)
	mrmovl 1716, %edi
	rrmovl %ebp, %esp
	popl %ebp
	irmovl -8, %ecx
	addl %ecx, %esp
	ret
.pos 0x6cc    #Start of string space

.pos 0x6d0   # Start of global var space 
.pos 0x0000FFFC
stack:
